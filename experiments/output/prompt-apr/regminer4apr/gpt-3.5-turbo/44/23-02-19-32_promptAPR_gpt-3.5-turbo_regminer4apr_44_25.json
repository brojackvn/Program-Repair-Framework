[
    {
        "patch": "public final float scanFieldFloat(char[] fieldName) {\n    matchStat = UNKNOWN;\n\n    if (!charArrayCompare(fieldName)) {\n        matchStat = NOT_MATCH_NAME;\n        return 0;\n    }\n\n    int offset = fieldName.length;\n    char chLocal = charAt(bp + (offset++));\n\n    final boolean quote = chLocal == '\"';\n    if (quote) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    boolean negative = chLocal == '-';\n    if (negative) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    int intVal = 0;\n    float value;\n\n    if (chLocal >= '0' && chLocal <= '9') {\n        intVal = chLocal - '0';\n        while (true) {\n            chLocal = charAt(bp + (offset++));\n            if (chLocal >= '0' && chLocal <= '9') {\n                intVal = intVal * 10 + (chLocal - '0');\n            } else {\n                break;\n            }\n        }\n\n        if (chLocal == '.') {\n            float decimal = 0;\n            float decimalPower = 1;\n            while (true) {\n                chLocal = charAt(bp + (offset++));\n                if (chLocal >= '0' && chLocal <= '9') {\n                    decimal = decimal * 10 + (chLocal - '0');\n                    decimalPower *= 10;\n                } else {\n                    break;\n                }\n            }\n            value = intVal + decimal / decimalPower;\n        } else {\n            value = intVal;\n        }\n\n        if (negative) {\n            value = -value;\n        }\n    } else if (chLocal == 'n' && charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n        matchStat = VALUE_NULL;\n        value = 0;\n        offset += 3;\n    } else {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    while (chLocal != ',' && chLocal != '}' && !isWhitespace(chLocal)) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    if (chLocal == ',') {\n        bp += offset;\n        this.ch = this.charAt(bp);\n        matchStat = VALUE;\n        token = JSONToken.COMMA;\n    } else if (chLocal == '}') {\n        chLocal = charAt(bp + (offset++));\n        if (chLocal == ',') {\n            token = JSONToken.COMMA;\n            bp += offset;\n            this.ch = this.charAt(bp);\n        } else if (chLocal == ']') {\n            token = JSONToken.RBRACKET;\n            bp += offset;\n            this.ch = this.charAt(bp);\n        } else if (chLocal == '}') {\n            token = JSONToken.RBRACE;\n            bp += offset;\n            this.ch = this.charAt(bp);\n        } else if (chLocal == EOI) {\n            bp += (offset - 1);\n            token = JSONToken.EOF;\n            ch = EOI;\n        } else {\n            matchStat = NOT_MATCH;\n            return 0;\n        }\n        matchStat = END;\n    } else {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    return value;\n}",
        "patched_method_loc": [
            2388,
            2491
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float_infinity: junit.framework.AssertionFailedError: expected:<Infinity> but was:<6.805647>",
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float: junit.framework.AssertionFailedError: expected:<3.4028235E38> but was:<3.4028234>",
            "com.alibaba.json.bvt.issue_1700.Issue1723#test_for_issue: junit.framework.AssertionFailedError: expected:<0.9390308> but was:<0.93903077>",
            "com.alibaba.json.bvt.FloatFieldTest_A#test_codec_null: java.lang.AssertionError: expected:<0.0> but was:<null>",
            "com.alibaba.json.bvt.basicType.FloatTest2_obj#test_0: junit.framework.AssertionFailedError: expected:<0.80090785> but was:<0.8009079>",
            "com.alibaba.json.bvt.basicType.FloatTest#test_0: junit.framework.AssertionFailedError: expected:<0.80090785> but was:<0.8009079>",
            "com.alibaba.json.bvt.basicType.FloatNullTest#test_null: junit.framework.AssertionFailedError: Expected : <null> but was: 0.0",
            "com.alibaba.json.bvt.basicType.FloatNullTest#test_null_quote: junit.framework.AssertionFailedError: Expected : <null> but was: 0.0"
        ],
        "validation_time": 55.001675844192505
    },
    {
        "patch": "public final float scanFieldFloat(char[] fieldName) {\n    matchStat = UNKNOWN;\n\n    if (!charArrayCompare(fieldName)) {\n        matchStat = NOT_MATCH_NAME;\n        return 0;\n    }\n\n    int offset = fieldName.length;\n    char chLocal = charAt(bp + offset);\n\n    final boolean quote = chLocal == '\"';\n    if (quote) {\n        chLocal = charAt(bp + (++offset));\n    }\n\n    boolean negative = chLocal == '-';\n    if (negative) {\n        chLocal = charAt(bp + (++offset));\n    }\n\n    float value;\n    if (chLocal >= '0' && chLocal <= '9') {\n        int intVal = chLocal - '0';\n        for (;;) {\n            chLocal = charAt(bp + (++offset));\n            if (chLocal >= '0' && chLocal <= '9') {\n                intVal = intVal * 10 + (chLocal - '0');\n            } else {\n                break;\n            }\n        }\n\n        int power = 1;\n        boolean small = (chLocal == '.');\n        if (small) {\n            chLocal = charAt(bp + (++offset));\n            if (chLocal >= '0' && chLocal <= '9') {\n                intVal = intVal * 10 + (chLocal - '0');\n                power = 10;\n                for (;;) {\n                    chLocal = charAt(bp + (++offset));\n                    if (chLocal >= '0' && chLocal <= '9') {\n                        intVal = intVal * 10 + (chLocal - '0');\n                        power *= 10;\n                    } else {\n                        break;\n                    }\n                }\n            } else {\n                matchStat = NOT_MATCH;\n                return 0;\n            }\n        }\n\n        boolean exp = chLocal == 'e' || chLocal == 'E';\n        if (exp) {\n            chLocal = charAt(bp + (++offset));\n            if (chLocal == '+' || chLocal == '-') {\n                chLocal = charAt(bp + (++offset));\n            }\n            for (;;) {\n                if (chLocal >= '0' && chLocal <= '9') {\n                    chLocal = charAt(bp + (++offset));\n                } else {\n                    break;\n                }\n            }\n        }\n\n        int start, count;\n        if (quote) {\n            if (chLocal != '\"') {\n                matchStat = NOT_MATCH;\n                return 0;\n            } else {\n                chLocal = charAt(bp + (++offset));\n            }\n            start = bp + fieldName.length + 1;\n            count = bp + offset - start - 2;\n        } else {\n            start = bp + fieldName.length;\n            count = bp + offset - start - 1;\n        }\n\n        if (!exp && count < 20) {\n            value = ((float) intVal) / power;\n            if (negative) {\n                value = -value;\n            }\n        } else {\n            String text = this.subString(start, count);\n            value = Float.parseFloat(text);\n        }\n    } else if (chLocal == 'n' && charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n        matchStat = VALUE_NULL;\n        value = 0;\n        offset += 3;\n        chLocal = charAt(bp + offset);\n\n        if (quote && chLocal == '\"') {\n            chLocal = charAt(bp + (++offset));\n        }\n\n        while (true) {\n            if (chLocal == ',' || chLocal == '}') {\n                break;\n            } else if (isWhitespace(chLocal)) {\n                chLocal = charAt(bp + (++offset));\n            } else {\n                matchStat = NOT_MATCH;\n                return 0;\n            }\n        }\n\n        if (chLocal == ',') {\n            bp += offset;\n            this.ch = charAt(bp);\n            matchStat = VALUE_NULL;\n            token = JSONToken.COMMA;\n            return value;\n        }\n\n        if (chLocal == '}') {\n            bp += offset;\n            this.ch = charAt(bp);\n            matchStat = VALUE_NULL;\n            token = JSONToken.RBRACE;\n            return value;\n        }\n    } else {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    if (chLocal == ',') {\n        bp += offset;\n        this.ch = this.charAt(bp);\n        matchStat = VALUE;\n        token = JSONToken.COMMA;\n        return value;\n    }\n\n    if (chLocal == '}') {\n        chLocal = charAt(bp + offset);\n        if (chLocal == ',') {\n            token = JSONToken.COMMA;\n            bp += offset;\n            this.ch = this.charAt(bp);\n        } else if (chLocal == ']') {\n            token = JSONToken.RBRACKET;\n            bp += offset;\n            this.ch = this.charAt(bp);\n        } else if (chLocal == '}') {\n            token = JSONToken.RBRACE;\n            bp += offset;\n            this.ch = this.charAt(bp);\n        } else if (chLocal == EOI) {\n            bp += (offset - 1);\n            token = JSONToken.EOF;\n            ch = EOI;\n        } else {\n            matchStat = NOT_MATCH;\n            return 0;\n        }\n        matchStat = END;\n    } else {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    return value;\n}",
        "patched_method_loc": [
            2388,
            2561
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.PublicFieldFloatTest#test_codec: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.FloatFieldTest#test_codec: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.deser.asm.TestASM_float#test_asm: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_3: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_error_1: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float_obj#test_create_2: com.alibaba.fastjson.JSONException: : setter not found, class com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float_obj$Entity, property null",
            "com.alibaba.json.bvt.parser.taobao.FloatObjectFieldTest#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float_infinity: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float#test_create_2: com.alibaba.fastjson.JSONException: : setter not found, class com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float$Entity, property null",
            "com.alibaba.json.bvt.issue_1700.Issue1723#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.FloatFieldTest_A#test_codec: com.alibaba.fastjson.JSONException: : not close json text, token : }"
        ],
        "validation_time": 48.66841721534729
    },
    {
        "patch": "public final float scanFieldFloat(char[] fieldName) {\n    matchStat = UNKNOWN;\n\n    if (!charArrayCompare(fieldName)) {\n        matchStat = NOT_MATCH_NAME;\n        return 0;\n    }\n\n    int offset = fieldName.length;\n    char chLocal = charAt(bp + (offset++));\n\n    final boolean quote = chLocal == '\"';\n    if (quote) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    boolean negative = chLocal == '-';\n    if (negative) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    float value = 0.0f; // Initialize value\n\n    if (chLocal >= '0' && chLocal <= '9') {\n        int intVal = chLocal - '0';\n        for (;;) {\n            chLocal = charAt(bp + (offset++));\n            if (chLocal >= '0' && chLocal <= '9') {\n                intVal = intVal * 10 + (chLocal - '0');\n            } else {\n                break;\n            }\n        }\n\n        int power = 1;\n        boolean small = (chLocal == '.');\n        if (small) {\n            chLocal = charAt(bp + (offset++));\n            if (chLocal >= '0' && chLocal <= '9') {\n                intVal = intVal * 10 + (chLocal - '0');\n                power = 10;\n                for (;;) {\n                    chLocal = charAt(bp + (offset++));\n                    if (chLocal >= '0' && chLocal <= '9') {\n                        intVal = intVal * 10 + (chLocal - '0');\n                        power *= 10;\n                    } else {\n                        break;\n                    }\n                }\n            } else {\n                matchStat = NOT_MATCH;\n                return 0;\n            }\n        }\n\n        boolean exp = chLocal == 'e' || chLocal == 'E';\n        if (exp) {\n            chLocal = charAt(bp + (offset++));\n            if (chLocal == '+' || chLocal == '-') {\n                chLocal = charAt(bp + (offset++));\n            }\n            for (;;) {\n                if (chLocal >= '0' && chLocal <= '9') {\n                    chLocal = charAt(bp + (offset++));\n                } else {\n                    break;\n                }\n            }\n        }\n\n        int start, count;\n        if (quote) {\n            if (chLocal != '\"') {\n                matchStat = NOT_MATCH;\n                return 0;\n            } else {\n                chLocal = charAt(bp + (offset++));\n            }\n            start = bp + fieldName.length + 1;\n            count = bp + offset - start - 2;\n        } else {\n            start = bp + fieldName.length;\n            count = bp + offset - start - 1;\n        }\n\n        if (!exp && count < 20) {\n            value = ((float) intVal) / power;\n            if (negative) {\n                value = -value;\n            }\n        } else {\n            String text = this.subString(start, count);\n            try {\n                value = Float.parseFloat(text);\n            } catch (NumberFormatException e) {\n                matchStat = NOT_MATCH;\n                return 0;\n            }\n        }\n    } else if (chLocal == 'n' && charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n        matchStat = VALUE_NULL;\n        offset += 3;\n        chLocal = charAt(bp + offset++);\n\n        if (quote && chLocal == '\"') {\n            chLocal = charAt(bp + offset++);\n        }\n\n        for (;;) {\n            if (chLocal == ',') {\n                bp += offset;\n                this.ch = charAt(bp);\n                matchStat = VALUE_NULL;\n                token = JSONToken.COMMA;\n                return value;\n            } else if (chLocal == '}') {\n                bp += offset;\n                this.ch = charAt(bp);\n                matchStat = VALUE_NULL;\n                token = JSONToken.RBRACE;\n                return value;\n            } else if (isWhitespace(chLocal)) {\n                chLocal = charAt(bp + offset++);\n            } else {\n                break;\n            }\n        }\n        matchStat = NOT_MATCH;\n        return 0;\n    } else {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    if (chLocal == ',') {\n        bp += offset;\n        this.ch = this.charAt(bp);\n        matchStat = VALUE;\n        token = JSONToken.COMMA;\n        return value;\n    }\n\n    if (chLocal == '}') {\n        chLocal = charAt(bp + (offset++));\n        if (chLocal == ',') {\n            token = JSONToken.COMMA;\n            bp += offset;\n            this.ch = this.charAt(bp);\n        } else if (chLocal == ']') {\n            token = JSONToken.RBRACKET;\n            bp += offset;\n            this.ch = this.charAt(bp);\n        } else if (chLocal == '}') {\n            token = JSONToken.RBRACE;\n            bp += offset;\n            this.ch = this.charAt(bp);\n        } else if (chLocal == EOI) {\n            bp += (offset - 1);\n            token = JSONToken.EOF;\n            ch = EOI;\n        } else {\n            matchStat = NOT_MATCH;\n            return 0;\n        }\n        matchStat = END;\n    } else {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    return value;\n}",
        "patched_method_loc": [
            2388,
            2561
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.issue_1700.Issue1723#test_for_issue: junit.framework.AssertionFailedError: expected:<0.9390308> but was:<-1.1075817>"
        ],
        "validation_time": 47.9979190826416
    },
    {
        "patch": "public final float scanFieldFloat(char[] fieldName) {\n    matchStat = UNKNOWN;\n\n    if (!charArrayCompare(fieldName)) {\n        matchStat = NOT_MATCH_NAME;\n        return 0;\n    }\n\n    int offset = fieldName.length;\n    char chLocal = charAt(bp + (offset++));\n\n    final boolean quote = chLocal == '\"';\n    if (quote) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    boolean negative = chLocal == '-';\n    if (negative) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    int intVal = 0;\n    while (chLocal >= '0' && chLocal <= '9') {\n        intVal = intVal * 10 + (chLocal - '0');\n        chLocal = charAt(bp + (offset++));\n    }\n\n    float value = intVal;\n    int power = 1;\n\n    if (chLocal == '.') {\n        chLocal = charAt(bp + (offset++));\n        while (chLocal >= '0' && chLocal <= '9') {\n            intVal = intVal * 10 + (chLocal - '0');\n            power *= 10;\n            chLocal = charAt(bp + (offset++));\n        }\n    }\n\n    if (negative) {\n        value = -value;\n    }\n\n    boolean exp = chLocal == 'e' || chLocal == 'E';\n    if (exp) {\n        int expVal = 0;\n        chLocal = charAt(bp + (offset++));\n        boolean expNegative = chLocal == '-';\n        if (expNegative || chLocal == '+') {\n            chLocal = charAt(bp + (offset++));\n        }\n        while (chLocal >= '0' && chLocal <= '9') {\n            expVal = expVal * 10 + (chLocal - '0');\n            chLocal = charAt(bp + (offset++));\n        }\n        double powerOfTen = Math.pow(10, expNegative ? -expVal : expVal);\n        value *= powerOfTen;\n    }\n\n    if (quote) {\n        if (chLocal != '\"') {\n            matchStat = NOT_MATCH;\n            return 0;\n        } else {\n            chLocal = charAt(bp + (offset++));\n        }\n    }\n\n    bp += offset;\n    this.ch = charAt(bp);\n    matchStat = VALUE;\n    token = JSONToken.COMMA;\n\n    return value / power;\n}",
        "patched_method_loc": [
            2388,
            2463
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.PublicFieldFloatTest#test_codec: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 12, json : {\"id\":123.4}",
            "com.alibaba.json.bvt.FloatFieldTest#test_codec: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 16, json : {\"value\":1001.0}",
            "com.alibaba.json.bvt.parser.JSONReaderScannerTest__entity_float#test_scanFloat: com.alibaba.fastjson.JSONException: : illegal identifier : {",
            "com.alibaba.json.bvt.parser.deser.asm.TestASM_float#test_asm: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 14, json : {\"value\":32.5}",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_0: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 13, json : {\"value\":1.0}",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_1: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 13, json : {\"value\":\"1\"}",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_3: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 14, json : {\"value\":1.01}",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_4: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 12, json : {\"value\":1.}",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_error_1: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 31, json : {\"value\":922337203685477580723}",
            "com.alibaba.json.bvt.parser.taobao.FloatObjectFieldTest#test_0: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 14, json : {\"value\":1001}",
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float_infinity: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 26, json : {\"v\":6.805646932770577E38}",
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 27, json : {\"v\":3.4028234663852886E38}",
            "com.alibaba.json.bvt.issue_1700.Issue1723#test_for_issue: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 28, json : {\"age\":\"0.9390308260917664\"}",
            "com.alibaba.json.bvt.FloatFieldTest_A#test_codec_null: com.alibaba.fastjson.JSONException: : not match : - }, info : pos 13, json : {\"value\":null}",
            "com.alibaba.json.bvt.FloatFieldTest_A#test_codec: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 16, json : {\"value\":1001.0}",
            "com.alibaba.json.bvt.basicType.FloatTest2_obj#test_0: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 81, json : {\"v1\":-0.012671709,\"v2\":0.6042485,\"v3\":0.13231707,\"v4\":0.80090785,\"v5\":0.6192943}",
            "com.alibaba.json.bvt.basicType.FloatTest#test_0: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 81, json : {\"v1\":-0.012671709,\"v2\":0.6042485,\"v3\":0.13231707,\"v4\":0.80090785,\"v5\":0.6192943}",
            "com.alibaba.json.bvt.basicType.FloatNullTest#test_null: com.alibaba.fastjson.JSONException: : not match : - ,, info : pos 10, json : {\"v1\":null,\"v2\":null}",
            "com.alibaba.json.bvt.basicType.FloatNullTest#test_null_1: com.alibaba.fastjson.JSONException: : not match : - ,, info : pos 11, json : {\"v1\":null ,\"v2\":null }",
            "com.alibaba.json.bvt.bug.Bug_for_primitive_float#test_null: com.alibaba.fastjson.JSONException: : not match : - }, info : pos 13, json : {\"value\":null}",
            "com.alibaba.json.bvt.bug.Bug_for_primitive_float#test_emptyStr: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 12, json : {\"value\":\"\"}",
            "com.alibaba.json.bvt.basicType.FloatNullTest_primitive#test_null: com.alibaba.fastjson.JSONException: : not match : - ,, info : pos 10, json : {\"v1\":null,\"v2\":null}",
            "com.alibaba.json.bvt.basicType.FloatNullTest_primitive#test_null_1: com.alibaba.fastjson.JSONException: : not match : - ,, info : pos 11, json : {\"v1\":null ,\"v2\":null }",
            "com.alibaba.json.bvt.bug.Bug_for_issue_435#test_for_issue_Float: com.alibaba.fastjson.JSONException: : not match : - }, info : pos 14, json : ﻿{\"value\":null}",
            "com.alibaba.json.bvt.bug.Bug_for_issue_435#test_for_issue: com.alibaba.fastjson.JSONException: : not match : - }, info : pos 14, json : ﻿{\"value\":null}"
        ],
        "validation_time": 47.448495388031006
    },
    {
        "patch": "public final float scanFieldFloat(char[] fieldName) {\n    matchStat = UNKNOWN;\n\n    if (!charArrayCompare(fieldName)) {\n        matchStat = NOT_MATCH_NAME;\n        return 0;\n    }\n\n    int offset = fieldName.length;\n    char chLocal = charAt(bp + (offset++));\n\n    final boolean quote = chLocal == '\"';\n    if (quote) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    boolean negative = chLocal == '-';\n    if (negative) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    StringBuilder numberStr = new StringBuilder();\n    while (chLocal >= '0' && chLocal <= '9') {\n        numberStr.append(chLocal);\n        chLocal = charAt(bp + (offset++));\n    }\n\n    if (chLocal == '.') {\n        numberStr.append(chLocal);\n        chLocal = charAt(bp + (offset++));\n        while (chLocal >= '0' && chLocal <= '9') {\n            numberStr.append(chLocal);\n            chLocal = charAt(bp + (offset++));\n        }\n    }\n\n    if (chLocal == 'e' || chLocal == 'E') {\n        numberStr.append(chLocal);\n        chLocal = charAt(bp + (offset++));\n        if (chLocal == '+' || chLocal == '-') {\n            numberStr.append(chLocal);\n            chLocal = charAt(bp + (offset++));\n        }\n        while (chLocal >= '0' && chLocal <= '9') {\n            numberStr.append(chLocal);\n            chLocal = charAt(bp + (offset++));\n        }\n    }\n\n    float value;\n    if (quote) {\n        if (chLocal != '\"') {\n            matchStat = NOT_MATCH;\n            return 0;\n        }\n        offset++;\n    }\n\n    try {\n        value = Float.parseFloat(numberStr.toString());\n        if (negative) {\n            value = -value;\n        }\n        matchStat = VALUE;\n    } catch (NumberFormatException e) {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    return value;\n}",
        "patched_method_loc": [
            2388,
            2459
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float_obj#test_create_2: com.alibaba.fastjson.JSONException: : setter not found, class com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float_obj$Entity, property id",
            "com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float#test_create_2: com.alibaba.fastjson.JSONException: : setter not found, class com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float$Entity, property id"
        ],
        "validation_time": 49.12035012245178
    },
    {
        "patch": "public final float scanFieldFloat(char[] fieldName) {\n    matchStat = UNKNOWN;\n\n    if (!charArrayCompare(fieldName)) {\n        matchStat = NOT_MATCH_NAME;\n        return 0;\n    }\n\n    int offset = fieldName.length;\n    char chLocal = charAt(bp + (offset++));\n\n    final boolean quote = chLocal == '\"';\n    if (quote) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    boolean negative = chLocal == '-';\n    if (negative) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    float value = 0;\n    int intVal = 0;\n    int power = 1;\n    boolean hasFractionalPart = false;\n\n    while (chLocal >= '0' && chLocal <= '9') {\n        intVal = intVal * 10 + (chLocal - '0');\n        chLocal = charAt(bp + (offset++));\n    }\n\n    if (chLocal == '.') {\n        hasFractionalPart = true;\n        chLocal = charAt(bp + (offset++));\n        while (chLocal >= '0' && chLocal <= '9') {\n            intVal = intVal * 10 + (chLocal - '0');\n            power *= 10;\n            chLocal = charAt(bp + (offset++));\n        }\n    }\n\n    if (hasFractionalPart || power > 1) {\n        value = (float) intVal / power;\n    } else {\n        value = (float) intVal;\n    }\n\n    if (negative) {\n        value = -value;\n    }\n\n    return value;\n}",
        "patched_method_loc": [
            2388,
            2441
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float_infinity: com.alibaba.fastjson.JSONException: : parseLong error, field : v"
        ],
        "validation_time": 48.22127938270569
    },
    {
        "patch": "public final float scanFieldFloat(char[] fieldName) {\n    matchStat = UNKNOWN;\n\n    if (!charArrayCompare(fieldName)) {\n        matchStat = NOT_MATCH_NAME;\n        return 0;\n    }\n\n    int offset = fieldName.length;\n    char chLocal = charAt(bp + (offset++));\n\n    final boolean quote = chLocal == '\"';\n    if (quote) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    boolean negative = chLocal == '-';\n    if (negative) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    float value = 0;\n    if (chLocal >= '0' && chLocal <= '9') {\n        int intVal = chLocal - '0';\n        for (;;) {\n            chLocal = charAt(bp + (offset++));\n            if (chLocal >= '0' && chLocal <= '9') {\n                intVal = intVal * 10 + (chLocal - '0');\n                continue;\n            } else {\n                break;\n            }\n        }\n\n        int power = 1;\n        boolean small = (chLocal == '.');\n        if (small) {\n            chLocal = charAt(bp + (offset++));\n            float decimalVal = 0;\n            int decimalPlaces = 0;\n            while (chLocal >= '0' && chLocal <= '9') {\n                decimalVal = decimalVal * 10 + (chLocal - '0');\n                decimalPlaces++;\n                chLocal = charAt(bp + (offset++));\n            }\n            value = intVal + decimalVal / (float) Math.pow(10, decimalPlaces);\n        } else {\n            value = intVal;\n        }\n\n        if (negative) {\n            value = -value;\n        }\n    } else if (chLocal == 'n' && charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n        matchStat = VALUE_NULL;\n        offset += 3;\n    } else {\n        matchStat = NOT_MATCH;\n    }\n\n    if (quote) {\n        if (chLocal != '\"') {\n            matchStat = NOT_MATCH;\n            return 0;\n        } else {\n            chLocal = charAt(bp + (offset++));\n        }\n    }\n\n    if (chLocal == ',') {\n        bp += offset;\n        this.ch = charAt(bp);\n        matchStat = VALUE;\n        token = JSONToken.COMMA;\n    } else if (chLocal == '}') {\n        bp += offset;\n        this.ch = charAt(bp);\n        matchStat = END;\n        token = JSONToken.RBRACE;\n    } else {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    return value;\n}",
        "patched_method_loc": [
            2388,
            2474
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.PublicFieldFloatTest#test_codec: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.FloatFieldTest#test_codec: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.deser.asm.TestASM_float#test_asm: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_3: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_4: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_error_1: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.taobao.FloatObjectFieldTest#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float_infinity: com.alibaba.fastjson.JSONException: : parseLong error, field : v",
            "com.alibaba.json.bvt.issue_1700.Issue1723#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.FloatFieldTest_A#test_codec: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.basicType.FloatTest2_obj#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.basicType.FloatTest#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.bug.Bug_for_primitive_float#test_emptyStr: com.alibaba.fastjson.JSONException: : not close json text, token : }"
        ],
        "validation_time": 49.71413016319275
    },
    {
        "patch": "public final float scanFieldFloat(char[] fieldName) {\n    matchStat = UNKNOWN;\n\n    if (!charArrayCompare(fieldName)) {\n        matchStat = NOT_MATCH_NAME;\n        return 0;\n    }\n\n    int offset = fieldName.length;\n    char chLocal = charAt(bp + (offset++));\n\n    final boolean quote = chLocal == '\"';\n    if (quote) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    boolean negative = chLocal == '-';\n    if (negative) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    float value = 0.0f;\n    boolean isFloat = false;\n\n    if (chLocal >= '0' && chLocal <= '9') {\n        int intVal = chLocal - '0';\n        for (;;) {\n            chLocal = charAt(bp + (offset++));\n            if (chLocal >= '0' && chLocal <= '9') {\n                intVal = intVal * 10 + (chLocal - '0');\n            } else if (chLocal == '.' && !isFloat) {\n                isFloat = true;\n            } else {\n                break;\n            }\n        }\n\n        if (isFloat) {\n            float decimal = 0.1f;\n            while (chLocal >= '0' && chLocal <= '9') {\n                intVal = intVal * 10 + (chLocal - '0');\n                decimal *= 0.1f;\n                chLocal = charAt(bp + (offset++));\n            }\n            value = (float) intVal * decimal;\n        } else {\n            value = (float) intVal;\n        }\n\n        if (negative) {\n            value = -value;\n        }\n    } else if (chLocal == 'n' && charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n        matchStat = VALUE_NULL;\n        offset += 3;\n    } else {\n        matchStat = NOT_MATCH;\n    }\n\n    return value;\n}",
        "patched_method_loc": [
            2388,
            2449
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float_infinity: com.alibaba.fastjson.JSONException: : parseLong error, field : v",
            "com.alibaba.json.bvt.FloatFieldTest_A#test_codec_null: java.lang.AssertionError: expected:<0.0> but was:<null>",
            "com.alibaba.json.bvt.basicType.FloatNullTest#test_null: junit.framework.AssertionFailedError: Expected : <null> but was: 0.0",
            "com.alibaba.json.bvt.basicType.FloatNullTest#test_null_1: junit.framework.AssertionFailedError: Expected : <null> but was: 0.0",
            "com.alibaba.json.bvt.basicType.FloatNullTest#test_null_1_quote: junit.framework.AssertionFailedError: Expected : <null> but was: 0.0",
            "com.alibaba.json.bvt.basicType.FloatNullTest#test_null_quote: junit.framework.AssertionFailedError: Expected : <null> but was: 0.0"
        ],
        "validation_time": 47.890918254852295
    },
    {
        "patch": "public final float scanFieldFloat(char[] fieldName) {\n    matchStat = UNKNOWN;\n\n    if (!charArrayCompare(fieldName)) {\n        matchStat = NOT_MATCH_NAME;\n        return 0;\n    }\n\n    int offset = fieldName.length;\n    char chLocal = charAt(bp + offset);\n    offset++;\n\n    final boolean quote = chLocal == '\"';\n    if (quote) {\n        chLocal = charAt(bp + offset);\n        offset++;\n    }\n\n    boolean negative = chLocal == '-';\n    if (negative) {\n        chLocal = charAt(bp + offset);\n        offset++;\n    }\n\n    StringBuilder numberBuilder = new StringBuilder();\n    boolean isFloat = false;\n    while (chLocal >= '0' && chLocal <= '9' || chLocal == '.') {\n        numberBuilder.append(chLocal);\n        if (chLocal == '.') {\n            isFloat = true;\n        }\n        chLocal = charAt(bp + offset);\n        offset++;\n    }\n\n    float value;\n    if (isFloat) {\n        value = Float.parseFloat(numberBuilder.toString());\n    } else {\n        value = Float.parseFloat(numberBuilder.toString());\n    }\n\n    if (negative) {\n        value = -value;\n    }\n\n    if (quote) {\n        chLocal = charAt(bp + offset);\n        offset++;\n    }\n\n    bp += offset;\n    this.ch = charAt(bp);\n    matchStat = VALUE;\n    return value;\n}",
        "patched_method_loc": [
            2388,
            2444
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.PublicFieldFloatTest#test_codec: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 12, json : {\"id\":123.4}",
            "com.alibaba.json.bvt.FloatFieldTest#test_codec: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 16, json : {\"value\":1001.0}",
            "com.alibaba.json.bvt.parser.JSONReaderScannerTest__entity_float#test_scanFloat: com.alibaba.fastjson.JSONException: : illegal identifier : {",
            "com.alibaba.json.bvt.parser.deser.asm.TestASM_float#test_asm: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 14, json : {\"value\":32.5}",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_0: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 13, json : {\"value\":1.0}",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_1: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 13, json : {\"value\":\"1\"}",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_3: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 14, json : {\"value\":1.01}",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_4: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 12, json : {\"value\":1.}",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_error_1: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 31, json : {\"value\":922337203685477580723}",
            "com.alibaba.json.bvt.parser.taobao.FloatObjectFieldTest#test_0: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 14, json : {\"value\":1001}",
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float_infinity: com.alibaba.fastjson.JSONException: : illegal identifier : 3pos 23, json : {\"v\":6.805646932770577E38}",
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float: com.alibaba.fastjson.JSONException: : illegal identifier : 3pos 24, json : {\"v\":3.4028234663852886E38}",
            "com.alibaba.json.bvt.bug.Bug_for_issue_479#test_for_issue_private: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.bug.Bug_for_issue_479#test_for_issue: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.bug.Bug_for_Johnny#test_bug: com.alibaba.fastjson.JSONException: : illegal identifier : -pos 167, json : {\"@type\":\"com.alibaba.json.bvt.bug.Bug_for_Johnny$MyObject\",\"boolType\":true,\"byteType\":-128,\"charType\":\"\\u0000\",\"doubleType\":4.9E-324,\"enumType\":\"MD5\",\"floatType\":1.4E-45,\"intType\":-2147483648,\"listType\":[\"aaa\",\"bbb\"],\"longType\":-9223372036854775808,\"mapType\":{\"@type\":\"java.util.HashMap\",\"key\":\"value\"},\"setType\":Set[\"aaa\",\"bbb\"],\"shortType\":-32768,\"stringType\":\"aadf\"}",
            "com.alibaba.json.bvt.issue_1700.Issue1723#test_for_issue: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 28, json : {\"age\":\"0.9390308260917664\"}",
            "com.alibaba.json.bvt.FloatFieldTest_A#test_codec_null: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.FloatFieldTest_A#test_codec: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 16, json : {\"value\":1001.0}",
            "com.alibaba.json.bvt.basicType.FloatTest2_obj#test_0: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 81, json : {\"v1\":-0.012671709,\"v2\":0.6042485,\"v3\":0.13231707,\"v4\":0.80090785,\"v5\":0.6192943}",
            "com.alibaba.json.bvt.basicType.FloatTest#test_0: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 81, json : {\"v1\":-0.012671709,\"v2\":0.6042485,\"v3\":0.13231707,\"v4\":0.80090785,\"v5\":0.6192943}",
            "com.alibaba.json.bvt.basicType.FloatNullTest#test_null: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.basicType.FloatNullTest#test_null_1: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.basicType.FloatNullTest#test_null_1_quote: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.basicType.FloatNullTest#test_null_quote: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.bug.Bug_for_primitive_float#test_null: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.bug.Bug_for_primitive_float#test_emptyStr: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.bug.Bug_for_primitive_float#test_strNull: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.basicType.FloatNullTest_primitive#test_null: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.basicType.FloatNullTest_primitive#test_null_1: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.basicType.FloatNullTest_primitive#test_null_2: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.bug.Bug_for_issue_435#test_for_issue_Float: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.bug.Bug_for_issue_435#test_for_issue: com.alibaba.fastjson.JSONException: : empty String"
        ],
        "validation_time": 48.39923620223999
    },
    {
        "patch": "public final float scanFieldFloat(char[] fieldName) {\n    matchStat = UNKNOWN;\n\n    if (!charArrayCompare(fieldName)) {\n        matchStat = NOT_MATCH_NAME;\n        return 0;\n    }\n\n    int offset = fieldName.length;\n    char chLocal = charAt(bp + (offset++));\n\n    final boolean quote = chLocal == '\"';\n    if (quote) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    boolean negative = chLocal == '-';\n    if (negative) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    float value;\n    int intVal = 0;\n    int power = 1;\n    boolean hasFraction = false;\n    boolean hasExponent = false;\n\n    while (chLocal >= '0' && chLocal <= '9') {\n        intVal = intVal * 10 + (chLocal - '0');\n        chLocal = charAt(bp + (offset++));\n    }\n\n    if (chLocal == '.') {\n        hasFraction = true;\n        chLocal = charAt(bp + (offset++));\n        while (chLocal >= '0' && chLocal <= '9') {\n            intVal = intVal * 10 + (chLocal - '0');\n            power *= 10;\n            chLocal = charAt(bp + (offset++));\n        }\n    }\n\n    if (chLocal == 'e' || chLocal == 'E') {\n        hasExponent = true;\n        chLocal = charAt(bp + (offset++));\n        if (chLocal == '+' || chLocal == '-') {\n            chLocal = charAt(bp + (offset++));\n        }\n        while (chLocal >= '0' && chLocal <= '9') {\n            chLocal = charAt(bp + (offset++));\n        }\n    }\n\n    if (quote && chLocal != '\"') {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    int start = quote ? bp + fieldName.length + 1 : bp + fieldName.length;\n    int count = offset - 1 - (quote ? 2 : 1);\n\n    if (!hasExponent && !hasFraction && count < 20) {\n        value = (float) intVal / power;\n        if (negative) {\n            value = -value;\n        }\n    } else {\n        String text = this.subString(start, count);\n        value = Float.parseFloat(text);\n    }\n\n    if (chLocal == ',') {\n        bp += offset;\n        this.ch = charAt(bp);\n        matchStat = VALUE;\n        token = JSONToken.COMMA;\n        return value;\n    }\n\n    if (chLocal == '}') {\n        token = JSONToken.RBRACE;\n        bp += offset;\n        this.ch = this.charAt(bp);\n        matchStat = END;\n    } else {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    return value;\n}",
        "patched_method_loc": [
            2388,
            2479
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.PublicFieldFloatTest#test_codec: com.alibaba.fastjson.JSONException: : String index out of range: 15",
            "com.alibaba.json.bvt.FloatFieldTest#test_codec: com.alibaba.fastjson.JSONException: : String index out of range: 22",
            "com.alibaba.json.bvt.TypeUtilstTest#test_0: java.lang.NumberFormatException: : For input string: \"15.0,\"f16\"",
            "com.alibaba.json.bvt.parser.JSONReaderScannerTest__entity_float#test_scanFloat: java.lang.NumberFormatException: : For input string: \"0.0},{\"\"",
            "com.alibaba.json.bvt.parser.deser.asm.TestASM_float#test_asm: com.alibaba.fastjson.JSONException: : String index out of range: 20",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_0: com.alibaba.fastjson.JSONException: : String index out of range: 19",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_3: com.alibaba.fastjson.JSONException: : String index out of range: 20",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_4: com.alibaba.fastjson.JSONException: : String index out of range: 18",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_error_1: com.alibaba.fastjson.JSONException: : String index out of range: 37",
            "com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float_obj#test_create: com.alibaba.fastjson.JSONException: : For input string: \"123.45,\"na\"",
            "com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float_obj#test_create_2: com.alibaba.fastjson.JSONException: : For input string: \"123.45,\"na\"",
            "com.alibaba.json.bvt.parser.taobao.FloatObjectFieldTest#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float_infinity: com.alibaba.fastjson.JSONException: : String index out of range: 28",
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float: com.alibaba.fastjson.JSONException: : String index out of range: 29",
            "com.alibaba.json.bvt.bug.Bug_for_Johnny#test_bug: java.lang.NumberFormatException: : For input string: \"1.4E-45,\"intType\":\"",
            "com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float#test_create: com.alibaba.fastjson.JSONException: : For input string: \"123.45,\"na\"",
            "com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float#test_create_2: com.alibaba.fastjson.JSONException: : For input string: \"123.45,\"na\"",
            "com.alibaba.json.bvt.issue_1700.Issue1723#test_for_issue: com.alibaba.fastjson.JSONException: : String index out of range: 31",
            "com.alibaba.json.bvt.FloatFieldTest_A#test_codec: com.alibaba.fastjson.JSONException: : String index out of range: 22",
            "com.alibaba.json.bvt.basicType.FloatTest2_obj#test_0: com.alibaba.fastjson.JSONException: : For input string: \"-0.012671709,\"v2\"",
            "com.alibaba.json.bvt.basicType.FloatTest#test_0: com.alibaba.fastjson.JSONException: : For input string: \"-0.012671709,\"v2\""
        ],
        "validation_time": 47.751816272735596
    },
    {
        "patch": "public final float scanFieldFloat(char[] fieldName) {\n    matchStat = UNKNOWN;\n\n    if (!charArrayCompare(fieldName)) {\n        matchStat = NOT_MATCH_NAME;\n        return 0;\n    }\n\n    int offset = fieldName.length;\n    char chLocal = charAt(bp + (offset++));\n\n    final boolean quote = chLocal == '\"';\n    if (quote) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    boolean negative = chLocal == '-';\n    if (negative) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    float value = 0;\n    int intVal = 0;\n    int power = 1;\n\n    if (chLocal >= '0' && chLocal <= '9') {\n        intVal = chLocal - '0';\n        for (;;) {\n            chLocal = charAt(bp + (offset++));\n            if (chLocal >= '0' && chLocal <= '9') {\n                intVal = intVal * 10 + (chLocal - '0');\n            } else {\n                break;\n            }\n        }\n\n        if (chLocal == '.') {\n            chLocal = charAt(bp + (offset++));\n            if (chLocal >= '0' && chLocal <= '9') {\n                do {\n                    intVal = intVal * 10 + (chLocal - '0');\n                    power *= 10;\n                    chLocal = charAt(bp + (offset++));\n                } while (chLocal >= '0' && chLocal <= '9');\n            } else {\n                matchStat = NOT_MATCH;\n                return 0;\n            }\n        }\n\n        if (chLocal == 'e' || chLocal == 'E') {\n            chLocal = charAt(bp + (offset++));\n            boolean expNegative = false;\n            if (chLocal == '+' || chLocal == '-') {\n                expNegative = (chLocal == '-');\n                chLocal = charAt(bp + (offset++));\n            }\n\n            int expVal = 0;\n            while (chLocal >= '0' && chLocal <= '9') {\n                expVal = expVal * 10 + (chLocal - '0');\n                chLocal = charAt(bp + (offset++));\n            }\n\n            if (expNegative) {\n                power *= (int) Math.pow(10, expVal);\n            } else {\n                power /= (int) Math.pow(10, expVal);\n            }\n        }\n\n        if (quote) {\n            if (chLocal != '\"') {\n                matchStat = NOT_MATCH;\n                return 0;\n            }\n        }\n\n        value = (float) intVal / power;\n        if (negative) {\n            value = -value;\n        }\n    } else if (chLocal == 'n' && charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n        matchStat = VALUE_NULL;\n        return 0;\n    } else {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    if (chLocal == ',') {\n        bp += offset;\n        this.ch = charAt(bp);\n        matchStat = VALUE;\n        token = JSONToken.COMMA;\n    } else if (chLocal == '}') {\n        token = JSONToken.RBRACE;\n        bp += offset;\n        this.ch = this.charAt(bp);\n    } else {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    return value;\n}",
        "patched_method_loc": [
            2388,
            2494
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float_infinity: junit.framework.AssertionFailedError: expected:<Infinity> but was:<0.0>",
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float: junit.framework.AssertionFailedError: expected:<3.4028235E38> but was:<0.0>",
            "com.alibaba.json.bvt.FloatFieldTest_A#test_codec_null: java.lang.AssertionError: expected:<0.0> but was:<null>",
            "com.alibaba.json.bvt.FloatFieldTest_A#test_codec: java.lang.AssertionError: expected:<null> but was:<1001.0>",
            "com.alibaba.json.bvt.basicType.FloatTest2_obj#test_0: junit.framework.AssertionFailedError: expected:<0.6192943> but was:<null>",
            "com.alibaba.json.bvt.basicType.FloatTest#test_0: junit.framework.AssertionFailedError: expected:<0.6192943> but was:<0.0>",
            "com.alibaba.json.bvt.basicType.FloatNullTest#test_null: junit.framework.AssertionFailedError: Expected : <null> but was: 0.0",
            "com.alibaba.json.bvt.basicType.FloatNullTest#test_null_1: junit.framework.AssertionFailedError: Expected : <null> but was: 0.0",
            "com.alibaba.json.bvt.basicType.FloatNullTest#test_null_1_quote: junit.framework.AssertionFailedError: Expected : <null> but was: 0.0",
            "com.alibaba.json.bvt.basicType.FloatNullTest#test_null_quote: junit.framework.AssertionFailedError: Expected : <null> but was: 0.0"
        ],
        "validation_time": 48.28500699996948
    },
    {
        "patch": "public final float scanFieldFloat(char[] fieldName) {\n    matchStat = UNKNOWN;\n\n    if (!charArrayCompare(fieldName)) {\n        matchStat = NOT_MATCH_NAME;\n        return 0;\n    }\n\n    int offset = fieldName.length;\n    char chLocal = charAt(bp + offset++);\n    \n    final boolean quote = chLocal == '\"';\n    if (quote) {\n        chLocal = charAt(bp + offset++);\n    }\n\n    boolean negative = chLocal == '-';\n    if (negative) {\n        chLocal = charAt(bp + offset++);\n    }\n\n    int intVal = 0;\n    float value = 0;\n    int power = 1;\n\n    if (chLocal >= '0' && chLocal <= '9') {\n        intVal = chLocal - '0';\n        for (;;) {\n            chLocal = charAt(bp + offset);\n            if (chLocal >= '0' && chLocal <= '9') {\n                intVal = intVal * 10 + (chLocal - '0');\n                offset++;\n            } else {\n                break;\n            }\n        }\n\n        boolean small = (chLocal == '.');\n        if (small) {\n            offset++;\n            power = 10;\n            for (;;) {\n                chLocal = charAt(bp + offset);\n                if (chLocal >= '0' && chLocal <= '9') {\n                    intVal = intVal * 10 + (chLocal - '0');\n                    power *= 10;\n                    offset++;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        boolean exp = chLocal == 'e' || chLocal == 'E';\n        if (exp) {\n            offset++;\n            if (charAt(bp + offset) == '+' || charAt(bp + offset) == '-') {\n                offset++;\n            }\n            for (;;) {\n                chLocal = charAt(bp + offset);\n                if (chLocal >= '0' && chLocal <= '9') {\n                    offset++;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        int start = bp + fieldName.length;\n        int count = offset - fieldName.length;\n\n        if (!exp && count < 20) {\n            value = ((float) intVal) / power;\n            if (negative) {\n                value = -value;\n            }\n        } else {\n            String text = this.subString(start, count);\n            value = Float.parseFloat(text);\n        }\n    } else if (chLocal == 'n' && charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n        matchStat = VALUE_NULL;\n        value = 0;\n        offset += 3;\n        chLocal = charAt(bp + offset);\n\n        if (quote && chLocal == '\"') {\n            offset++;\n            chLocal = charAt(bp + offset);\n        }\n\n        while (isWhitespace(chLocal)) {\n            offset++;\n            chLocal = charAt(bp + offset);\n        }\n\n        if (chLocal == ',' || chLocal == '}') {\n            bp += offset;\n            this.ch = charAt(bp);\n            matchStat = VALUE_NULL;\n            token = (chLocal == ',') ? JSONToken.COMMA : JSONToken.RBRACE;\n            return value;\n        }\n    }\n\n    return value;\n}",
        "patched_method_loc": [
            2388,
            2496
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float_infinity: com.alibaba.fastjson.JSONException: : parseLong error, field : v",
            "com.alibaba.json.bvt.FloatFieldTest_A#test_codec_null: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.bug.Bug_for_primitive_float#test_null: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.bug.Bug_for_primitive_float#test_strNull: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.bug.Bug_for_issue_435#test_for_issue_Float: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.bug.Bug_for_issue_435#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : }"
        ],
        "validation_time": 48.30728888511658
    },
    {
        "patch": "public final float scanFieldFloat(char[] fieldName) {\n    matchStat = UNKNOWN;\n\n    if (!charArrayCompare(fieldName)) {\n        matchStat = NOT_MATCH_NAME;\n        return 0;\n    }\n\n    int offset = fieldName.length;\n    char chLocal = charAt(bp + (offset++));\n\n    final boolean quote = chLocal == '\"';\n    if (quote) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    boolean negative = chLocal == '-';\n    if (negative) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    float value = 0.0f;\n    int intVal = 0;\n    int power = 1;\n    boolean hasFraction = false;\n    boolean hasExponent = false;\n\n    while (chLocal >= '0' && chLocal <= '9') {\n        intVal = intVal * 10 + (chLocal - '0');\n        chLocal = charAt(bp + (offset++));\n    }\n\n    if (chLocal == '.') {\n        hasFraction = true;\n        chLocal = charAt(bp + (offset++));\n        while (chLocal >= '0' && chLocal <= '9') {\n            intVal = intVal * 10 + (chLocal - '0');\n            power *= 10;\n            chLocal = charAt(bp + (offset++));\n        }\n    }\n\n    if (chLocal == 'e' || chLocal == 'E') {\n        hasExponent = true;\n        chLocal = charAt(bp + (offset++));\n        if (chLocal == '+' || chLocal == '-') {\n            chLocal = charAt(bp + (offset++));\n        }\n        while (chLocal >= '0' && chLocal <= '9') {\n            chLocal = charAt(bp + (offset++));\n        }\n    }\n\n    if (quote && chLocal != '\"') {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    if (hasFraction || hasExponent) {\n        String text = this.subString(bp + fieldName.length, offset - fieldName.length - 1);\n        value = Float.parseFloat(text);\n    } else {\n        value = ((float) intVal) / power;\n    }\n\n    if (negative) {\n        value = -value;\n    }\n\n    while (chLocal != ',' && chLocal != '}' && chLocal != ']') {\n        if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + offset++);\n        } else {\n            matchStat = NOT_MATCH;\n            return 0;\n        }\n    }\n\n    if (chLocal == ',') {\n        bp += offset;\n        this.ch = charAt(bp);\n        matchStat = VALUE;\n        token = JSONToken.COMMA;\n    } else if (chLocal == '}') {\n        token = JSONToken.RBRACE;\n        bp += offset;\n        this.ch = charAt(bp);\n    } else if (chLocal == ']') {\n        token = JSONToken.RBRACKET;\n        bp += offset;\n        this.ch = charAt(bp);\n    } else if (chLocal == EOI) {\n        token = JSONToken.EOF;\n        ch = EOI;\n    }\n\n    matchStat = END;\n    return value;\n}",
        "patched_method_loc": [
            2388,
            2487
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.PublicFieldFloatTest#test_codec: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.FloatFieldTest#test_codec: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.TypeUtilstTest#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, pos 179, fastjson-version 1.2.46",
            "com.alibaba.json.bvt.parser.deser.asm.TestASM_float#test_asm: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_3: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_4: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_error_1: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float_obj#test_create: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float_obj#test_create_2: java.lang.AssertionError: expected:<菜姐> but was:<null>",
            "com.alibaba.json.bvt.parser.taobao.FloatObjectFieldTest#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float_infinity: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.deser.FieldDeserializerTest6#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.bug.Bug_for_Johnny#test_bug: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float#test_create: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float#test_create_2: java.lang.AssertionError: expected:<菜姐> but was:<null>",
            "com.alibaba.json.bvt.issue_1700.Issue1723#test_for_issue: com.alibaba.fastjson.JSONException: : For input string: \"\"0.9390308260917664\"",
            "com.alibaba.json.bvt.FloatFieldTest_A#test_codec: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.basicType.FloatTest2_obj#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.basicType.FloatTest#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ,"
        ],
        "validation_time": 48.63476800918579
    },
    {
        "patch": "public final float scanFieldFloat(char[] fieldName) {\n    matchStat = UNKNOWN;\n\n    if (!charArrayCompare(fieldName)) {\n        matchStat = NOT_MATCH_NAME;\n        return 0;\n    }\n\n    int offset = fieldName.length;\n    char chLocal = charAt(bp + (offset++));\n\n    final boolean quote = chLocal == '\"';\n    if (quote) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    boolean negative = chLocal == '-';\n    if (negative) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    int intVal = 0;\n    int power = 1;\n    float value;\n\n    while (chLocal >= '0' && chLocal <= '9') {\n        intVal = intVal * 10 + (chLocal - '0');\n        chLocal = charAt(bp + (offset++));\n    }\n\n    boolean small = (chLocal == '.');\n    if (small) {\n        chLocal = charAt(bp + (offset++));\n        while (chLocal >= '0' && chLocal <= '9') {\n            intVal = intVal * 10 + (chLocal - '0');\n            power *= 10;\n            chLocal = charAt(bp + (offset++));\n        }\n    }\n\n    boolean exp = chLocal == 'e' || chLocal == 'E';\n    if (exp) {\n        chLocal = charAt(bp + (offset++));\n        if (chLocal == '+' || chLocal == '-') {\n            chLocal = charAt(bp + (offset++));\n        }\n        while (chLocal >= '0' && chLocal <= '9') {\n            chLocal = charAt(bp + (offset++));\n        }\n    }\n\n    int start, count;\n    if (quote) {\n        if (chLocal != '\"') {\n            matchStat = NOT_MATCH;\n            return 0;\n        } else {\n            chLocal = charAt(bp + (offset++));\n        }\n        start = bp + fieldName.length + 1;\n        count = bp + offset - start - 2;\n    } else {\n        start = bp + fieldName.length;\n        count = bp + offset - start - 1;\n    }\n\n    if (!exp && count < 20) {\n        value = ((float) intVal) / power;\n        if (negative) {\n            value = -value;\n        }\n    } else {\n        String text = this.subString(start, count);\n        try {\n            value = Float.parseFloat(text);\n        } catch (NumberFormatException e) {\n            matchStat = NOT_MATCH;\n            return 0;\n        }\n    }\n\n    if (chLocal == ',') {\n        bp += offset;\n        this.ch = this.charAt(bp);\n        matchStat = VALUE;\n        token = JSONToken.COMMA;\n        return value;\n    }\n\n    if (chLocal == '}') {\n        chLocal = charAt(bp + (offset++));\n        if (chLocal == ',') {\n            token = JSONToken.COMMA;\n            bp += offset;\n            this.ch = this.charAt(bp);\n        } else if (chLocal == ']') {\n            token = JSONToken.RBRACKET;\n            bp += offset;\n            this.ch = this.charAt(bp);\n        } else if (chLocal == '}') {\n            token = JSONToken.RBRACE;\n            bp += offset;\n            this.ch = this.charAt(bp);\n        } else if (chLocal == EOI) {\n            bp += (offset - 1);\n            token = JSONToken.EOF;\n            ch = EOI;\n        } else {\n            matchStat = NOT_MATCH;\n            return 0;\n        }\n        matchStat = END;\n    } else {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    return value;\n}",
        "patched_method_loc": [
            2388,
            2507
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.issue_1700.Issue1723#test_for_issue: junit.framework.AssertionFailedError: expected:<0.9390308> but was:<-1.1075817>"
        ],
        "validation_time": 50.353349447250366
    },
    {
        "patch": "public final float scanFieldFloat(char[] fieldName) {\n    matchStat = UNKNOWN;\n\n    if (!charArrayCompare(fieldName)) {\n        matchStat = NOT_MATCH_NAME;\n        return 0;\n    }\n\n    int offset = fieldName.length;\n    char chLocal = charAt(bp + offset++);\n\n    final boolean quote = chLocal == '\"';\n    if (quote) {\n        chLocal = charAt(bp + offset++);\n    }\n\n    boolean negative = chLocal == '-';\n    if (negative) {\n        chLocal = charAt(bp + offset++);\n    }\n\n    float value = 0;\n\n    // Parse integer part\n    if (chLocal >= '0' && chLocal <= '9') {\n        int intVal = chLocal - '0';\n        while (true) {\n            chLocal = charAt(bp + offset++);\n            if (chLocal >= '0' && chLocal <= '9') {\n                intVal = intVal * 10 + (chLocal - '0');\n            } else {\n                break;\n            }\n        }\n\n        // Parse decimal part\n        if (chLocal == '.') {\n            float decimal = 0;\n            float decimalPower = 0.1f;\n            while (true) {\n                chLocal = charAt(bp + offset++);\n                if (chLocal >= '0' && chLocal <= '9') {\n                    decimal += (chLocal - '0') * decimalPower;\n                    decimalPower *= 0.1f;\n                } else {\n                    break;\n                }\n            }\n            value = intVal + decimal;\n        } else {\n            value = intVal;\n        }\n\n        // Parse exponent part\n        if (chLocal == 'e' || chLocal == 'E') {\n            int expSign = 1;\n            chLocal = charAt(bp + offset++);\n            if (chLocal == '+' || chLocal == '-') {\n                expSign = (chLocal == '+') ? 1 : -1;\n                chLocal = charAt(bp + offset++);\n            }\n            int expVal = 0;\n            while (chLocal >= '0' && chLocal <= '9') {\n                expVal = expVal * 10 + (chLocal - '0');\n                chLocal = charAt(bp + offset++);\n            }\n            value *= Math.pow(10, expSign * expVal);\n        }\n    } else if (chLocal == 'n' && charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n        matchStat = VALUE_NULL;\n        offset += 3;\n    } else {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    if (quote) {\n        if (chLocal != '\"') {\n            matchStat = NOT_MATCH;\n            return 0;\n        }\n        offset++;\n    }\n\n    // Check for end of object or array\n    if (chLocal == ',' || chLocal == '}' || chLocal == ']') {\n        bp += offset - 1;\n        this.ch = charAt(bp);\n        matchStat = END;\n    } else {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    return negative ? -value : value;\n}",
        "patched_method_loc": [
            2388,
            2484
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.PublicFieldFloatTest#test_codec: com.alibaba.fastjson.JSONException: : not close json text, token : {",
            "com.alibaba.json.bvt.FloatFieldTest#test_codec: com.alibaba.fastjson.JSONException: : not close json text, token : {",
            "com.alibaba.json.bvt.TypeUtilstTest#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, pos 179, fastjson-version 1.2.46",
            "com.alibaba.json.bvt.parser.deser.asm.TestASM_float#test_asm: com.alibaba.fastjson.JSONException: : not close json text, token : {",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : {",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_3: com.alibaba.fastjson.JSONException: : not close json text, token : {",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_4: com.alibaba.fastjson.JSONException: : not close json text, token : {",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_error_1: com.alibaba.fastjson.JSONException: : not close json text, token : {",
            "com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float_obj#test_create: com.alibaba.fastjson.JSONException: : not close json text, token : {",
            "com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float_obj#test_create_2: java.lang.AssertionError: expected:<菜姐> but was:<null>",
            "com.alibaba.json.bvt.parser.taobao.FloatObjectFieldTest#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : {",
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float_infinity: com.alibaba.fastjson.JSONException: : not close json text, token : {",
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float: com.alibaba.fastjson.JSONException: : not close json text, token : {",
            "com.alibaba.json.bvt.bug.Bug_for_Johnny#test_bug: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float#test_create: com.alibaba.fastjson.JSONException: : not close json text, token : {",
            "com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float#test_create_2: java.lang.AssertionError: expected:<菜姐> but was:<null>",
            "com.alibaba.json.bvt.FloatFieldTest_A#test_codec: com.alibaba.fastjson.JSONException: : not close json text, token : {",
            "com.alibaba.json.bvt.basicType.FloatTest2_obj#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : {",
            "com.alibaba.json.bvt.basicType.FloatTest#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : {"
        ],
        "validation_time": 47.937994956970215
    },
    {
        "patch": "public final float scanFieldFloat(char[] fieldName) {\n    matchStat = UNKNOWN;\n\n    if (!charArrayCompare(fieldName)) {\n        matchStat = NOT_MATCH_NAME;\n        return 0;\n    }\n\n    int offset = fieldName.length;\n    char chLocal = charAt(bp + (offset++));\n\n    final boolean quote = chLocal == '\"';\n    if (quote) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    boolean negative = chLocal == '-';\n    if (negative) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    StringBuilder numberBuilder = new StringBuilder();\n    numberBuilder.append(negative ? '-' : \"\");\n    boolean decimalPointFound = false;\n\n    while (chLocal >= '0' && chLocal <= '9' || (!decimalPointFound && chLocal == '.')) {\n        numberBuilder.append(chLocal);\n        chLocal = charAt(bp + (offset++));\n        if (chLocal == '.') {\n            decimalPointFound = true;\n        }\n    }\n\n    try {\n        float value = Float.parseFloat(numberBuilder.toString());\n        matchStat = VALUE;\n        return value;\n    } catch (NumberFormatException e) {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n}",
        "patched_method_loc": [
            2388,
            2430
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float_obj#test_create_2: com.alibaba.fastjson.JSONException: : setter not found, class com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float_obj$Entity, property id",
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float_infinity: junit.framework.AssertionFailedError: expected:<Infinity> but was:<6.0>",
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float: junit.framework.AssertionFailedError: expected:<3.4028235E38> but was:<3.0>",
            "com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float#test_create_2: com.alibaba.fastjson.JSONException: : setter not found, class com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float$Entity, property id",
            "com.alibaba.json.bvt.issue_1700.Issue1723#test_for_issue: junit.framework.AssertionFailedError: expected:<0.9390308> but was:<0.0>",
            "com.alibaba.json.bvt.basicType.FloatTest2_obj#test_0: junit.framework.AssertionFailedError: expected:<-0.012671709> but was:<-0.0>",
            "com.alibaba.json.bvt.basicType.FloatTest#test_0: junit.framework.AssertionFailedError: expected:<-0.012671709> but was:<-0.0>"
        ],
        "validation_time": 48.6148202419281
    },
    {
        "patch": "public final float scanFieldFloat(char[] fieldName) {\n    matchStat = UNKNOWN;\n\n    if (!charArrayCompare(fieldName)) {\n        matchStat = NOT_MATCH_NAME;\n        return 0;\n    }\n\n    int offset = fieldName.length;\n    char chLocal = charAt(bp + offset);\n\n    final boolean quote = chLocal == '\"';\n    if (quote) {\n        chLocal = charAt(bp + ++offset);\n    }\n\n    boolean negative = chLocal == '-';\n    if (negative) {\n        chLocal = charAt(bp + ++offset);\n    }\n\n    float value = 0.0f;\n    int intVal = 0;\n\n    if (chLocal >= '0' && chLocal <= '9') {\n        intVal = chLocal - '0';\n        for (;;) {\n            chLocal = charAt(bp + ++offset);\n            if (chLocal >= '0' && chLocal <= '9') {\n                intVal = intVal * 10 + (chLocal - '0');\n            } else {\n                break;\n            }\n        }\n\n        float power = 1.0f;\n        boolean hasDecimal = (chLocal == '.');\n        if (hasDecimal) {\n            chLocal = charAt(bp + ++offset);\n            if (chLocal >= '0' && chLocal <= '9') {\n                intVal = intVal * 10 + (chLocal - '0');\n                power = 10.0f;\n                for (;;) {\n                    chLocal = charAt(bp + ++offset);\n                    if (chLocal >= '0' && chLocal <= '9') {\n                        intVal = intVal * 10 + (chLocal - '0');\n                        power *= 10.0f;\n                    } else {\n                        break;\n                    }\n                }\n            } else {\n                matchStat = NOT_MATCH;\n                return 0;\n            }\n        }\n\n        boolean hasExponent = chLocal == 'e' || chLocal == 'E';\n        if (hasExponent) {\n            chLocal = charAt(bp + ++offset);\n            if (chLocal == '+' || chLocal == '-') {\n                chLocal = charAt(bp + ++offset);\n            }\n            for (;;) {\n                if (chLocal >= '0' && chLocal <= '9') {\n                    chLocal = charAt(bp + ++offset);\n                } else {\n                    break;\n                }\n            }\n        }\n\n        int start, count;\n        if (quote) {\n            if (chLocal != '\"') {\n                matchStat = NOT_MATCH;\n                return 0;\n            } else {\n                chLocal = charAt(bp + ++offset);\n            }\n            start = bp + fieldName.length + 1;\n            count = bp + offset - start - 2;\n        } else {\n            start = bp + fieldName.length;\n            count = bp + offset - start - 1;\n        }\n\n        if (!hasExponent && count < 20) {\n            value = ((float) intVal) / power;\n            if (negative) {\n                value = -value;\n            }\n        } else {\n            String text = this.subString(start, count);\n            value = Float.parseFloat(text);\n        }\n    } else if (chLocal == 'n' && charAt(bp + offset + 1) == 'u' && charAt(bp + offset + 2) == 'l' && charAt(bp + offset + 3) == 'l') {\n        matchStat = VALUE_NULL;\n        value = 0;\n        offset += 4;\n        chLocal = charAt(bp + offset);\n\n        if (quote && chLocal == '\"') {\n            chLocal = charAt(bp + ++offset);\n        }\n\n        while (chLocal != ',' && chLocal != '}' && !isWhitespace(chLocal)) {\n            chLocal = charAt(bp + ++offset);\n        }\n\n        if (chLocal == ',') {\n            bp += offset;\n            this.ch = charAt(bp);\n            matchStat = VALUE_NULL;\n            return value;\n        } else if (chLocal == '}') {\n            bp += offset;\n            this.ch = charAt(bp);\n            matchStat = VALUE_NULL;\n            return value;\n        } else {\n            matchStat = NOT_MATCH;\n            return 0;\n        }\n    } else {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    if (chLocal == ',') {\n        bp += offset;\n        this.ch = this.charAt(bp);\n        matchStat = VALUE;\n        return value;\n    }\n\n    if (chLocal == '}') {\n        chLocal = charAt(bp + ++offset);\n        if (chLocal == ',') {\n            bp += offset;\n            this.ch = this.charAt(bp);\n        } else if (chLocal == ']') {\n            bp += offset;\n            this.ch = this.charAt(bp);\n        } else if (chLocal == '}') {\n            bp += offset;\n            this.ch = this.charAt(bp);\n        } else if (chLocal == EOI) {\n            bp += (offset - 1);\n            ch = EOI;\n        } else {\n            matchStat = NOT_MATCH;\n            return 0;\n        }\n        matchStat = END;\n    } else {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    return value;\n}",
        "patched_method_loc": [
            2388,
            2550
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.PublicFieldFloatTest#test_codec: com.alibaba.fastjson.JSONException: : not close json text, token : {",
            "com.alibaba.json.bvt.FloatFieldTest#test_codec: com.alibaba.fastjson.JSONException: : not close json text, token : {",
            "com.alibaba.json.bvt.parser.JSONReaderScannerTest__entity_float#test_scanFloat: com.alibaba.fastjson.JSONException: : illegal identifier : {",
            "com.alibaba.json.bvt.parser.deser.asm.TestASM_float#test_asm: com.alibaba.fastjson.JSONException: : not close json text, token : {",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : {",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : {",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_3: com.alibaba.fastjson.JSONException: : not close json text, token : {",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_error_1: com.alibaba.fastjson.JSONException: : not close json text, token : {",
            "com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float_obj#test_create_2: com.alibaba.fastjson.JSONException: : setter not found, class com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float_obj$Entity, property null",
            "com.alibaba.json.bvt.parser.taobao.FloatObjectFieldTest#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : {",
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float_infinity: com.alibaba.fastjson.JSONException: : not close json text, token : {",
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float: com.alibaba.fastjson.JSONException: : not close json text, token : {",
            "com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float#test_create_2: com.alibaba.fastjson.JSONException: : setter not found, class com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float$Entity, property null",
            "com.alibaba.json.bvt.issue_1700.Issue1723#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : {",
            "com.alibaba.json.bvt.FloatFieldTest_A#test_codec: com.alibaba.fastjson.JSONException: : not close json text, token : {"
        ],
        "validation_time": 50.28388237953186
    },
    {
        "patch": "public final float scanFieldFloat(char[] fieldName) {\n    matchStat = UNKNOWN;\n\n    if (!charArrayCompare(fieldName)) {\n        matchStat = NOT_MATCH_NAME;\n        return 0;\n    }\n\n    int offset = fieldName.length;\n    char chLocal = charAt(bp + (offset++));\n\n    final boolean quote = chLocal == '\"';\n    if (quote) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    boolean negative = chLocal == '-';\n    if (negative) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    float value;\n    if (chLocal >= '0' && chLocal <= '9') {\n        int intVal = chLocal - '0';\n        for (;;) {\n            chLocal = charAt(bp + (offset++));\n            if (chLocal >= '0' && chLocal <= '9') {\n                intVal = intVal * 10 + (chLocal - '0');\n                continue;\n            } else {\n                break;\n            }\n        }\n\n        float fraction = 0.0f;\n        if (chLocal == '.') {\n            float decimal = 0.1f;\n            chLocal = charAt(bp + (offset++));\n            while (chLocal >= '0' && chLocal <= '9') {\n                fraction += (chLocal - '0') * decimal;\n                decimal /= 10.0f;\n                chLocal = charAt(bp + (offset++));\n            }\n        }\n\n        value = intVal + fraction;\n\n        if (negative) {\n            value = -value;\n        }\n    } else if (chLocal == 'n' && charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n        matchStat = VALUE_NULL;\n        value = 0;\n        offset += 3;\n    } else {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    if (quote) {\n        if (chLocal != '\"') {\n            matchStat = NOT_MATCH;\n            return 0;\n        } else {\n            chLocal = charAt(bp + (offset++));\n        }\n    }\n\n    while (chLocal != ',' && chLocal != '}' && !isWhitespace(chLocal)) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    if (chLocal == ',') {\n        bp += offset;\n        this.ch = this.charAt(bp);\n        matchStat = VALUE;\n        token = JSONToken.COMMA;\n    } else if (chLocal == '}') {\n        token = JSONToken.RBRACE;\n        bp += offset;\n        this.ch = this.charAt(bp);\n    } else {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    return value;\n}",
        "patched_method_loc": [
            2388,
            2476
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float_infinity: junit.framework.AssertionFailedError: expected:<Infinity> but was:<0.0>",
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float: junit.framework.AssertionFailedError: expected:<3.4028235E38> but was:<0.0>",
            "com.alibaba.json.bvt.parser.deser.FieldDeserializerTest6#test_0: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 10, json : {\"id\":33L}",
            "com.alibaba.json.bvt.issue_1700.Issue1723#test_for_issue: junit.framework.AssertionFailedError: expected:<0.9390308> but was:<0.0>",
            "com.alibaba.json.bvt.FloatFieldTest_A#test_codec: java.lang.AssertionError: expected:<null> but was:<1001.0>",
            "com.alibaba.json.bvt.basicType.FloatTest2_obj#test_0: junit.framework.AssertionFailedError: expected:<-0.012671709> but was:<-0.01267171>",
            "com.alibaba.json.bvt.basicType.FloatTest#test_0: junit.framework.AssertionFailedError: expected:<-0.012671709> but was:<-0.01267171>",
            "com.alibaba.json.bvt.basicType.FloatNullTest#test_null: junit.framework.AssertionFailedError: Expected : <null> but was: 0.0"
        ],
        "validation_time": 53.97058892250061
    },
    {
        "patch": "public final float scanFieldFloat(char[] fieldName) {\n    matchStat = UNKNOWN;\n\n    if (!charArrayCompare(fieldName)) {\n        matchStat = NOT_MATCH_NAME;\n        return 0;\n    }\n\n    int offset = fieldName.length;\n    char chLocal = charAt(bp + (offset++));\n\n    final boolean quote = chLocal == '\"';\n    if (quote) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    boolean negative = chLocal == '-';\n    if (negative) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    float value;\n    if (chLocal >= '0' && chLocal <= '9') {\n        int intVal = chLocal - '0';\n        for (;;) {\n            chLocal = charAt(bp + (offset++));\n            if (chLocal >= '0' && chLocal <= '9') {\n                intVal = intVal * 10 + (chLocal - '0');\n            } else {\n                break;\n            }\n        }\n\n        float power = 1;\n        boolean small = (chLocal == '.');\n        if (small) {\n            chLocal = charAt(bp + (offset++));\n            if (chLocal >= '0' && chLocal <= '9') {\n                intVal = intVal * 10 + (chLocal - '0');\n                power = 10;\n                for (;;) {\n                    chLocal = charAt(bp + (offset++));\n                    if (chLocal >= '0' && chLocal <= '9') {\n                        intVal = intVal * 10 + (chLocal - '0');\n                        power *= 10;\n                    } else {\n                        break;\n                    }\n                }\n            } else {\n                matchStat = NOT_MATCH;\n                return 0;\n            }\n        }\n\n        boolean exp = chLocal == 'e' || chLocal == 'E';\n        if (exp) {\n            chLocal = charAt(bp + (offset++));\n            if (chLocal == '+' || chLocal == '-') {\n                chLocal = charAt(bp + (offset++));\n            }\n            for (;;) {\n                if (chLocal >= '0' && chLocal <= '9') {\n                    chLocal = charAt(bp + (offset++));\n                } else {\n                    break;\n                }\n            }\n        }\n\n        int start, count;\n        if (quote) {\n            if (chLocal != '\"') {\n                matchStat = NOT_MATCH;\n                return 0;\n            } else {\n                chLocal = charAt(bp + (offset++));\n            }\n            start = bp + fieldName.length + 1;\n            count = bp + offset - start - 2;\n        } else {\n            start = bp + fieldName.length;\n            count = bp + offset - start - 1;\n        }\n\n        if (!exp && count < 20) {\n            value = ((float) intVal) / power;\n            if (negative) {\n                value = -value;\n            }\n        } else {\n            String text = this.subString(start, count);\n            value = Float.parseFloat(text);\n        }\n    } else if (chLocal == 'n' && charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n        matchStat = VALUE_NULL;\n        value = 0;\n        offset += 3;\n        chLocal = charAt(bp + offset++);\n\n        if (quote && chLocal == '\"') {\n            chLocal = charAt(bp + offset++);\n        }\n\n        while (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + offset++);\n        }\n\n        if (chLocal == ',') {\n            bp += offset;\n            this.ch = charAt(bp);\n            matchStat = VALUE_NULL;\n            token = JSONToken.COMMA;\n            return value;\n        } else if (chLocal == '}') {\n            bp += offset;\n            this.ch = charAt(bp);\n            matchStat = VALUE_NULL;\n            token = JSONToken.RBRACE;\n            return value;\n        } else {\n            matchStat = NOT_MATCH;\n            return 0;\n        }\n    } else {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    if (chLocal == ',') {\n        bp += offset;\n        this.ch = this.charAt(bp);\n        matchStat = VALUE;\n        token = JSONToken.COMMA;\n        return value;\n    }\n\n    if (chLocal == '}') {\n        chLocal = charAt(bp + (offset++));\n        if (chLocal == ',') {\n            token = JSONToken.COMMA;\n            bp += offset;\n            this.ch = this.charAt(bp);\n        } else if (chLocal == ']') {\n            token = JSONToken.RBRACKET;\n            bp += offset;\n            this.ch = this.charAt(bp);\n        } else if (chLocal == '}') {\n            token = JSONToken.RBRACE;\n            bp += offset;\n            this.ch = this.charAt(bp);\n        } else if (chLocal == EOI) {\n            bp += (offset - 1);\n            token = JSONToken.EOF;\n            ch = EOI;\n        } else {\n            matchStat = NOT_MATCH;\n            return 0;\n        }\n        matchStat = END;\n    } else {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    return value;\n}",
        "patched_method_loc": [
            2388,
            2555
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.issue_1700.Issue1723#test_for_issue: junit.framework.AssertionFailedError: expected:<0.9390308> but was:<-2.0766265E-7>"
        ],
        "validation_time": 50.39937472343445
    },
    {
        "patch": "public final float scanFieldFloat(char[] fieldName) {\n    matchStat = UNKNOWN;\n\n    if (!charArrayCompare(fieldName)) {\n        matchStat = NOT_MATCH_NAME;\n        return 0;\n    }\n\n    int offset = fieldName.length;\n    char chLocal = charAt(bp + (offset++));\n\n    final boolean quote = chLocal == '\"';\n    if (quote) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    boolean negative = chLocal == '-';\n    if (negative) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    float value;\n    if (chLocal >= '0' && chLocal <= '9') {\n        int intVal = chLocal - '0';\n        for (;;) {\n            chLocal = charAt(bp + (offset++));\n            if (chLocal >= '0' && chLocal <= '9') {\n                intVal = intVal * 10 + (chLocal - '0');\n            } else {\n                break;\n            }\n        }\n\n        int power = 1;\n        boolean small = (chLocal == '.');\n        if (small) {\n            chLocal = charAt(bp + (offset++));\n            if (chLocal >= '0' && chLocal <= '9') {\n                intVal = intVal * 10 + (chLocal - '0');\n                power = 10;\n                for (;;) {\n                    chLocal = charAt(bp + (offset++));\n                    if (chLocal >= '0' && chLocal <= '9') {\n                        intVal = intVal * 10 + (chLocal - '0');\n                        power *= 10;\n                    } else {\n                        break;\n                    }\n                }\n            } else {\n                matchStat = NOT_MATCH;\n                return 0;\n            }\n        }\n\n        boolean exp = chLocal == 'e' || chLocal == 'E';\n        if (exp) {\n            chLocal = charAt(bp + (offset++));\n            if (chLocal == '+' || chLocal == '-') {\n                chLocal = charAt(bp + (offset++));\n            }\n            for (;;) {\n                if (chLocal >= '0' && chLocal <= '9') {\n                    chLocal = charAt(bp + (offset++));\n                } else {\n                    break;\n                }\n            }\n        }\n\n        int start, count;\n        if (quote) {\n            if (chLocal != '\"') {\n                matchStat = NOT_MATCH;\n                return 0;\n            } else {\n                chLocal = charAt(bp + (offset++));\n            }\n            start = bp + fieldName.length + 1;\n            count = bp + offset - start - 2;\n        } else {\n            start = bp + fieldName.length;\n            count = bp + offset - start - 1;\n        }\n\n        if (!exp && count < 20) {\n            value = ((float) intVal) / power;\n            if (negative) {\n                value = -value;\n            }\n        } else {\n            String text = this.subString(start, count);\n            try {\n                value = Float.parseFloat(text);\n            } catch (NumberFormatException e) {\n                matchStat = NOT_MATCH;\n                return 0;\n            }\n        }\n    } else if (chLocal == 'n' && charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n        matchStat = VALUE_NULL;\n        value = 0;\n        offset += 3;\n        chLocal = charAt(bp + offset++);\n\n        if (quote && chLocal == '\"') {\n            chLocal = charAt(bp + offset++);\n        }\n\n        for (;;) {\n            if (chLocal == ',') {\n                bp += offset;\n                this.ch = charAt(bp);\n                matchStat = VALUE_NULL;\n                token = JSONToken.COMMA;\n                return value;\n            } else if (chLocal == '}') {\n                bp += offset;\n                this.ch = charAt(bp);\n                matchStat = VALUE_NULL;\n                token = JSONToken.RBRACE;\n                return value;\n            } else if (isWhitespace(chLocal)) {\n                chLocal = charAt(bp + offset++);\n                continue;\n            }\n            break;\n        }\n        matchStat = NOT_MATCH;\n        return 0;\n    } else {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    if (chLocal == ',') {\n        bp += offset;\n        this.ch = this.charAt(bp);\n        matchStat = VALUE;\n        token = JSONToken.COMMA;\n        return value;\n    }\n\n    if (chLocal == '}') {\n        chLocal = charAt(bp + (offset++));\n        if (chLocal == ',') {\n            token = JSONToken.COMMA;\n            bp += offset;\n            this.ch = this.charAt(bp);\n        } else if (chLocal == ']') {\n            token = JSONToken.RBRACKET;\n            bp += offset;\n            this.ch = this.charAt(bp);\n        } else if (chLocal == '}') {\n            token = JSONToken.RBRACE;\n            bp += offset;\n            this.ch = this.charAt(bp);\n        } else if (chLocal == EOI) {\n            bp += (offset - 1);\n            token = JSONToken.EOF;\n            ch = EOI;\n        } else {\n            matchStat = NOT_MATCH;\n            return 0;\n        }\n        matchStat = END;\n    } else {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    return value;\n}",
        "patched_method_loc": [
            2388,
            2561
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.issue_1700.Issue1723#test_for_issue: junit.framework.AssertionFailedError: expected:<0.9390308> but was:<-1.1075817>"
        ],
        "validation_time": 48.34972882270813
    },
    {
        "patch": "public final float scanFieldFloat(char[] fieldName) {\n    matchStat = UNKNOWN;\n\n    if (!charArrayCompare(fieldName)) {\n        matchStat = NOT_MATCH_NAME;\n        return 0;\n    }\n\n    int offset = fieldName.length;\n    char chLocal = charAt(bp + offset);\n\n    final boolean quote = (chLocal == '\"');\n    if (quote) {\n        chLocal = charAt(bp + (++offset));\n    }\n\n    boolean negative = (chLocal == '-');\n    if (negative) {\n        chLocal = charAt(bp + (++offset));\n    }\n\n    int intVal = 0;\n    float value = 0.0f;\n    \n    if (chLocal >= '0' && chLocal <= '9') {\n        intVal = chLocal - '0';\n        for (;;) {\n            chLocal = charAt(bp + (++offset));\n            if (chLocal >= '0' && chLocal <= '9') {\n                intVal = intVal * 10 + (chLocal - '0');\n            } else {\n                break;\n            }\n        }\n\n        boolean hasFraction = false;\n        float fraction = 0.0f;\n        int power = 1;\n\n        if (chLocal == '.') {\n            hasFraction = true;\n            chLocal = charAt(bp + (++offset));\n            if (chLocal >= '0' && chLocal <= '9') {\n                fraction = (chLocal - '0') * 0.1f;\n                power = 10;\n                for (;;) {\n                    chLocal = charAt(bp + (++offset));\n                    if (chLocal >= '0' && chLocal <= '9') {\n                        fraction += (chLocal - '0') * (0.1f / power);\n                        power *= 10;\n                    } else {\n                        break;\n                    }\n                }\n            } else {\n                matchStat = NOT_MATCH;\n                return 0;\n            }\n        }\n\n        if (hasFraction) {\n            value = intVal + fraction;\n        } else {\n            value = intVal;\n        }\n\n        if (negative) {\n            value = -value;\n        }\n    } else if (chLocal == 'n' && charAt(bp + offset + 1) == 'u' && charAt(bp + offset + 2) == 'l' && charAt(bp + offset + 3) == 'l') {\n        matchStat = VALUE_NULL;\n        value = 0;\n        offset += 4;\n    } else {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    if (quote) {\n        chLocal = charAt(bp + (++offset));\n    }\n\n    if (chLocal == ',') {\n        bp += offset;\n        this.ch = charAt(bp);\n        matchStat = VALUE;\n        token = JSONToken.COMMA;\n    } else if (chLocal == '}') {\n        bp += offset;\n        this.ch = charAt(bp);\n        matchStat = VALUE;\n        token = JSONToken.RBRACE;\n    } else {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    return value;\n}",
        "patched_method_loc": [
            2388,
            2487
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.PublicFieldFloatTest#test_codec: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.FloatFieldTest#test_codec: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.deser.asm.TestASM_float#test_asm: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_3: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_error_1: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float_obj#test_create_2: com.alibaba.fastjson.JSONException: : setter not found, class com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float_obj$Entity, property null",
            "com.alibaba.json.bvt.parser.taobao.FloatObjectFieldTest#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float_infinity: com.alibaba.fastjson.JSONException: : parseLong error, field : v",
            "com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float#test_create_2: com.alibaba.fastjson.JSONException: : setter not found, class com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float$Entity, property null",
            "com.alibaba.json.bvt.issue_1700.Issue1723#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.FloatFieldTest_A#test_codec: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.basicType.FloatTest2_obj#test_0: junit.framework.AssertionFailedError: expected:<-0.012671709> but was:<-0.01267171>",
            "com.alibaba.json.bvt.basicType.FloatTest#test_0: junit.framework.AssertionFailedError: expected:<-0.012671709> but was:<-0.01267171>",
            "com.alibaba.json.bvt.basicType.FloatNullTest#test_null_quote: junit.framework.AssertionFailedError: Expected : <null> but was: 0.0",
            "com.alibaba.json.bvt.bug.Bug_for_primitive_float#test_strNull: com.alibaba.fastjson.JSONException: : not close json text, token : }"
        ],
        "validation_time": 48.04721117019653
    },
    {
        "patch": "public final float scanFieldFloat(char[] fieldName) {\n    matchStat = UNKNOWN;\n\n    if (!charArrayCompare(fieldName)) {\n        matchStat = NOT_MATCH_NAME;\n        return 0;\n    }\n\n    int offset = fieldName.length;\n    char chLocal = charAt(bp + (offset++));\n\n    final boolean quote = chLocal == '\"';\n    if (quote) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    boolean negative = chLocal == '-';\n    if (negative) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    float value;\n    if (chLocal >= '0' && chLocal <= '9') {\n        int intVal = chLocal - '0';\n        for (;;) {\n            chLocal = charAt(bp + (offset++));\n            if (chLocal >= '0' && chLocal <= '9') {\n                intVal = intVal * 10 + (chLocal - '0');\n            } else {\n                break;\n            }\n        }\n\n        if (chLocal == '.') {\n            float decimal = 0.1f;\n            chLocal = charAt(bp + (offset++));\n            while (chLocal >= '0' && chLocal <= '9') {\n                intVal = intVal * 10 + (chLocal - '0');\n                decimal *= 0.1f;\n                chLocal = charAt(bp + (offset++));\n            }\n            value = negative ? -intVal * decimal : intVal * decimal;\n        } else {\n            value = negative ? -intVal : intVal;\n        }\n    } else if (chLocal == 'n' && charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n        matchStat = VALUE_NULL;\n        value = 0;\n        offset += 3;\n    } else {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    if (quote) {\n        if (chLocal != '\"') {\n            matchStat = NOT_MATCH;\n            return 0;\n        } else {\n            chLocal = charAt(bp + (offset++));\n        }\n    }\n\n    while (chLocal != ',' && chLocal != '}' && !isWhitespace(chLocal)) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    bp += offset;\n    this.ch = charAt(bp);\n\n    matchStat = VALUE;\n    return value;\n}",
        "patched_method_loc": [
            2388,
            2461
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.PublicFieldFloatTest#test_codec: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 12, json : {\"id\":123.4}",
            "com.alibaba.json.bvt.FloatFieldTest#test_codec: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 16, json : {\"value\":1001.0}",
            "com.alibaba.json.bvt.parser.JSONReaderScannerTest__entity_float#test_scanFloat: com.alibaba.fastjson.JSONException: : illegal identifier : {",
            "com.alibaba.json.bvt.parser.deser.asm.TestASM_float#test_asm: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 14, json : {\"value\":32.5}",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_0: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 13, json : {\"value\":1.0}",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_1: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 13, json : {\"value\":\"1\"}",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_3: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 14, json : {\"value\":1.01}",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_4: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 12, json : {\"value\":1.}",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_error_1: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 31, json : {\"value\":922337203685477580723}",
            "com.alibaba.json.bvt.parser.taobao.FloatObjectFieldTest#test_0: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 14, json : {\"value\":1001}",
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float_infinity: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 26, json : {\"v\":6.805646932770577E38}",
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 27, json : {\"v\":3.4028234663852886E38}",
            "com.alibaba.json.bvt.parser.deser.FieldDeserializerTest6#test_0: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 10, json : {\"id\":33L}",
            "com.alibaba.json.bvt.issue_1700.Issue1723#test_for_issue: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 28, json : {\"age\":\"0.9390308260917664\"}",
            "com.alibaba.json.bvt.FloatFieldTest_A#test_codec_null: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 14, json : {\"value\":null}",
            "com.alibaba.json.bvt.FloatFieldTest_A#test_codec: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 16, json : {\"value\":1001.0}",
            "com.alibaba.json.bvt.basicType.FloatTest2_obj#test_0: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 81, json : {\"v1\":-0.012671709,\"v2\":0.6042485,\"v3\":0.13231707,\"v4\":0.80090785,\"v5\":0.6192943}",
            "com.alibaba.json.bvt.basicType.FloatTest#test_0: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 81, json : {\"v1\":-0.012671709,\"v2\":0.6042485,\"v3\":0.13231707,\"v4\":0.80090785,\"v5\":0.6192943}",
            "com.alibaba.json.bvt.basicType.FloatNullTest#test_null: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 21, json : {\"v1\":null,\"v2\":null}",
            "com.alibaba.json.bvt.basicType.FloatNullTest#test_null_1: junit.framework.AssertionFailedError: Expected : <null> but was: 0.0",
            "com.alibaba.json.bvt.bug.Bug_for_primitive_float#test_null: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 14, json : {\"value\":null}",
            "com.alibaba.json.bvt.basicType.FloatNullTest_primitive#test_null: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 21, json : {\"v1\":null,\"v2\":null}",
            "com.alibaba.json.bvt.bug.Bug_for_issue_435#test_for_issue_Float: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 15, json : ﻿{\"value\":null}",
            "com.alibaba.json.bvt.bug.Bug_for_issue_435#test_for_issue: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 15, json : ﻿{\"value\":null}"
        ],
        "validation_time": 52.846869707107544
    },
    {
        "patch": "public final float scanFieldFloat(char[] fieldName) {\n    matchStat = UNKNOWN;\n\n    if (!charArrayCompare(fieldName)) {\n        matchStat = NOT_MATCH_NAME;\n        return 0;\n    }\n\n    int offset = fieldName.length;\n    char chLocal = charAt(bp + (offset++));\n\n    final boolean quote = chLocal == '\"';\n    if (quote) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    boolean negative = chLocal == '-';\n    if (negative) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    StringBuilder floatBuilder = new StringBuilder();\n\n    while (chLocal >= '0' && chLocal <= '9') {\n        floatBuilder.append(chLocal);\n        chLocal = charAt(bp + (offset++));\n    }\n\n    if (chLocal == '.') {\n        floatBuilder.append(chLocal);\n        chLocal = charAt(bp + (offset++));\n\n        while (chLocal >= '0' && chLocal <= '9') {\n            floatBuilder.append(chLocal);\n            chLocal = charAt(bp + (offset++));\n        }\n    }\n\n    if (chLocal == 'e' || chLocal == 'E') {\n        floatBuilder.append(chLocal);\n        chLocal = charAt(bp + (offset++));\n\n        if (chLocal == '+' || chLocal == '-') {\n            floatBuilder.append(chLocal);\n            chLocal = charAt(bp + (offset++));\n        }\n\n        while (chLocal >= '0' && chLocal <= '9') {\n            floatBuilder.append(chLocal);\n            chLocal = charAt(bp + (offset++));\n        }\n    }\n\n    int start, count;\n    if (quote) {\n        if (chLocal != '\"') {\n            matchStat = NOT_MATCH;\n            return 0;\n        } else {\n            chLocal = charAt(bp + (offset++));\n        }\n        start = bp + fieldName.length + 1;\n        count = bp + offset - start - 2;\n    } else {\n        start = bp + fieldName.length;\n        count = bp + offset - start - 1;\n    }\n\n    String floatStr = floatBuilder.toString();\n    float value = Float.parseFloat(floatStr);\n\n    if (negative) {\n        value = -value;\n    }\n\n    if (chLocal == ',') {\n        bp += offset;\n        this.ch = this.charAt(bp);\n        matchStat = VALUE;\n        token = JSONToken.COMMA;\n    } else if (chLocal == '}') {\n        token = JSONToken.RBRACE;\n        bp += offset;\n        this.ch = this.charAt(bp);\n    } else {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    matchStat = END;\n    return value;\n}",
        "patched_method_loc": [
            2388,
            2480
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.PublicFieldFloatTest#test_codec: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.FloatFieldTest#test_codec: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.TypeUtilstTest#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, pos 179, fastjson-version 1.2.46",
            "com.alibaba.json.bvt.parser.deser.asm.TestASM_float#test_asm: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_3: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_4: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_error_1: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float_obj#test_create: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float_obj#test_create_2: java.lang.AssertionError: expected:<菜姐> but was:<null>",
            "com.alibaba.json.bvt.parser.taobao.FloatObjectFieldTest#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float_infinity: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.bug.Bug_for_issue_479#test_for_issue_private: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.bug.Bug_for_issue_479#test_for_issue: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.bug.Bug_for_Johnny#test_bug: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float#test_create: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.parser.creator.JSONCreatorTest_float#test_create_2: java.lang.AssertionError: expected:<菜姐> but was:<null>",
            "com.alibaba.json.bvt.issue_1700.Issue1723#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.FloatFieldTest_A#test_codec_null: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.FloatFieldTest_A#test_codec: com.alibaba.fastjson.JSONException: : not close json text, token : }",
            "com.alibaba.json.bvt.basicType.FloatTest2_obj#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.basicType.FloatTest#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.basicType.FloatNullTest#test_null: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.basicType.FloatNullTest#test_null_1: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.bug.Bug_for_primitive_float#test_null: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.bug.Bug_for_primitive_float#test_emptyStr: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.basicType.FloatNullTest_primitive#test_null: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.basicType.FloatNullTest_primitive#test_null_1: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.bug.Bug_for_issue_435#test_for_issue_Float: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.bug.Bug_for_issue_435#test_for_issue: com.alibaba.fastjson.JSONException: : empty String"
        ],
        "validation_time": 48.04343318939209
    },
    {
        "patch": "public final float scanFieldFloat(char[] fieldName) {\n    matchStat = UNKNOWN;\n\n    if (!charArrayCompare(fieldName)) {\n        matchStat = NOT_MATCH_NAME;\n        return 0;\n    }\n\n    int offset = fieldName.length;\n    char chLocal = charAt(bp + (offset++));\n\n    final boolean quote = chLocal == '\"';\n    if (quote) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    boolean negative = chLocal == '-';\n    if (negative) {\n        chLocal = charAt(bp + (offset++));\n    }\n\n    StringBuilder numberBuilder = new StringBuilder();\n    boolean hasDecimal = false;\n\n    while (Character.isDigit(chLocal) || chLocal == '.') {\n        numberBuilder.append(chLocal);\n        if (chLocal == '.') {\n            hasDecimal = true;\n        }\n        chLocal = charAt(bp + (offset++));\n    }\n\n    float value;\n    if (hasDecimal) {\n        value = Float.parseFloat(numberBuilder.toString());\n    } else {\n        value = Float.valueOf(numberBuilder.toString());\n    }\n\n    if (negative) {\n        value = -value;\n    }\n\n    if (quote) {\n        if (chLocal != '\"') {\n            matchStat = NOT_MATCH;\n            return 0;\n        } else {\n            offset++;\n        }\n    }\n\n    bp += offset;\n    this.ch = charAt(bp);\n\n    matchStat = VALUE;\n    return value;\n}",
        "patched_method_loc": [
            2388,
            2446
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.PublicFieldFloatTest#test_codec: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 12, json : {\"id\":123.4}",
            "com.alibaba.json.bvt.FloatFieldTest#test_codec: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 16, json : {\"value\":1001.0}",
            "com.alibaba.json.bvt.parser.JSONReaderScannerTest__entity_float#test_scanFloat: com.alibaba.fastjson.JSONException: : illegal identifier : {",
            "com.alibaba.json.bvt.parser.deser.asm.TestASM_float#test_asm: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 14, json : {\"value\":32.5}",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_0: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 13, json : {\"value\":1.0}",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_1: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 13, json : {\"value\":\"1\"}",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_3: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 14, json : {\"value\":1.01}",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_4: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 12, json : {\"value\":1.}",
            "com.alibaba.json.bvt.parser.JSONScannerTest_scanFieldFloat#test_error_1: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 31, json : {\"value\":922337203685477580723}",
            "com.alibaba.json.bvt.parser.taobao.FloatObjectFieldTest#test_0: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 14, json : {\"value\":1001}",
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float_infinity: com.alibaba.fastjson.JSONException: : illegal identifier : 3pos 23, json : {\"v\":6.805646932770577E38}",
            "com.alibaba.json.bvt.issue_1400.Issue1424#test_for_issue_float: com.alibaba.fastjson.JSONException: : illegal identifier : 3pos 24, json : {\"v\":3.4028234663852886E38}",
            "com.alibaba.json.bvt.bug.Bug_for_issue_479#test_for_issue_private: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.bug.Bug_for_issue_479#test_for_issue: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.bug.Bug_for_Johnny#test_bug: com.alibaba.fastjson.JSONException: : illegal identifier : -pos 167, json : {\"@type\":\"com.alibaba.json.bvt.bug.Bug_for_Johnny$MyObject\",\"boolType\":true,\"byteType\":-128,\"charType\":\"\\u0000\",\"doubleType\":4.9E-324,\"enumType\":\"MD5\",\"floatType\":1.4E-45,\"intType\":-2147483648,\"listType\":[\"aaa\",\"bbb\"],\"longType\":-9223372036854775808,\"mapType\":{\"@type\":\"java.util.HashMap\",\"key\":\"value\"},\"setType\":Set[\"aaa\",\"bbb\"],\"shortType\":-32768,\"stringType\":\"aadf\"}",
            "com.alibaba.json.bvt.issue_1700.Issue1723#test_for_issue: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 28, json : {\"age\":\"0.9390308260917664\"}",
            "com.alibaba.json.bvt.FloatFieldTest_A#test_codec_null: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.FloatFieldTest_A#test_codec: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 16, json : {\"value\":1001.0}",
            "com.alibaba.json.bvt.basicType.FloatTest2_obj#test_0: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 81, json : {\"v1\":-0.012671709,\"v2\":0.6042485,\"v3\":0.13231707,\"v4\":0.80090785,\"v5\":0.6192943}",
            "com.alibaba.json.bvt.basicType.FloatTest#test_0: com.alibaba.fastjson.JSONException: : not match : - &amp#26;, info : pos 81, json : {\"v1\":-0.012671709,\"v2\":0.6042485,\"v3\":0.13231707,\"v4\":0.80090785,\"v5\":0.6192943}",
            "com.alibaba.json.bvt.basicType.FloatNullTest#test_null: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.basicType.FloatNullTest#test_null_1: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.basicType.FloatNullTest#test_null_1_quote: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.basicType.FloatNullTest#test_null_quote: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.bug.Bug_for_primitive_float#test_null: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.bug.Bug_for_primitive_float#test_emptyStr: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.bug.Bug_for_primitive_float#test_strNull: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.basicType.FloatNullTest_primitive#test_null: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.basicType.FloatNullTest_primitive#test_null_1: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.basicType.FloatNullTest_primitive#test_null_2: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.bug.Bug_for_issue_435#test_for_issue_Float: com.alibaba.fastjson.JSONException: : empty String",
            "com.alibaba.json.bvt.bug.Bug_for_issue_435#test_for_issue: com.alibaba.fastjson.JSONException: : empty String"
        ],
        "validation_time": 49.845890283584595
    },
    {
        "patch": "public final float scanFieldFloat(char[] fieldName) {\n    matchStat = UNKNOWN;\n\n    if (!charArrayCompare(fieldName)) {\n        matchStat = NOT_MATCH_NAME;\n        return 0;\n    }\n\n    int offset = fieldName.length;\n    char chLocal = charAt(bp + offset++);\n\n    final boolean quote = chLocal == '\"';\n    if (quote) {\n        chLocal = charAt(bp + offset++);\n    }\n\n    boolean negative = chLocal == '-';\n    if (negative) {\n        chLocal = charAt(bp + offset++);\n    }\n\n    float value;\n    if (chLocal >= '0' && chLocal <= '9') {\n        int intVal = chLocal - '0';\n        for (;;) {\n            chLocal = charAt(bp + offset++);\n            if (chLocal >= '0' && chLocal <= '9') {\n                intVal = intVal * 10 + (chLocal - '0');\n            } else {\n                break;\n            }\n        }\n\n        int power = 1;\n        boolean small = (chLocal == '.');\n        if (small) {\n            chLocal = charAt(bp + offset++);\n            if (chLocal >= '0' && chLocal <= '9') {\n                intVal = intVal * 10 + (chLocal - '0');\n                power = 10;\n                for (;;) {\n                    chLocal = charAt(bp + offset++);\n                    if (chLocal >= '0' && chLocal <= '9') {\n                        intVal = intVal * 10 + (chLocal - '0');\n                        power *= 10;\n                    } else {\n                        break;\n                    }\n                }\n            } else {\n                matchStat = NOT_MATCH;\n                return 0;\n            }\n        }\n\n        boolean exp = chLocal == 'e' || chLocal == 'E';\n        if (exp) {\n            chLocal = charAt(bp + offset++);\n            if (chLocal == '+' || chLocal == '-') {\n                chLocal = charAt(bp + offset++);\n            }\n            for (;;) {\n                if (chLocal >= '0' && chLocal <= '9') {\n                    chLocal = charAt(bp + offset++);\n                } else {\n                    break;\n                }\n            }\n        }\n\n        int start, count;\n        if (quote) {\n            if (chLocal != '\"') {\n                matchStat = NOT_MATCH;\n                return 0;\n            } else {\n                chLocal = charAt(bp + offset++);\n            }\n            start = bp + fieldName.length + 1;\n            count = bp + offset - start - 2;\n        } else {\n            start = bp + fieldName.length;\n            count = bp + offset - start - 1;\n        }\n\n        if (!exp && count < 20) {\n            value = ((float) intVal) / power;\n            if (negative) {\n                value = -value;\n            }\n        } else {\n            String text = this.subString(start, count);\n            value = Float.parseFloat(text);\n        }\n    } else if (chLocal == 'n' && charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n        matchStat = VALUE_NULL;\n        value = 0;\n        offset += 3;\n        chLocal = charAt(bp + offset++);\n\n        if (quote && chLocal == '\"') {\n            chLocal = charAt(bp + offset++);\n        }\n\n        for (;;) {\n            if (chLocal == ',') {\n                bp += offset;\n                this.ch = charAt(bp);\n                matchStat = VALUE_NULL;\n                token = JSONToken.COMMA;\n                return value;\n            } else if (chLocal == '}') {\n                bp += offset;\n                this.ch = charAt(bp);\n                matchStat = VALUE_NULL;\n                token = JSONToken.RBRACE;\n                return value;\n            } else if (isWhitespace(chLocal)) {\n                chLocal = charAt(bp + offset++);\n            } else {\n                break;\n            }\n        }\n        matchStat = NOT_MATCH;\n        return 0;\n    } else {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    if (chLocal == ',') {\n        bp += offset;\n        this.ch = charAt(bp);\n        matchStat = VALUE;\n        token = JSONToken.COMMA;\n        return value;\n    }\n\n    if (chLocal == '}') {\n        chLocal = charAt(bp + offset++);\n        if (chLocal == ',') {\n            token = JSONToken.COMMA;\n            bp += offset;\n            this.ch = this.charAt(bp);\n        } else if (chLocal == ']') {\n            token = JSONToken.RBRACKET;\n            bp += offset;\n            this.ch = this.charAt(bp);\n        } else if (chLocal == '}') {\n            token = JSONToken.RBRACE;\n            bp += offset;\n            this.ch = this.charAt(bp);\n        } else if (chLocal == EOI) {\n            bp += (offset - 1);\n            token = JSONToken.EOF;\n            ch = EOI;\n        } else {\n            matchStat = NOT_MATCH;\n            return 0;\n        }\n        matchStat = END;\n    } else {\n        matchStat = NOT_MATCH;\n        return 0;\n    }\n\n    return value;\n}",
        "patched_method_loc": [
            2388,
            2556
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.issue_1700.Issue1723#test_for_issue: junit.framework.AssertionFailedError: expected:<0.9390308> but was:<-1.1075817>"
        ],
        "validation_time": 47.66942238807678
    }
]