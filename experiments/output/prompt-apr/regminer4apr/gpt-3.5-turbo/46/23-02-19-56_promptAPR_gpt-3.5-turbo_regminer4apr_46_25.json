[
    {
        "patch": "Object parseArrayAccessFilter(boolean acceptBracket) {\n    if (acceptBracket) {\n        accept('[');\n    }\n\n    boolean predicateFlag = false;\n    int lparanCount = 0;\n\n    if (ch == '?') {\n        next();\n        accept('(');\n        lparanCount++;\n        while (ch == '(') {\n            next();\n            lparanCount++;\n        }\n        predicateFlag = true;\n    }\n\n    if (predicateFlag || IOUtils.firstIdentifier(ch) || Character.isJavaIdentifierStart(ch) || ch == '\\\\' || ch == '@') {\n        boolean self = false;\n        if (ch == '@') {\n            next();\n            accept('.');\n            self = true;\n        }\n        String propertyName = readName();\n\n        skipWhitespace();\n\n        Operator op = readOp();\n\n        skipWhitespace();\n\n        if (op == Operator.IN || op == Operator.NOT_IN) {\n            final boolean not = (op == Operator.NOT_IN);\n            accept('(');\n\n            List<Object> valueList = new JSONArray();\n            {\n                Object value = readValue();\n                valueList.add(value);\n\n                while (ch == ',') {\n                    next();\n                    value = readValue();\n                    valueList.add(value);\n                }\n            }\n\n            Filter filter = buildInFilter(propertyName, valueList, not);\n\n            if (predicateFlag) {\n                accept(')');\n            }\n\n            if (acceptBracket) {\n                accept(']');\n            }\n\n            return filter;\n        }\n\n        if (ch == '\\'' || ch == '\"') {\n            String strValue = readString();\n\n            Filter filter = buildStringFilter(propertyName, op, strValue);\n\n            while (ch == ' ') {\n                next();\n            }\n\n            if (predicateFlag) {\n                accept(')');\n            }\n\n            if (acceptBracket) {\n                accept(']');\n            }\n\n            return filter;\n        }\n\n        if (isDigitFirst(ch)) {\n            Object value = readNumberValue();\n            Filter filter = buildNumberFilter(propertyName, op, value);\n\n            while (ch == ' ') {\n                next();\n            }\n\n            if (predicateFlag) {\n                accept(')');\n            }\n\n            if (acceptBracket) {\n                accept(']');\n            }\n\n            return filter;\n        }\n\n        if (ch == '$') {\n            Segment segment = readSegement();\n            RefOpSegement filter = new RefOpSegement(propertyName, segment, op);\n\n            while (ch == ' ') {\n                next();\n            }\n\n            if (predicateFlag) {\n                accept(')');\n            }\n\n            if (acceptBracket) {\n                accept(']');\n            }\n\n            return filter;\n        }\n\n        if (ch == '/') {\n            Pattern pattern = readRegexPattern();\n            RegMatchSegement filter = new RegMatchSegement(propertyName, pattern, op);\n\n            if (predicateFlag) {\n                accept(')');\n            }\n\n            if (acceptBracket) {\n                accept(']');\n            }\n\n            return filter;\n        }\n\n        if (ch == 'n') {\n            String name = readName();\n            if (\"null\".equals(name)) {\n                Filter filter = buildNullFilter(propertyName, op);\n\n                if (predicateFlag) {\n                    accept(')');\n                }\n\n                accept(']');\n\n                return filter;\n            }\n        } else if (ch == 't') {\n            String name = readName();\n            if (\"true\".equals(name)) {\n                Filter filter = buildBooleanFilter(propertyName, op, true);\n\n                if (predicateFlag) {\n                    accept(')');\n                }\n\n                accept(']');\n\n                return filter;\n            }\n        } else if (ch == 'f') {\n            String name = readName();\n            if (\"false\".equals(name)) {\n                Filter filter = buildBooleanFilter(propertyName, op, false);\n\n                if (predicateFlag) {\n                    accept(')');\n                }\n\n                accept(']');\n\n                return filter;\n            }\n        }\n\n        throw new UnsupportedOperationException();\n    }\n\n    throw new UnsupportedOperationException();\n}",
        "patched_method_loc": [
            941,
            1123
        ],
        "status": "[CE]",
        "error_message": [
            "[991,29] cannot find symbol\n  symbol:   method buildInFilter(java.lang.String,java.util.List<java.lang.Object>,boolean)",
            "[1007,29] cannot find symbol\n  symbol:   method buildStringFilter(java.lang.String,com.alibaba.fastjson.JSONPath.Operator,java.lang.String)",
            "[1025,28] cannot find symbol\n  symbol:   method readNumberValue()",
            "[1026,29] cannot find symbol\n  symbol:   method buildNumberFilter(java.lang.String,com.alibaba.fastjson.JSONPath.Operator,java.lang.Object)",
            "[1063,31] cannot find symbol\n  symbol:   method readRegexPattern()",
            "[1080,33] cannot find symbol\n  symbol:   method buildNullFilter(java.lang.String,com.alibaba.fastjson.JSONPath.Operator)",
            "[1093,33] cannot find symbol\n  symbol:   method buildBooleanFilter(java.lang.String,com.alibaba.fastjson.JSONPath.Operator,boolean)",
            "[1106,33] cannot find symbol\n  symbol:   method buildBooleanFilter(java.lang.String,com.alibaba.fastjson.JSONPath.Operator,boolean)"
        ],
        "validation_time": 3.3204855918884277
    },
    {
        "patch": "public Object parseArrayAccessFilter(boolean acceptBracket) {\n    if (acceptBracket) {\n        accept('[');\n    }\n\n    boolean predicateFlag = false;\n\n    if (ch == '?') {\n        next();\n        accept('(');\n        predicateFlag = true;\n    }\n\n    if (predicateFlag || IOUtils.firstIdentifier(ch) || Character.isJavaIdentifierStart(ch) || ch == '\\\\' || ch == '@') {\n        // Parse the filter based on the property name, operator, and value\n        // Implement the filter parsing logic here\n        \n        return filter;\n    }\n\n    // Handle other cases like string matching, numeric values, etc.\n    \n    return null;\n}",
        "patched_method_loc": [
            945,
            969
        ],
        "status": "[CE]",
        "error_message": [
            "[42,16] package org.json does not exist"
        ],
        "validation_time": 2.4811363220214844
    },
    {
        "patch": "Object parseArrayAccessFilter(boolean acceptBracket) {\n    if (acceptBracket) {\n        accept('[');\n    }\n\n    // Add necessary variables and logic here\n\n    // Existing code goes here\n\n    // Return the correct filter or segment\n\n    // Make necessary adjustments to handle references\n\n    // Handle other cases as needed\n\n    // Ensure proper termination and return\n\n    // Add missing error handling and other necessary logic\n\n    // Return the final filter or segment\n}",
        "patched_method_loc": [
            941,
            962
        ],
        "status": "[CE]",
        "error_message": [
            "[961,1] missing return statement"
        ],
        "validation_time": 3.270397424697876
    },
    {
        "patch": "public Object parseArrayAccessFilter(boolean acceptBracket) {\n    if (acceptBracket) {\n        accept('[');\n    }\n\n    boolean predicateFlag = false;\n    int lparanCount = 0;\n\n    if (ch == '?') {\n        next();\n        accept('(');\n        lparanCount++;\n        while (ch == '(') {\n            next();\n            lparanCount++;\n        }\n        predicateFlag = true;\n    }\n\n    if (predicateFlag || IOUtils.firstIdentifier(ch) || Character.isJavaIdentifierStart(ch) || ch == '\\\\' || ch == '@') {\n        boolean self = false;\n        if (ch == '@') {\n            next();\n            accept('.');\n            self = true;\n        }\n        String propertyName = readName();\n\n        skipWhitespace();\n\n        Operator op = readOp();\n\n        skipWhitespace();\n\n        Filter filter = null;\n\n        if (op == Operator.EQ || op == Operator.NE) {\n            Object value = readValue();\n            filter = new ValueSegment(propertyName, value, op == Operator.EQ);\n        } else if (op == Operator.BETWEEN || op == Operator.NOT_BETWEEN) {\n            Object startValue = readValue();\n            accept(',');\n            Object endValue = readValue();\n            filter = new BetweenSegement(propertyName, startValue, endValue, op == Operator.NOT_BETWEEN);\n        } else if (op == Operator.IN || op == Operator.NOT_IN) {\n            accept('(');\n            List<Object> valueList = new JSONArray();\n            Object value = readValue();\n            valueList.add(value);\n            while (ch == ',') {\n                next();\n                value = readValue();\n                valueList.add(value);\n            }\n            filter = new InSegement(propertyName, valueList, op == Operator.NOT_IN);\n        } else if (ch == '\\'' || ch == '\"') {\n            String strValue = readString();\n            filter = new StringOpSegement(propertyName, strValue, op);\n        } else if (isDigitFirst(ch)) {\n            Number value = readNumber();\n            filter = new NumberOpSegement(propertyName, value, op);\n        } else if (ch == '$') {\n            Segment segment = readSegement();\n            filter = new RefOpSegement(propertyName, segment, op);\n        } else if (ch == '/') {\n            Pattern pattern = readPattern();\n            filter = new PatternSegement(propertyName, pattern, op);\n        } else if (ch == 'n') {\n            String name = readName();\n            if (\"null\".equals(name)) {\n                filter = new NullSegement(propertyName, op == Operator.NE);\n            }\n        } else if (ch == 't') {\n            String name = readName();\n            if (\"true\".equals(name)) {\n                filter = new ValueSegment(propertyName, Boolean.TRUE, op == Operator.EQ);\n            }\n        } else if (ch == 'f') {\n            String name = readName();\n            if (\"false\".equals(name)) {\n                filter = new ValueSegment(propertyName, Boolean.FALSE, op == Operator.EQ);\n            }\n        }\n\n        if (filter == null) {\n            throw new UnsupportedOperationException(\"Unsupported operation or value type\");\n        }\n\n        while (ch == ' ') {\n            next();\n        }\n\n        if (predicateFlag) {\n            accept(')');\n        }\n\n        if (acceptBracket) {\n            accept(']');\n        }\n\n        return filter;\n    }\n\n    int start = pos - 1;\n    char startCh = ch;\n    while (ch != ']' && ch != '/' && !isEOF()) {\n        if (ch == '.' && !predicateFlag && startCh != '\\'') {\n            break;\n        }\n\n        if (ch == '\\\\') {\n            next();\n        }\n        next();\n    }\n\n    int end;\n    if (acceptBracket) {\n        end = pos - 1;\n    } else {\n        if (ch == '/' || ch == '.') {\n            end = pos - 1;\n        } else {\n            end = pos;\n        }\n    }\n\n    String text = path.substring(start, end);\n\n    if (text.indexOf(\"\\\\.\") != -1) {\n        String propName;\n        if (startCh == '\\'' && text.length() > 2 && text.charAt(text.length() - 1) == startCh) {\n            propName = text.substring(1, text.length() - 1);\n        } else {\n            propName = text.replaceAll(\"\\\\\\\\\\\\.\", \"\\\\.\");\n            if (propName.indexOf(\"\\\\-\") != -1) {\n                propName = propName.replaceAll(\"\\\\\\\\-\", \"-\");\n            }\n        }\n\n        if (predicateFlag) {\n            accept(')');\n        }\n\n        return new PropertySegment(propName, false);\n    }\n\n    Segment segment = buildArraySegement(text);\n\n    if (acceptBracket && !isEOF()) {\n        accept(']');\n    }\n\n    return segment;\n}",
        "patched_method_loc": [
            944,
            1099
        ],
        "status": "[CE]",
        "error_message": [
            "[987,26] cannot find symbol\n  symbol:   class BetweenSegement",
            "[998,26] cannot find symbol\n  symbol:   class InSegement",
            "[1003,28] cannot find symbol\n  symbol:   method readNumber()",
            "[1004,26] cannot find symbol\n  symbol:   class NumberOpSegement",
            "[1009,31] cannot find symbol\n  symbol:   method readPattern()",
            "[1010,26] cannot find symbol\n  symbol:   class PatternSegement",
            "[1014,26] constructor NullSegement in class com.alibaba.fastjson.JSONPath.NullSegement cannot be applied to given types;\n  required: java.lang.String\n  found: java.lang.String,boolean\n  reason: actual and formal argument lists differ in length"
        ],
        "validation_time": 3.2763888835906982
    },
    {
        "patch": "public Object parseArrayAccessFilter(boolean acceptBracket) {\n    if (acceptBracket) {\n        accept('[');\n    }\n\n    boolean predicateFlag = false;\n    int lparenCount = 0;\n\n    if (ch == '?') {\n        next();\n        accept('(');\n        lparenCount++;\n        while (ch == '(') {\n            next();\n            lparenCount++;\n        }\n        predicateFlag = true;\n    }\n\n    if (predicateFlag || IOUtils.firstIdentifier(ch) || Character.isJavaIdentifierStart(ch) || ch == '\\\\' || ch == '@') {\n        boolean self = false;\n        if (ch == '@') {\n            next();\n            accept('.');\n            self = true;\n        }\n        String propertyName = readName();\n\n        skipWhitespace();\n\n        if (predicateFlag && ch == ')') {\n            next();\n\n            Filter filter = new NotNullSegment(propertyName);\n            while (ch == ' ') {\n                next();\n            }\n\n            if (ch == '&' || ch == '|') {\n                filter = filterRest(filter);\n            }\n\n            if (acceptBracket) {\n                accept(']');\n            }\n            return filter;\n        }\n\n        // Handle other cases for property access\n\n    }\n\n    // Handle other cases for array access\n\n    return null; // Default return value\n}",
        "patched_method_loc": [
            944,
            1000
        ],
        "status": "[CE]",
        "error_message": [
            "[977,33] cannot find symbol\n  symbol:   class NotNullSegment"
        ],
        "validation_time": 3.3362975120544434
    },
    {
        "patch": "public Object parseArrayAccessFilter(boolean acceptBracket) {\n    if (acceptBracket && ch != '[') {\n        throw new RuntimeException(\"Expected '['\");\n    }\n\n    next();\n\n    if (ch == '?') {\n        next();\n        accept('(');\n\n        boolean predicateFlag = true;\n        List<Object> segments = new ArrayList<>();\n        while (ch != ')') {\n            segments.add(parseArrayAccessFilter(false));\n        }\n        accept(')');\n\n        // Handle predicate logic here\n\n        if (acceptBracket && ch == ']') {\n            next();\n        }\n\n        return segments;\n    }\n\n    if (!IOUtils.firstIdentifier(ch) && !Character.isJavaIdentifierStart(ch) && ch != '\\\\' && ch != '@') {\n        throw new RuntimeException(\"Unexpected character: \" + ch);\n    }\n\n    // Handle other cases here\n\n    if (acceptBracket && ch == ']') {\n        next();\n    }\n\n    return null;\n}",
        "patched_method_loc": [
            944,
            983
        ],
        "status": "[CE]",
        "error_message": [
            "[956,47] diamond operator is not supported in -source 1.5\n  (use -source 7 or higher to enable diamond operator)"
        ],
        "validation_time": 2.1906862258911133
    },
    {
        "patch": "public Object parseArrayAccessFilter(boolean acceptBracket) {\n    if (acceptBracket) {\n        accept('[');\n    }\n\n    boolean predicateFlag = false;\n    int lparanCount = 0;\n\n    if (ch == '?') {\n        next();\n        accept('(');\n        lparanCount++;\n        while (ch == '(') {\n            next();\n            lparanCount++;\n        }\n        predicateFlag = true;\n    }\n\n    if (predicateFlag || IOUtils.firstIdentifier(ch) || Character.isJavaIdentifierStart(ch) || ch == '\\\\' || ch == '@') {\n        // Implementation for parsing the filter expression goes here\n    }\n\n    int start = pos - 1;\n    char startCh = ch;\n    while (ch != ']' && ch != '/' && !isEOF()) {\n        if (ch == '.' && !predicateFlag && startCh != '\\'') {\n            break;\n        }\n\n        if (ch == '\\\\') {\n            next();\n        }\n        next();\n    }\n\n    int end;\n    if (acceptBracket) {\n        end = pos - 1;\n    } else {\n        if (ch == '/' || ch == '.') {\n            end = pos - 1;\n        } else {\n            end = pos;\n        }\n    }\n\n    String text = path.substring(start, end);\n\n    if (text.indexOf(\"\\\\.\") != -1) {\n        String propName;\n        if (startCh == '\\'' && text.length() > 2 && text.charAt(text.length() - 1) == startCh) {\n            propName = text.substring(1, text.length() - 1);\n        } else {\n            propName = text.replaceAll(\"\\\\\\\\\\\\.\", \"\\\\.\");\n            if (propName.indexOf(\"\\\\-\") != -1) {\n                propName = propName.replaceAll(\"\\\\\\\\-\", \"-\");\n            }\n        }\n\n        if (predicateFlag) {\n            accept(')');\n        }\n\n        return new PropertySegment(propName, false);\n    }\n\n    Segment segment = buildArraySegement(text);\n\n    if (acceptBracket && !isEOF()) {\n        accept(']');\n    }\n\n    return segment;\n}",
        "patched_method_loc": [
            945,
            1020
        ],
        "status": "[CE]",
        "error_message": [
            "[42,24] package net.sf.json.util does not exist"
        ],
        "validation_time": 2.509629964828491
    },
    {
        "patch": null,
        "patched_method_loc": null,
        "status": null,
        "error_message": null,
        "validation_time": null
    },
    {
        "patch": "Object parseArrayAccessFilter(boolean acceptBracket) {\n    if (acceptBracket) {\n        accept('[');\n    }\n\n    boolean predicateFlag = false;\n    int lparanCount = 0;\n\n    if (ch == '?') {\n        next();\n        accept('(');\n        lparanCount++;\n        while (ch == '(') {\n            next();\n            lparanCount++;\n        }\n        predicateFlag = true;\n    }\n\n    if (predicateFlag || IOUtils.firstIdentifier(ch) || Character.isJavaIdentifierStart(ch) || ch == '\\\\' || ch == '@') {\n        boolean self = false;\n        if (ch == '@') {\n            next();\n            accept('.');\n            self = true;\n        }\n        String propertyName = readName();\n\n        skipWhitespace();\n\n        if (predicateFlag && ch == ')') {\n            next();\n\n            Filter filter = new NotNullSegement(propertyName);\n            while (ch == ' ') {\n                next();\n            }\n\n            if (ch == '&' || ch == '|') {\n                filter = filterRest(filter);\n            }\n\n            if (acceptBracket) {\n                accept(']');\n            }\n            return filter;\n        }\n\n        if (acceptBracket && ch == ']') {\n            next();\n            Filter filter = new NotNullSegement(propertyName);\n            while (ch == ' ') {\n                next();\n            }\n\n            if (ch == '&' || ch == '|') {\n                filter = filterRest(filter);\n            }\n\n            accept(')');\n            if (predicateFlag) {\n                accept(')');\n            }\n\n            if (acceptBracket) {\n                accept(']');\n            }\n            return filter;\n        }\n\n        Operator op = readOp();\n\n        skipWhitespace();\n\n        if (op == Operator.BETWEEN || op == Operator.NOT_BETWEEN) {\n            final boolean not = (op == Operator.NOT_BETWEEN);\n\n            Object startValue = readValue();\n            String name = readName();\n\n            if (!\"and\".equalsIgnoreCase(name)) {\n                throw new JSONPathException(path);\n            }\n\n            Object endValue = readValue();\n\n            if (startValue == null || endValue == null) {\n                throw new JSONPathException(path);\n            }\n\n            if (startValue instanceof Number && endValue instanceof Number) {\n                Filter filter = new IntBetweenSegement(propertyName, ((Number) startValue).longValue(), ((Number) endValue).longValue(), not);\n                return filter;\n            }\n\n            throw new JSONPathException(path);\n        }\n\n        if (op == Operator.IN || op == Operator.NOT_IN) {\n            final boolean not = (op == Operator.NOT_IN);\n            accept('(');\n\n            List<Object> valueList = new ArrayList<>();\n            {\n                Object value = readValue();\n                valueList.add(value);\n\n                while (ch == ',') {\n                    next();\n                    value = readValue();\n                    valueList.add(value);\n                }\n            }\n\n            boolean isInt = true;\n            boolean isString = true;\n            for (Object item : valueList) {\n                if (item == null) {\n                    isInt = false;\n                    continue;\n                }\n\n                if (!(item instanceof Number)) {\n                    isInt = false;\n                }\n\n                if (!(item instanceof String)) {\n                    isString = false;\n                }\n            }\n\n            if (valueList.size() == 1 && valueList.get(0) == null) {\n                Filter filter;\n                if (not) {\n                    filter = new NotNullSegement(propertyName);\n                } else {\n                    filter = new NullSegement(propertyName);\n                }\n\n                while (ch == ' ') {\n                    next();\n                }\n\n                if (ch == '&' || ch == '|') {\n                    filter = filterRest(filter);\n                }\n\n                accept(')');\n                if (predicateFlag) {\n                    accept(')');\n                }\n\n                if (acceptBracket) {\n                    accept(']');\n                }\n\n                return filter;\n            }\n\n            if (isInt) {\n                if (valueList.size() == 1) {\n                    long value = ((Number) valueList.get(0)).longValue();\n                    Operator intOp = not ? Operator.NE : Operator.EQ;\n                    Filter filter = new IntOpSegement(propertyName, value, intOp);\n                    while (ch == ' ') {\n                        next();\n                    }\n\n                    if (ch == '&' || ch == '|') {\n                        filter = filterRest(filter);\n                    }\n\n                    accept(')');\n                    if (predicateFlag) {\n                        accept(')');\n                    }\n\n                    if (acceptBracket) {\n                        accept(']');\n                    }\n\n                    return filter;\n                }\n\n                long[] values = new long[valueList.size()];\n                for (int i = 0; i < values.length; ++i) {\n                    values[i] = ((Number) valueList.get(i)).longValue();\n                }\n\n                Filter filter = new IntInSegement(propertyName, values, not);\n\n                while (ch == ' ') {\n                    next();\n                }\n\n                if (ch == '&' || ch == '|') {\n                    filter = filterRest(filter);\n                }\n\n                accept(')');\n                if (predicateFlag) {\n                    accept(')');\n                }\n\n                if (acceptBracket) {\n                    accept(']');\n                }\n\n                return filter;\n            }\n\n            if (isString) {\n                if (valueList.size() == 1) {\n                    String value = (String) valueList.get(0);\n\n                    Operator intOp = not ? Operator.NE : Operator.EQ;\n                    Filter filter = new StringOpSegement(propertyName, value, intOp);\n\n                    while (ch == ' ') {\n                        next();\n                    }\n\n                    if (ch == '&' || ch == '|') {\n                        filter = filterRest(filter);\n                    }\n\n                    accept(')');\n                    if (predicateFlag) {\n                        accept(')');\n                    }\n\n                    if (acceptBracket) {\n                        accept(']');\n                    }\n\n                    return filter;\n                }\n\n                String[] values = new String[valueList.size()];\n                valueList.toArray(values);\n\n                Filter filter = new StringInSegement(propertyName, values, not);\n\n                while (ch == ' ') {\n                    next();\n                }\n\n                if (ch == '&' || ch == '|') {\n                    filter = filterRest(filter);\n                }\n\n                accept(')');\n                if (predicateFlag) {\n                    accept(')');\n                }\n\n                if (acceptBracket) {\n                    accept(']');\n                }\n\n                return filter;\n            }\n\n            throw new UnsupportedOperationException();\n        }\n\n        // Add the rest of the code here\n\n    }\n\n    // Add the remaining code here\n\n    return null; // Add appropriate return statement\n}",
        "patched_method_loc": [
            945,
            1219
        ],
        "status": "[CE]",
        "error_message": [
            "[1047,52] diamond operator is not supported in -source 1.5\n  (use -source 7 or higher to enable diamond operator)"
        ],
        "validation_time": 2.1925241947174072
    },
    {
        "patch": "Object parseArrayAccessFilter(boolean acceptBracket) {\n    if (acceptBracket) {\n        accept('[');\n    }\n\n    boolean predicateFlag = false;\n\n    if (ch == '?') {\n        next();\n        accept('(');\n        predicateFlag = true;\n    }\n\n    if (ch == '$') {\n        Segment segment = readSegement();\n        RefOpSegement filter = new RefOpSegement(segment, null);\n        return filter;\n    }\n\n    if (ch == '\\'' || ch == '\"') {\n        String strValue = readString();\n        Filter filter = new ValueSegment(null, strValue, true);\n        return filter;\n    }\n\n    if (ch == 'n') {\n        String name = readName();\n        if (\"null\".equals(name)) {\n            Filter filter = new ValueSegment(null, null, true);\n            return filter;\n        }\n    } else if (ch == 't') {\n        String name = readName();\n        if (\"true\".equals(name)) {\n            Filter filter = new ValueSegment(null, Boolean.TRUE, true);\n            return filter;\n        }\n    } else if (ch == 'f') {\n        String name = readName();\n        if (\"false\".equals(name)) {\n            Filter filter = new ValueSegment(null, Boolean.FALSE, true);\n            return filter;\n        }\n    }\n\n    throw new UnsupportedOperationException();\n}",
        "patched_method_loc": [
            941,
            988
        ],
        "status": "[CE]",
        "error_message": [
            "[956,32] constructor RefOpSegement in class com.alibaba.fastjson.JSONPath.RefOpSegement cannot be applied to given types;\n  required: java.lang.String,com.alibaba.fastjson.JSONPath.Segment,com.alibaba.fastjson.JSONPath.Operator\n  found: com.alibaba.fastjson.JSONPath.Segment,<nulltype>\n  reason: actual and formal argument lists differ in length"
        ],
        "validation_time": 3.253872871398926
    },
    {
        "patch": "public Object parseArrayAccessFilter(boolean acceptBracket) {\n    if (acceptBracket) {\n        accept('[');\n    }\n\n    boolean predicateFlag = false;\n\n    if (ch == '?') {\n        next();\n        accept('(');\n        predicateFlag = true;\n    }\n\n    if (predicateFlag || IOUtils.firstIdentifier(ch) || Character.isJavaIdentifierStart(ch) || ch == '\\\\' || ch == '@') {\n        // Parsing property name\n        String propertyName = readName();\n\n        // Skip whitespaces\n        skipWhitespace();\n\n        // Handle different cases based on the next character\n        if (predicateFlag && ch == ')') {\n            // Handle filter for predicate\n            next();\n            Filter filter = new NotNullSegement(propertyName);\n            return filter;\n        } else {\n            // Handle other filter cases\n            Operator op = readOp();\n            skipWhitespace();\n\n            if (ch == '\\'' || ch == '\"') {\n                // Handle string value filters\n                String strValue = readString();\n                Filter filter = new StringOpSegement(propertyName, strValue, op);\n                return filter;\n            } else if (isDigitFirst(ch)) {\n                // Handle numeric value filters\n                Object value = readValue();\n                Filter filter = new ValueSegment(propertyName, value, op);\n                return filter;\n            } else {\n                throw new UnsupportedOperationException(\"Unsupported filter type\");\n            }\n        }\n    }\n\n    // Handle array segments\n    int start = pos - 1;\n    while (ch != ']' && ch != '/' && !isEOF()) {\n        next();\n    }\n\n    int end = pos - 1;\n    String text = path.substring(start, end);\n\n    Segment segment = buildArraySegement(text);\n\n    if (acceptBracket) {\n        accept(']');\n    }\n\n    return segment;\n}",
        "patched_method_loc": [
            944,
            1008
        ],
        "status": "[CE]",
        "error_message": [
            "[983,71] incompatible types: com.alibaba.fastjson.JSONPath.Operator cannot be converted to boolean"
        ],
        "validation_time": 3.41064190864563
    },
    {
        "patch": "public Object parseArrayAccessFilter(boolean acceptBracket) {\n    if (acceptBracket) {\n        accept('[');\n    }\n\n    boolean predicateFlag = false;\n    int lparanCount = 0;\n\n    if (ch == '?') {\n        next();\n        accept('(');\n        lparanCount++;\n        while (ch == '(') {\n            next();\n            lparanCount++;\n        }\n        predicateFlag = true;\n    }\n\n    if (predicateFlag || IOUtils.firstIdentifier(ch) || Character.isJavaIdentifierStart(ch) || ch == '\\\\' || ch == '@') {\n        // Parse property name\n        String propertyName = readName();\n\n        skipWhitespace();\n\n        // Handle predicate flag\n        if (predicateFlag && ch == ')') {\n            next();\n            Filter filter = new NotNullSegement(propertyName);\n            return filter;\n        }\n\n        // Handle bracket\n        if (acceptBracket && ch == ']') {\n            next();\n            Filter filter = new NotNullSegement(propertyName);\n            return filter;\n        }\n\n        // Read operator\n        Operator op = readOp();\n\n        skipWhitespace();\n\n        // Parse values based on the operator\n        if (op == Operator.EQ || op == Operator.NE) {\n            Object value = readValue();\n            Filter filter = new ValueSegment(propertyName, value, op);\n            return filter;\n        } else {\n            throw new UnsupportedOperationException(\"Unsupported operator: \" + op);\n        }\n    }\n\n    // Handle array elements\n    // Remaining code for array elements handling goes here...\n\n    return null;\n}",
        "patched_method_loc": [
            944,
            1003
        ],
        "status": "[CE]",
        "error_message": [
            "[991,67] incompatible types: com.alibaba.fastjson.JSONPath.Operator cannot be converted to boolean"
        ],
        "validation_time": 3.1733341217041016
    },
    {
        "patch": null,
        "patched_method_loc": null,
        "status": null,
        "error_message": null,
        "validation_time": null
    },
    {
        "patch": "public Object parseArrayAccessFilter(boolean acceptBracket) {\n    if (acceptBracket) {\n        accept('[');\n    }\n\n    boolean predicateFlag = false;\n    int lparanCount = 0;\n\n    if (ch == '?') {\n        next();\n        accept('(');\n        lparanCount++;\n        while (ch == '(') {\n            next();\n            lparanCount++;\n        }\n        predicateFlag = true;\n    }\n\n    // Other code remains the same\n\n    if (ch == '/' || ch == '.') {\n        end = pos - 1;\n    } else {\n        end = pos;\n    }\n\n    String text = path.substring(start, end);\n\n    if (text.indexOf(\"\\\\.\") != -1) {\n        String propName = text.replaceAll(\"\\\\\\\\.\", \".\");\n        \n        if (predicateFlag) {\n            accept(')');\n        }\n\n        return new PropertySegment(propName, false);\n    }\n\n    Segment segment = buildArraySegement(text);\n\n    if (acceptBracket && !isEOF()) {\n        accept(']');\n    }\n\n    return segment;\n}",
        "patched_method_loc": [
            944,
            991
        ],
        "status": "[CE]",
        "error_message": [
            "[966,9] cannot find symbol\n  symbol:   variable end",
            "[968,9] cannot find symbol\n  symbol:   variable end",
            "[971,34] cannot find symbol\n  symbol:   variable start",
            "[971,41] cannot find symbol\n  symbol:   variable end"
        ],
        "validation_time": 3.2436695098876953
    },
    {
        "patch": "Object parseArrayAccessFilter(boolean acceptBracket) {\n    if (acceptBracket) {\n        accept('[');\n    }\n\n    boolean predicateFlag = false;\n    int lparanCount = 0;\n\n    if (ch == '?') {\n        next();\n        accept('(');\n        lparanCount++;\n        while (ch == '(') {\n            next();\n            lparanCount++;\n        }\n        predicateFlag = true;\n    }\n\n    if (predicateFlag || IOUtils.firstIdentifier(ch) || Character.isJavaIdentifierStart(ch) || ch == '\\\\' || ch == '@') {\n        boolean self = false;\n        if (ch == '@') {\n            next();\n            accept('.');\n            self = true;\n        }\n        String propertyName = readName();\n\n        skipWhitespace();\n\n        if (predicateFlag && ch == ')') {\n            next();\n            Filter filter = new NotNullSegement(propertyName);\n            while (ch == ' ') {\n                next();\n            }\n\n            if (ch == '&' || ch == '|') {\n                filter = filterRest(filter);\n            }\n\n            if (acceptBracket) {\n                accept(']');\n            }\n            return filter;\n        }\n\n        Operator op = readOp();\n\n        skipWhitespace();\n\n        if (op == Operator.IN || op == Operator.NOT_IN) {\n            final boolean not = (op == Operator.NOT_IN);\n            accept('(');\n\n            List<Object> valueList = new ArrayList<>();\n            do {\n                skipWhitespace();\n                Object value = readValue();\n                valueList.add(value);\n                skipWhitespace();\n            } while (ch == ',');\n\n            Filter filter = createInSegement(propertyName, valueList, not);\n\n            if (acceptBracket) {\n                accept(']');\n            }\n\n            return filter;\n        }\n\n        if (ch == '\\'' || ch == '\"') {\n            String strValue = readString();\n            Filter filter = createStringOpSegement(propertyName, strValue, op);\n\n            skipWhitespace();\n\n            if (ch == '&' || ch == '|') {\n                filter = filterRest(filter);\n            }\n\n            if (predicateFlag) {\n                accept(')');\n            }\n\n            if (acceptBracket) {\n                accept(']');\n            }\n\n            return filter;\n        }\n\n        if (Character.isDigit(ch) || ch == '-') {\n            Number value = readNumberValue();\n            Filter filter = createNumberOpSegement(propertyName, value, op);\n\n            skipWhitespace();\n\n            if (predicateFlag) {\n                accept(')');\n            }\n\n            if (acceptBracket) {\n                accept(']');\n            }\n\n            return filter;\n        }\n\n        if (ch == '$') {\n            Segment segment = readSegement();\n            RefOpSegement filter = new RefOpSegement(propertyName, segment, op);\n\n            skipWhitespace();\n\n            if (predicateFlag) {\n                accept(')');\n            }\n\n            if (acceptBracket) {\n                accept(']');\n            }\n\n            return filter;\n        }\n    }\n\n    // Handle other cases here\n\n    return null;\n}",
        "patched_method_loc": [
            941,
            1073
        ],
        "status": "[CE]",
        "error_message": [
            "[996,52] diamond operator is not supported in -source 1.5\n  (use -source 7 or higher to enable diamond operator)"
        ],
        "validation_time": 2.193837881088257
    },
    {
        "patch": "public Object parseArrayAccessFilter(boolean acceptBracket) {\n    if (acceptBracket) {\n        accept('[');\n    }\n\n    boolean predicateFlag = false;\n    int lparanCount = 0;\n\n    if (ch == '?') {\n        next();\n        accept('(');\n        lparanCount++;\n        while (ch == '(') {\n            next();\n            lparanCount++;\n        }\n        predicateFlag = true;\n    }\n\n    if (predicateFlag || IOUtils.firstIdentifier(ch) || Character.isJavaIdentifierStart(ch) || ch == '\\\\' || ch == '@') {\n        boolean self = false;\n        if (ch == '@') {\n            next();\n            accept('.');\n            self = true;\n        }\n        String propertyName = readName();\n\n        skipWhitespace();\n\n        Operator op = readOp();\n\n        skipWhitespace();\n\n        if (op == Operator.EQ || op == Operator.NE) {\n            Object value = readValue();\n            Filter filter = new ValueSegment(propertyName, value, op == Operator.EQ);\n            return filter;\n        } else if (op == Operator.BETWEEN || op == Operator.NOT_BETWEEN) {\n            Object startValue = readValue();\n            accept(',');\n            Object endValue = readValue();\n            Filter filter = new BetweenSegement(propertyName, startValue, endValue, op == Operator.NOT_BETWEEN);\n            return filter;\n        } else if (op == Operator.IN || op == Operator.NOT_IN) {\n            accept('(');\n            List<Object> valueList = new JSONArray();\n            valueList.add(readValue());\n            while (ch == ',') {\n                next();\n                valueList.add(readValue());\n            }\n            accept(')');\n            Filter filter = new InSegement(propertyName, valueList.toArray(), op == Operator.NOT_IN);\n            return filter;\n        } else if (op == Operator.LIKE || op == Operator.NOT_LIKE || op == Operator.RLIKE || op == Operator.NOT_RLIKE) {\n            String strValue = readString();\n            Filter filter = new StringOpSegement(propertyName, strValue, op);\n            return filter;\n        } else if (isDigitFirst(ch) || ch == '.') {\n            Object value = readNumericValue();\n            Filter filter = new NumericOpSegement(propertyName, value, op);\n            return filter;\n        } else if (ch == '$') {\n            Segment segment = readSegement();\n            Filter filter = new RefOpSegement(propertyName, segment, op);\n            return filter;\n        } else if (ch == '/') {\n            Pattern pattern = readPattern();\n            Filter filter = new RegMatchSegement(propertyName, pattern, op);\n            return filter;\n        } else if (ch == 'n') {\n            String name = readName();\n            if (\"null\".equals(name)) {\n                Filter filter = new NullSegement(propertyName);\n                return filter;\n            }\n        } else if (ch == 't') {\n            String name = readName();\n            if (\"true\".equals(name)) {\n                Filter filter = new ValueSegment(propertyName, Boolean.TRUE, op == Operator.EQ);\n                return filter;\n            }\n        } else if (ch == 'f') {\n            String name = readName();\n            if (\"false\".equals(name)) {\n                Filter filter = new ValueSegment(propertyName, Boolean.FALSE, op == Operator.EQ);\n                return filter;\n            }\n        }\n\n        throw new UnsupportedOperationException(\"Unsupported operation: \" + op);\n    }\n\n    int start = pos - 1;\n    char startCh = ch;\n    while (ch != ']' && ch != '/' && !isEOF()) {\n        if (ch == '.' && !predicateFlag && startCh != '\\'') {\n            break;\n        }\n\n        if (ch == '\\\\') {\n            next();\n        }\n        next();\n    }\n\n    int end = acceptBracket ? pos - 1 : pos;\n    String text = path.substring(start, end);\n\n    if (text.indexOf(\"\\\\.\") != -1) {\n        String propName = text.replaceAll(\"\\\\\\\\\\\\.\", \"\\\\.\");\n        if (propName.indexOf(\"\\\\-\") != -1) {\n            propName = propName.replaceAll(\"\\\\\\\\-\", \"-\");\n        }\n\n        return new PropertySegment(propName, false);\n    }\n\n    Segment segment = buildArraySegement(text);\n\n    if (acceptBracket && !isEOF()) {\n        accept(']');\n    }\n\n    return segment;\n}",
        "patched_method_loc": [
            944,
            1071
        ],
        "status": "[CE]",
        "error_message": [
            "[986,33] cannot find symbol\n  symbol:   class BetweenSegement",
            "[997,33] cannot find symbol\n  symbol:   class InSegement",
            "[1004,28] cannot find symbol\n  symbol:   method readNumericValue()",
            "[1005,33] cannot find symbol\n  symbol:   class NumericOpSegement",
            "[1012,31] cannot find symbol\n  symbol:   method readPattern()"
        ],
        "validation_time": 3.358710289001465
    },
    {
        "patch": "Object parseArrayAccessFilter(boolean acceptBracket) {\n    if (acceptBracket) {\n        accept('[');\n    }\n\n    if (ch == '{') {\n        // Handle object segment\n        return readObjectSegment();\n    } else if (ch == '[') {\n        // Handle array segment\n        return readArraySegment();\n    }\n\n    throw new UnsupportedOperationException(\"Unsupported JSON path segment\");\n}",
        "patched_method_loc": [
            941,
            956
        ],
        "status": "[CE]",
        "error_message": [
            "[948,16] cannot find symbol\n  symbol:   method readObjectSegment()",
            "[951,16] cannot find symbol\n  symbol:   method readArraySegment()"
        ],
        "validation_time": 4.217111825942993
    },
    {
        "patch": "Object parseArrayAccessFilter(boolean acceptBracket) {\n    if (acceptBracket) {\n        accept('[');\n    }\n\n    boolean predicateFlag = false;\n    int lparanCount = 0;\n\n    if (ch == '?') {\n        next();\n        accept('(');\n        lparanCount++;\n        while (ch == '(') {\n            next();\n            lparanCount++;\n        }\n        predicateFlag = true;\n    }\n\n    if (predicateFlag || IOUtils.firstIdentifier(ch) || Character.isJavaIdentifierStart(ch) || ch == '\\\\' || ch == '@') {\n        boolean self = false;\n        if (ch == '@') {\n            next();\n            accept('.');\n            self = true;\n        }\n        String propertyName = readName();\n\n        skipWhitespace();\n\n        if (predicateFlag && ch == ')') {\n            next();\n            Filter filter = new NotNullSegement(propertyName);\n            while (ch == ' ') {\n                next();\n            }\n\n            if (ch == '&' || ch == '|') {\n                filter = filterRest(filter);\n            }\n\n            if (acceptBracket) {\n                accept(']');\n            }\n            return filter;\n        }\n\n        if (acceptBracket && ch == ']') {\n            next();\n            Filter filter = new NotNullSegement(propertyName);\n            while (ch == ' ') {\n                next();\n            }\n\n            if (ch == '&' || ch == '|') {\n                filter = filterRest(filter);\n            }\n\n            if (predicateFlag) {\n                accept(')');\n            }\n\n            if (acceptBracket) {\n                accept(']');\n            }\n            return filter;\n        }\n\n        Operator op = readOp();\n\n        skipWhitespace();\n\n        if (op == Operator.BETWEEN || op == Operator.NOT_BETWEEN) {\n            final boolean not = (op == Operator.NOT_BETWEEN);\n\n            Object startValue = readValue();\n\n            String name = readName();\n\n            if (!\"and\".equalsIgnoreCase(name)) {\n                throw new JSONPathException(path);\n            }\n\n            Object endValue = readValue();\n\n            if (startValue == null || endValue == null) {\n                throw new JSONPathException(path);\n            }\n\n            if (isInt(startValue.getClass()) && isInt(endValue.getClass())) {\n                Filter filter = new IntBetweenSegement(propertyName, TypeUtils.longExtractValue((Number) startValue), TypeUtils.longExtractValue((Number) endValue), not);\n                return filter;\n            }\n\n            throw new JSONPathException(path);\n        }\n\n        // Handle other operators and values for filtering\n\n        // Handle building the correct segment based on the input path\n\n    }\n\n    // Remaining code implementation\n\n}",
        "patched_method_loc": [
            941,
            1047
        ],
        "status": "[CE]",
        "error_message": [
            "[1046,1] missing return statement"
        ],
        "validation_time": 3.251678466796875
    },
    {
        "patch": "public Object parseArrayAccessFilter(boolean acceptBracket) {\n    if (acceptBracket) {\n        accept('[');\n    }\n\n    boolean predicateFlag = false;\n    int lparanCount = 0;\n\n    if (ch == '?') {\n        next();\n        accept('(');\n        lparanCount++;\n        while (ch == '(') {\n            next();\n            lparanCount++;\n        }\n        predicateFlag = true;\n    }\n\n    if (predicateFlag || IOUtils.firstIdentifier(ch) || Character.isJavaIdentifierStart(ch) || ch == '\\\\' || ch == '@') {\n        boolean self = false;\n        if (ch == '@') {\n            next();\n            accept('.');\n            self = true;\n        }\n        String propertyName = readName();\n\n        skipWhitespace();\n\n        if (predicateFlag && ch == ')') {\n            next();\n\n            Filter filter = new NotNullSegement(propertyName);\n            while (ch == ' ') {\n                next();\n            }\n\n            if (ch == '&' || ch == '|') {\n                filter = filterRest(filter);\n            }\n\n            if (acceptBracket) {\n                accept(']');\n            }\n            return filter;\n        }\n\n        if (acceptBracket && ch == ']') {\n            next();\n            Filter filter = new NotNullSegement(propertyName);\n            while (ch == ' ') {\n                next();\n            }\n\n            if (ch == '&' || ch == '|') {\n                filter = filterRest(filter);\n            }\n\n            if (predicateFlag) {\n                accept(')');\n            }\n\n            if (acceptBracket) {\n                accept(']');\n            }\n            return filter;\n        }\n\n        Operator op = readOp();\n\n        skipWhitespace();\n\n        if (op == Operator.BETWEEN || op == Operator.NOT_BETWEEN) {\n            final boolean not = (op == Operator.NOT_BETWEEN);\n\n            Object startValue = readValue();\n\n            String name = readName();\n\n            if (!\"and\".equalsIgnoreCase(name)) {\n                throw new JSONPathException(path);\n            }\n\n            Object endValue = readValue();\n\n            if (startValue == null || endValue == null) {\n                throw new JSONPathException(path);\n            }\n\n            if (isInt(startValue.getClass()) && isInt(endValue.getClass())) {\n                Filter filter = new IntBetweenSegement(propertyName, TypeUtils.longExtractValue((Number) startValue),\n                        TypeUtils.longExtractValue((Number) endValue), not);\n                return filter;\n            }\n\n            throw new JSONPathException(path);\n        }\n\n        // Other filter conditions\n\n        return null;\n    }\n\n    // Array segment handling\n\n    int start = pos - 1;\n    char startCh = ch;\n    while (ch != ']' && ch != '/' && !isEOF()) {\n        if (ch == '.' && !predicateFlag && startCh != '\\'') {\n            break;\n        }\n\n        if (ch == '\\\\') {\n            next();\n        }\n        next();\n    }\n\n    int end;\n    if (acceptBracket) {\n        end = pos - 1;\n    } else {\n        if (ch == '/' || ch == '.') {\n            end = pos - 1;\n        } else {\n            end = pos;\n        }\n    }\n\n    String text = path.substring(start, end);\n\n    if (text.indexOf(\"\\\\.\") != -1) {\n        String propName;\n        if (startCh == '\\'' && text.length() > 2 && text.charAt(text.length() - 1) == startCh) {\n            propName = text.substring(1, text.length() - 1);\n        } else {\n            propName = text.replaceAll(\"\\\\\\\\\\\\.\", \"\\\\.\");\n            if (propName.indexOf(\"\\\\-\") != -1) {\n                propName = propName.replaceAll(\"\\\\\\\\-\", \"-\");\n            }\n        }\n\n        if (predicateFlag) {\n            accept(')');\n        }\n\n        return new PropertySegment(propName, false);\n    }\n\n    Segment segment = buildArraySegement(text);\n\n    if (acceptBracket && !isEOF()) {\n        accept(']');\n    }\n\n    return segment;\n}",
        "patched_method_loc": [
            946,
            1104
        ],
        "status": "[CE]",
        "error_message": [
            "[42,24] package net.sf.json.util does not exist",
            "[43,24] package net.sf.json.util does not exist"
        ],
        "validation_time": 2.421448230743408
    },
    {
        "patch": null,
        "patched_method_loc": null,
        "status": null,
        "error_message": null,
        "validation_time": null
    },
    {
        "patch": null,
        "patched_method_loc": null,
        "status": null,
        "error_message": null,
        "validation_time": null
    },
    {
        "patch": "Object parseArrayAccessFilter(boolean acceptBracket) {\n    if (acceptBracket) {\n        accept('[');\n    }\n\n    boolean predicateFlag = false;\n\n    if (ch == '?') {\n        next();\n        accept('(');\n        predicateFlag = true;\n    }\n\n    if (predicateFlag || IOUtils.firstIdentifier(ch) || Character.isJavaIdentifierStart(ch) || ch == '\\\\' || ch == '@') {\n        String propertyName = readName();\n\n        skipWhitespace();\n\n        Operator op = readOp();\n\n        skipWhitespace();\n\n        if (op == Operator.IN || op == Operator.NOT_IN) {\n            List<Object> valueList = new ArrayList<>();\n            accept('(');\n            valueList.add(readValue());\n\n            while (ch == ',') {\n                next();\n                valueList.add(readValue());\n            }\n\n            accept(')');\n\n            if (op == Operator.IN) {\n                return new InSegement(propertyName, valueList.toArray(), false);\n            } else {\n                return new InSegement(propertyName, valueList.toArray(), true);\n            }\n        } else if (op == Operator.RLIKE || op == Operator.NOT_RLIKE || op == Operator.LIKE || op == Operator.NOT_LIKE) {\n            String strValue = readString();\n\n            if (op == Operator.RLIKE || op == Operator.NOT_RLIKE) {\n                return new RlikeSegement(propertyName, strValue, op == Operator.NOT_RLIKE);\n            } else {\n                return new LikeSegement(propertyName, strValue, op == Operator.NOT_LIKE);\n            }\n        } else {\n            Object value = readValue();\n\n            if (value instanceof Number) {\n                if (value instanceof Integer || value instanceof Long || value instanceof Short || value instanceof Byte) {\n                    return new IntOpSegement(propertyName, ((Number) value).longValue(), op);\n                } else {\n                    return new DoubleOpSegement(propertyName, ((Number) value).doubleValue(), op);\n                }\n            } else if (value instanceof String) {\n                return new StringOpSegement(propertyName, (String) value, op);\n            } else if (value instanceof Boolean) {\n                return new ValueSegment(propertyName, (Boolean) value, op == Operator.NE);\n            }\n        }\n    }\n\n    return null;\n}",
        "patched_method_loc": [
            941,
            1007
        ],
        "status": "[CE]",
        "error_message": [
            "[964,52] diamond operator is not supported in -source 1.5\n  (use -source 7 or higher to enable diamond operator)"
        ],
        "validation_time": 2.189574718475342
    },
    {
        "patch": null,
        "patched_method_loc": null,
        "status": null,
        "error_message": null,
        "validation_time": null
    },
    {
        "patch": null,
        "patched_method_loc": null,
        "status": null,
        "error_message": null,
        "validation_time": null
    },
    {
        "patch": "public Object parseArrayAccessFilter(boolean acceptBracket) {\n    if (acceptBracket) {\n        accept('[');\n    }\n\n    boolean predicateFlag = false;\n    int lparanCount = 0;\n\n    if (ch == '?') {\n        next();\n        accept('(');\n        lparanCount++;\n        while (ch == '(') {\n            next();\n            lparanCount++;\n        }\n        predicateFlag = true;\n    }\n\n    if (predicateFlag || IOUtils.firstIdentifier(ch) || Character.isJavaIdentifierStart(ch) || ch == '\\\\' || ch == '@') {\n        boolean self = false;\n        if (ch == '@') {\n            next();\n            accept('.');\n            self = true;\n        }\n        String propertyName = readName();\n\n        skipWhitespace();\n\n        if (predicateFlag && ch == ')') {\n            next();\n\n            Filter filter = new NotNullSegement(propertyName);\n            while (ch == ' ') {\n                next();\n            }\n\n            if (ch == '&' || ch == '|') {\n                filter = filterRest(filter);\n            }\n\n            if (acceptBracket) {\n                accept(']');\n            }\n            return filter;\n        }\n\n        if (acceptBracket && ch == ']') {\n            next();\n            Filter filter = new NotNullSegement(propertyName);\n            while (ch == ' ') {\n                next();\n            }\n\n            if (ch == '&' || ch == '|') {\n                filter = filterRest(filter);\n            }\n\n            if (predicateFlag) {\n                accept(')');\n            }\n\n            if (acceptBracket) {\n                accept(']');\n            }\n            return filter;\n        }\n\n        Operator op = readOp();\n\n        skipWhitespace();\n\n        if (op == Operator.BETWEEN || op == Operator.NOT_BETWEEN) {\n            final boolean not = (op == Operator.NOT_BETWEEN);\n\n            Object startValue = readValue();\n\n            String name = readName();\n\n            if (!\"and\".equalsIgnoreCase(name)) {\n                throw new JSONPathException(path);\n            }\n\n            Object endValue = readValue();\n\n            if (startValue == null || endValue == null) {\n                throw new JSONPathException(path);\n            }\n\n            if (isInt(startValue.getClass()) && isInt(endValue.getClass())) {\n                Filter filter = new IntBetweenSegement(propertyName, TypeUtils.longExtractValue((Number) startValue), TypeUtils.longExtractValue((Number) endValue), not);\n                return filter;\n            }\n\n            throw new JSONPathException(path);\n        }\n\n        // Handle other operators...\n\n        // Handle string, number, and other types of values...\n\n        // Handle other cases...\n\n        throw new JSONException(\"Unsupported operation or value type\");\n    }\n\n    // Handle other cases...\n\n    return null;\n}",
        "patched_method_loc": [
            948,
            1059
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_in_decimal#test_list_in_3_null: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_in_decimal#test_list_in_2: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_in_decimal#test_list_in_3: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_in_decimal#test_list_in: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_in_decimal#test_list_not_in_null: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_in_decimal#test_list_not_in: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.TestSpecial_3#test_special_1: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.TestSpecial_3#test_special_2: com.alibaba.fastjson.JSONPathException: : not support jsonpath : ['cpe-item']['title'][\\@xml\\:lang='en-US']['#text'][0]",
            "com.alibaba.json.bvt.path.TestSpecial_3#test_special: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_4#test_path: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $.10\\.0\\.1\\.1",
            "com.alibaba.json.bvt.issue_2700.Issue2792#test_for_issue: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_compare_int#test_list_map_ge: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_compare_int#test_list_map_gt: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_compare_int#test_list_map_le: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_compare_int#test_list_map_lt: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.issue_1100.Issue1112#test_for_issue_1: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $.123",
            "com.alibaba.json.bvt.issue_1100.Issue1112#test_for_issue_2: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $.345_xiu",
            "com.alibaba.json.bvt.issue_1100.Issue1112#test_for_issue_3: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $.345\\.xiu",
            "com.alibaba.json.bvt.path.JSONPath_set_test2#test_jsonpath: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $.array[0:].key",
            "com.alibaba.json.bvt.path.JSONPath_set_test4#test_jsonpath_1: com.alibaba.fastjson.JSONPathException: : not support jsonpath : /a[0]/b",
            "com.alibaba.json.bvt.path.JSONPath_like#test_like_not_match: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_like#test_like_not_match_1: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_set_test5#test_jsonpath_1: com.alibaba.fastjson.JSONPathException: : not support jsonpath : /a[0]/b[0]",
            "com.alibaba.json.bvt.path.JSONPath_set#test_object_not_exits: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $.values[0]",
            "com.alibaba.json.bvt.path.JSONPath_set#test_set_list: com.alibaba.fastjson.JSONPathException: : not support jsonpath : [0]",
            "com.alibaba.json.bvt.path.JSONPath_set#test_set_array: com.alibaba.fastjson.JSONPathException: : not support jsonpath : [0]",
            "com.alibaba.json.bvt.path.JSONPath_set#test_error: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $.values[0]",
            "com.alibaba.json.bvt.path.JSONPath_array_multi#test_list_multi: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $[2,4,5,8,100]",
            "com.alibaba.json.bvt.path.JSONPath_array_multi#test_list_multi_negative: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $[-1,-2,-100]",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_in_int#test_list_in_3_null: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_in_int#test_list_in_2: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_in_int#test_list_in_3: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_in_int#test_list_in: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_in_int#test_list_not_in_null: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_in_int#test_list_nin: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_in_int#test_list_not_in: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.issue_2200.Issue2264#test_for_issue: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.extract.JSONPath_extract_2_book#test_10: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.extract.JSONPath_extract_2_book#test_13: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $.store.book[3].author",
            "com.alibaba.json.bvt.path.extract.JSONPath_extract_2_book#test_15: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $[\"store\"][\"book\"][0]",
            "com.alibaba.json.bvt.path.extract.JSONPath_extract_2_book#test_16: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $.store.object.inner_object.array[0].inner_array[0].x",
            "com.alibaba.json.bvt.path.extract.JSONPath_extract_2_book#test_1: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $.store.book[*].author",
            "com.alibaba.json.bvt.path.extract.JSONPath_extract_2_book#test_6: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $..book[2]",
            "com.alibaba.json.bvt.path.extract.JSONPath_extract_2_book#test_7: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $..book[0,1]",
            "com.alibaba.json.bvt.path.extract.JSONPath_extract_2_book#test_8: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $..book[-2]",
            "com.alibaba.json.bvt.path.extract.JSONPath_extract_2_book#test_9: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $['store']['book'][0]['author']",
            "com.alibaba.json.bvt.path.extract.JSONPath_extract_3#test_0: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $[0]['gender']",
            "com.alibaba.json.bvt.path.extract.JSONPath_extract_3#test_1: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $[1]['gender']",
            "com.alibaba.json.bvt.path.extract.JSONPath_extract_3#test_2: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $[1]['name']",
            "com.alibaba.json.bvt.path.JSONPath_object_filter#test_object_filter: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_object_filter#test_object_filter_not_match: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.issue_2700.Issue2743#test_1: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $[3,4]",
            "com.alibaba.json.bvt.path.JSONPath_issue1208#test_largeNumberProperty: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $.articles.2147483647.XXX",
            "com.alibaba.json.bvt.issue_2300.Issue2306#test_for_issue: com.alibaba.fastjson.JSONPathException: : not support jsonpath : ['help_score_avg.cbm']",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_like_simple#test_list_like_match_two_segement_not: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_like_simple#test_list_like_right_not_match: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_like_simple#test_list_like_left_not_match: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_like_simple#test_list_like_contains: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_like_simple#test_list_like_right_match: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_like_simple#test_list_like_match_two_segement_2: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_like_simple#test_list_like_match_two_segement_3: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_like_simple#test_list_like_match_two_segement_2_not: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_like_simple#test_list_like_match_two_segement_3_not: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_like_simple#test_list_like_match_two_segement: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_like_simple#test_list_like_left_match: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_like_simple#test_list_like_extract: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_like_simple#test_list_like_not_contains: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_like_simple#test_list_not_like_extract: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_wildcard_filter_float#test_list_map_0: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_wildcard_filter_float#test_list_map_1: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_wildcard_filter_float#test_list_map_2: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.issue_1700.Issue1733_jsonpath#test_for_issue_or_1: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.issue_1700.Issue1733_jsonpath#test_for_issue: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.issue_1700.Issue1733_jsonpath#test_for_issue_or: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_none_root#test_root: com.alibaba.fastjson.JSONPathException: : not support jsonpath : [0]",
            "com.alibaba.json.bvt.bug.Issue1030#test_for_issue: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $.books[0:].pageWords[0:]",
            "com.alibaba.json.bvt.path.JSONPath_array_put#test_set: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $[0]",
            "com.alibaba.json.bvt.path.JSONPath_array_put#test_set_2: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $[0]",
            "com.alibaba.json.bvt.path.extract.JSONPath_extract_4_multi#test_0: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $[0]['gender','name']",
            "com.alibaba.json.bvt.path.extract.JSONPath_extract_4_multi#test_1: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $[0]['name','gender']",
            "com.alibaba.json.bvt.path.JSONPath_list_multi#test_list_multi: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $[2,4,5,8,100]",
            "com.alibaba.json.bvt.path.JSONPath_list_multi#test_list_multi_negative: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $[-1,-2,-100]",
            "com.alibaba.json.bvt.issue_2700.Issue2721Test#test2721: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_compare_int_simple#test_list: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_compare_int_simple#test_list_2: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access#test_list_map: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $['id']",
            "com.alibaba.json.bvt.path.JSONPath_list#test_list_map: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $[0].val",
            "com.alibaba.json.bvt.issue_1900.Issue1972#test_for_issue: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_wildcard_filter_double#test_list_map_0: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_wildcard_filter_double#test_list_map_1: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_wildcard_filter_double#test_list_map_2: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.ref.RefTest24#test_ref: junit.framework.ComparisonFailure: expected:<...igs\":{\"23299685@47\":[{\"$ref\":\"$.com\\\\.alibaba\\\\.extAppConfigs.23299685\\\\@47\"}]}}> but was:<...igs\":{\"23299685@47\":[null]}}>",
            "com.alibaba.json.bvt.path.JSONPath_11#test: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $[0,1][CN='t1c1CN']",
            "com.alibaba.json.bvt.path.JSONPath_2#test_path: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_compare_string#test_list_not_null: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_compare_string#test_eq: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_compare_string#test_list_eq_x: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_compare_string#test_list_eq: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_compare_string#test_list_ge: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_compare_string#test_list_gt: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_compare_string#test_list_le: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_compare_string#test_list_lt: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_compare_string#test_list_eq_null: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_12#test: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $['properties']['category_attributes']['properties']['Brand\\. Name']",
            "com.alibaba.json.bvt.issue_1400.Issue1445#test_for_issue: com.alibaba.fastjson.JSONPathException: : not support jsonpath : data.data.map.21160001",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_compare_string_simple#test_list_not_null: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_compare_string_simple#test_list_eq_x: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_compare_string_simple#test_list_eq: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_compare_string_simple#test_list_ge: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_compare_string_simple#test_list_gt: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_compare_string_simple#test_list_le: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_compare_string_simple#test_list_lt: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_compare_string_simple#test_list_eq_null: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.BookExtractTest#test_10: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $..book[0,1]",
            "com.alibaba.json.bvt.path.BookExtractTest#test_12: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.BookExtractTest#test_13: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.BookExtractTest#test_14: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.BookExtractTest#test_15: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.BookExtractTest#test_16: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.BookExtractTest#test_2: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $.store.book[*].author",
            "com.alibaba.json.bvt.path.BookExtractTest#test_8: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $..book[2]",
            "com.alibaba.json.bvt.path.BookExtractTest#test_9: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $..book[-1]",
            "com.alibaba.json.bvt.issue_2300.Issue2311#test_for_issue: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $.groups[*].timers[*].dps['1']",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_like#test_list_like_contains: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_like#test_list_like_right_match: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_like#test_list_like_match_two_segement_2: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_like#test_list_like_match_two_segement_3: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_like#test_list_like_match_two_segement: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_like#test_list_like_left_match: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_like#test_list_like_extract: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_like#test_list_not_like_extract: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_list_range#test_range_1: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $[:4]",
            "com.alibaba.json.bvt.path.JSONPath_list_range#test_range_2: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $[4:]",
            "com.alibaba.json.bvt.path.JSONPath_list_range#test_range_step: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $[2:8:2]",
            "com.alibaba.json.bvt.path.JSONPath_list_range#test_range: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $[2:4]",
            "com.alibaba.json.bvt.path.JSONPath_array_remove_0#test_remove: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $.aaa[0:1].age",
            "com.alibaba.json.bvt.path.BookEvalTest#test_10: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $..book[0,1]",
            "com.alibaba.json.bvt.path.BookEvalTest#test_12: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.BookEvalTest#test_13: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.BookEvalTest#test_14: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.BookEvalTest#test_15: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.BookEvalTest#test_16: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.BookEvalTest#test_2: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $.store.book[*].author",
            "com.alibaba.json.bvt.path.BookEvalTest#test_8: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $..book[2]",
            "com.alibaba.json.bvt.path.BookEvalTest#test_9: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $..book[-1]",
            "com.alibaba.json.bvt.parser.number.NumberValueTest_error_13#test_jsonpath_1: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.parser.number.NumberValueTest_error_13#test_jsonpath_2: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.bug.Issue799#test_for_issue: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $.array[0:-1].bizData",
            "com.alibaba.json.bvt.path.JSONPointTest_1#test_key_1: com.alibaba.fastjson.JSONPathException: : not support jsonpath : /0/name",
            "com.alibaba.json.bvt.path.JSONPath_oracle_compatible_test#test_reserve: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $.store.book[0].title",
            "com.alibaba.json.bvt.issue_1600.Issue1627#test_for_issue: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $.101a0\\.test\\-b",
            "com.alibaba.json.bvt.issue_2700.Issue2791#test_for_issue1: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.issue_2700.Issue2791#test_for_issue2: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.issue_2700.Issue2791#test_for_issue3: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.issue_2700.Issue2791#test_for_issue: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_rlike#test_list_like_contains: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_rlike#test_list_like_right_match: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_rlike#test_list_like_match_two_segement_2: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_rlike#test_list_like_match_two_segement_3: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_rlike#test_list_like_match_two_segement: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_rlike#test_list_like_left_match: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_rlike#test_list_like_extract: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_rlike#test_list_not_like_extract: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_wildcard_filter#test_list_map_0: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_wildcard_filter#test_list_map_1: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_wildcard_filter#test_list_map_2: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.TestSpecial_1#test_special: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $.10\\.0\\.0\\.1",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_in_string#test_list_in_2: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_in_string#test_list_in_3: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_in_string#test_list_in: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_filter_in_string#test_list_not_in: com.alibaba.fastjson.JSONException: : Unsupported operation or value type",
            "com.alibaba.json.bvt.path.JSONPath_field_access_multi#test_list_map2: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $.entity['id','name']",
            "com.alibaba.json.bvt.path.JSONPath_field_access_multi#test_list_map: com.alibaba.fastjson.JSONPathException: : not support jsonpath : $['id','name']",
            "com.alibaba.json.bvt.issue_2100.Issue2189#test_for_issue_1: com.alibaba.fastjson.JSONException: : Unsupported operation or value type"
        ],
        "validation_time": 84.56656742095947
    }
]