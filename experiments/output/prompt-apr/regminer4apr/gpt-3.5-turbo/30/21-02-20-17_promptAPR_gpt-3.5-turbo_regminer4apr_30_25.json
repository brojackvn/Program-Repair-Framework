{
    "0": {
        "patch": "public String[] rowParsed() {\n    if (column > 0) {\n        if (!columnsToExtractInitialized) {\n            initializeHeaders();\n            if (settings.isHeaderExtractionEnabled()) {\n                Arrays.fill(parsedValues, null);\n                column = 0;\n                this.appender = appenders[0];\n                return null;\n            } else if (!columnsReordered && selectedIndexes != null) {\n                String[] out = new String[column];\n                for (int i = 0; i < selectedIndexes.length; i++) {\n                    int index = selectedIndexes[i];\n                    if (index >= 0 && index < column) {\n                        out[index] = parsedValues[index];\n                    }\n                }\n                column = 0;\n                return out;\n            }\n        }\n\n        currentRecord++;\n        if (columnsReordered) {\n            if(selectedIndexes != null && selectedIndexes.length == 0){\n                return ArgumentUtils.EMPTY_STRING_ARRAY;\n            }\n            String[] reorderedValues = new String[selectedIndexes.length];\n            for (int i = 0; i < selectedIndexes.length; i++) {\n                int index = selectedIndexes[i];\n                if (index >= 0 && index < column) {\n                    reorderedValues[i] = parsedValues[index];\n                } else {\n                    reorderedValues[i] = nullValue;\n                }\n            }\n            column = 0;\n            this.appender = appenders[0];\n            return reorderedValues;\n        } else {\n            int last = columnReorderingEnabledSetting ? column : Math.min(column, headers.length);\n\n            String[] out = new String[last];\n            System.arraycopy(parsedValues, 0, out, 0, last);\n            column = 0;\n            this.appender = appenders[0];\n            return out;\n        }\n    } else if (!skipEmptyLines) {\n        if (!columnsToExtractInitialized) {\n            initializeHeaders();\n        }\n\n        currentRecord++;\n\n        if (columnsReordered) {\n            if(selectedIndexes != null && selectedIndexes.length == 0){\n                return ArgumentUtils.EMPTY_STRING_ARRAY;\n            }\n            String[] out = new String[selectedIndexes.length];\n            Arrays.fill(out, nullValue);\n            return out;\n        }\n\n        return ArgumentUtils.EMPTY_STRING_ARRAY;\n    }\n\n    return null;\n}",
        "patched_method_loc": [
            154,
            223
        ],
        "status": "[FE]",
        "error_message": [
            "com.univocity.parsers.issues.github.Github_250#testParseInputNoIndexSelected: com.univocity.parsers.common.TextParsingException: java.lang.ArrayIndexOutOfBoundsException - 2"
        ],
        "validation_time": 18.21970796585083
    },
    "1": {
        "patch": "public String[] rowParsed() {\n    if (column > 0) {\n        if (!columnsToExtractInitialized) {\n            initializeHeaders();\n            if (settings.isHeaderExtractionEnabled()) {\n                Arrays.fill(parsedValues, null);\n                column = 0;\n                this.appender = appenders[0];\n                return null;\n            } else if (!columnsReordered && selectedIndexes != null) {\n                String[] out = new String[selectedIndexes.length];\n                for (int i = 0; i < selectedIndexes.length; i++) {\n                    int index = selectedIndexes[i];\n                    if (index < column) {\n                        out[i] = parsedValues[index];\n                    }\n                }\n                column = 0;\n                return out;\n            }\n        }\n\n        currentRecord++;\n\n        if (columnsReordered) {\n            if (selectedIndexes.length == 0) {\n                column = 0;\n                return ArgumentUtils.EMPTY_STRING_ARRAY;\n            }\n            String[] reorderedValues = new String[selectedIndexes.length];\n            for (int i = 0; i < selectedIndexes.length; i++) {\n                int index = selectedIndexes[i];\n                if (index >= column || index == -1) {\n                    reorderedValues[i] = nullValue;\n                } else {\n                    reorderedValues[i] = parsedValues[index];\n                }\n            }\n            column = 0;\n            this.appender = appenders[0];\n            return reorderedValues;\n        } else {\n            int last = columnReorderingEnabledSetting ? column : (column < headers.length ? headers.length : column);\n\n            String[] out = new String[last];\n            System.arraycopy(parsedValues, 0, out, 0, Math.min(column, last));\n            column = 0;\n            this.appender = appenders[0];\n            return out;\n        }\n    } else if (!skipEmptyLines) {\n        if (!columnsToExtractInitialized) {\n            initializeHeaders();\n        }\n\n        currentRecord++;\n\n        if (columnsReordered) {\n            if (selectedIndexes.length == 0) {\n                return ArgumentUtils.EMPTY_STRING_ARRAY;\n            }\n            String[] out = new String[selectedIndexes.length];\n            Arrays.fill(out, nullValue);\n            return out;\n        }\n\n        return ArgumentUtils.EMPTY_STRING_ARRAY;\n    }\n    return null;\n}",
        "patched_method_loc": [
            154,
            224
        ],
        "status": "[FE]",
        "error_message": [
            "com.univocity.parsers.csv.CsvParserTest#testColumnReorderingWithUserProvidedHeaders: java.lang.AssertionError: null: lists don't have the same size expected [3] but found [2]",
            "com.univocity.parsers.csv.CsvWriterTest#testColumnReorderingWithUserProvidedHeaders: java.lang.AssertionError: null: lists don't have the same size expected [3] but found [2]"
        ],
        "validation_time": 18.077075958251953
    },
    "2": {
        "patch": "public String[] rowParsed() {\n    if (column > 0) {\n        if (!columnsToExtractInitialized) {\n            initializeHeaders();\n        }\n\n        currentRecord++;\n\n        if (columnsReordered) {\n            if(selectedIndexes == null || selectedIndexes.length == 0){\n                return ArgumentUtils.EMPTY_STRING_ARRAY;\n            }\n\n            String[] reorderedValues = new String[selectedIndexes.length];\n            for (int i = 0; i < selectedIndexes.length; i++) {\n                int index = selectedIndexes[i];\n                if (index < column && index >= 0) {\n                    reorderedValues[i] = parsedValues[index];\n                } else {\n                    reorderedValues[i] = nullValue;\n                }\n            }\n\n            column = 0;\n            this.appender = appenders[0];\n            return reorderedValues;\n        } else {\n            int last = columnReorderingEnabledSetting ? column : (column < headers.length ? headers.length : column);\n\n            String[] out = new String[last];\n            System.arraycopy(parsedValues, 0, out, 0, Math.min(column, last));\n            column = 0;\n            this.appender = appenders[0];\n            return out;\n        }\n    } else if (!skipEmptyLines) {\n        if (!columnsToExtractInitialized) {\n            initializeHeaders();\n        }\n\n        currentRecord++;\n\n        if (columnsReordered) {\n            if(selectedIndexes == null || selectedIndexes.length == 0){\n                return ArgumentUtils.EMPTY_STRING_ARRAY;\n            }\n\n            String[] out = new String[selectedIndexes.length];\n            Arrays.fill(out, nullValue);\n            return out;\n        }\n\n        return ArgumentUtils.EMPTY_STRING_ARRAY;\n    }\n\n    return null;\n}",
        "patched_method_loc": [
            154,
            211
        ],
        "status": "[FE]",
        "error_message": [
            "com.univocity.parsers.issues.github.Github_250#testParseInputNoIndexSelected: com.univocity.parsers.common.TextParsingException: java.lang.ArrayIndexOutOfBoundsException - 2",
            "com.univocity.parsers.common.routine.AbstractRoutinesTest#testInputDimensionRoutine: java.lang.AssertionError: expected [3] but found [4]",
            "com.univocity.parsers.common.routine.AbstractRoutinesTest#testParseAndWrite: java.lang.AssertionError: expected [ac, abs, moon",
            "com.univocity.parsers.csv.CsvParserTest#columnSelectionTest: java.lang.AssertionError: Lists differ at element [0]: a != ha expected [a] but found [ha]",
            "com.univocity.parsers.csv.CsvParserTest#parse3Records: java.lang.AssertionError: Lists differ at element [0]: 1997 != Year expected [1997] but found [Year]",
            "com.univocity.parsers.csv.CsvParserTest#parse3Records: java.lang.AssertionError: Lists differ at element [0]: 1997 != Year expected [1997] but found [Year]",
            "com.univocity.parsers.csv.CsvParserTest#parse3Records: java.lang.AssertionError: Lists differ at element [0]: 1997 != Year expected [1997] but found [Year]",
            "com.univocity.parsers.csv.CsvParserTest#parse3Records: java.lang.AssertionError: Lists differ at element [0]: 1997 != Year expected [1997] but found [Year]",
            "com.univocity.parsers.csv.CsvParserTest#parse3Records: java.lang.AssertionError: Lists differ at element [0]: 1997 != Year expected [1997] but found [Year]",
            "com.univocity.parsers.csv.CsvParserTest#parse3Records: java.lang.AssertionError: Lists differ at element [0]: 1997 != Year expected [1997] but found [Year]",
            "com.univocity.parsers.csv.CsvParserTest#parseColumns: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvParserTest#parseColumns: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvParserTest#parseColumns: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvParserTest#parseColumns: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvParserTest#parseColumns: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvParserTest#parseColumns: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvParserTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvParserTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvParserTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvParserTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvParserTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvParserTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvParserTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvParserTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvParserTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvParserTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvParserTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvParserTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvParserTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [17]",
            "com.univocity.parsers.csv.CsvParserTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [17]",
            "com.univocity.parsers.csv.CsvParserTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [17]",
            "com.univocity.parsers.csv.CsvParserTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [17]",
            "com.univocity.parsers.csv.CsvParserTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [17]",
            "com.univocity.parsers.csv.CsvParserTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [17]",
            "com.univocity.parsers.common.processor.MultiBeanListProcessorTest#testMultiBeanProcessor: java.lang.AssertionError: expected [2] but found [3]",
            "com.univocity.parsers.common.processor.BatchedColumnProcessorTest#testColumnValues: com.univocity.parsers.common.DataProcessingException: Unexpected error processing input row [1A, 1B, 1C] using Processor com.univocity.parsers.common.processor.BatchedColumnProcessorTest$1.",
            "com.univocity.parsers.common.processor.MasterDetailProcessorTest#testMasterDetail: com.univocity.parsers.common.DataProcessingException: Error converting value 'type' using conversion com.univocity.parsers.conversions.IntegerConversion",
            "com.univocity.parsers.common.processor.ObjectColumnProcessorTest#testColumnValues: com.univocity.parsers.common.DataProcessingException: Error converting value 'A' using conversion com.univocity.parsers.conversions.IntegerConversion",
            "com.univocity.parsers.common.processor.ConcurrentRowProcessorTest#concurrentRowProcessorTest: java.lang.AssertionError: expected [5000] but found [5001]",
            "com.univocity.parsers.common.processor.ConcurrentRowProcessorTest#concurrentRowProcessorTest: java.lang.AssertionError: expected [5000] but found [5001]",
            "com.univocity.parsers.common.processor.ConcurrentRowProcessorTest#concurrentRowProcessorTest: java.lang.AssertionError: expected [5000] but found [5001]",
            "com.univocity.parsers.common.processor.ConcurrentRowProcessorTest#concurrentRowProcessorTest: java.lang.AssertionError: expected [5000] but found [5001]",
            "com.univocity.parsers.common.processor.ConcurrentRowProcessorTest#concurrentRowProcessorTest: java.lang.AssertionError: expected [5000] but found [5001]",
            "com.univocity.parsers.common.processor.ConcurrentRowProcessorTest#concurrentRowProcessorTest: java.lang.AssertionError: expected [5000] but found [5001]",
            "com.univocity.parsers.common.processor.ConcurrentRowProcessorTest#concurrentRowProcessorTest: java.lang.AssertionError: expected [5000] but found [5001]",
            "com.univocity.parsers.common.processor.ConcurrentRowProcessorTest#ensureContextIsPreserved: com.univocity.parsers.common.TextParsingException: java.lang.AssertionError - expected [A,B,C,D,E,F,G",
            "com.univocity.parsers.common.processor.ColumnProcessorTest#testColumnValues: java.lang.AssertionError: null: lists don't have the same size expected [4] but found [5]",
            "com.univocity.parsers.common.processor.BatchedObjectColumnProcessorTest#testColumnValues: com.univocity.parsers.common.DataProcessingException: Error converting value 'A' using conversion com.univocity.parsers.conversions.IntegerConversion",
            "com.univocity.parsers.common.processor.ObjectRowListProcessorTest#conversionTest: com.univocity.parsers.common.DataProcessingException: Cannot parse 'date' as a valid date of locale 'en'. Supported formats are: [dd-MMM-yyyy, yyyy-MM-dd]",
            "com.univocity.parsers.common.processor.ObjectRowListProcessorTest#conversionTest: com.univocity.parsers.common.DataProcessingException: Cannot parse 'date' as a valid date of locale 'en'. Supported formats are: [dd-MMM-yyyy, yyyy-MM-dd]",
            "com.univocity.parsers.common.processor.ObjectRowListProcessorTest#conversionTestOnSelectedColumnsWithReordering: com.univocity.parsers.common.DataProcessingException: Error converting value 'amount' using conversion com.univocity.parsers.conversions.BigDecimalConversion",
            "com.univocity.parsers.common.processor.ObjectRowListProcessorTest#conversionTestOnSelectedColumnsWithReordering: com.univocity.parsers.common.DataProcessingException: Error converting value 'amount' using conversion com.univocity.parsers.conversions.BigDecimalConversion",
            "com.univocity.parsers.common.processor.ObjectRowListProcessorTest#conversionTestOnSelectedColumnsWithoutColumnReordering: com.univocity.parsers.common.DataProcessingException: Error converting value 'amount' using conversion com.univocity.parsers.conversions.BigDecimalConversion",
            "com.univocity.parsers.common.processor.ObjectRowListProcessorTest#conversionTestOnSelectedColumnsWithoutColumnReordering: com.univocity.parsers.common.DataProcessingException: Error converting value 'amount' using conversion com.univocity.parsers.conversions.BigDecimalConversion",
            "com.univocity.parsers.tsv.TsvParserTest#columnSelectionTest: java.lang.AssertionError: expected [1] but found [2]",
            "com.univocity.parsers.tsv.TsvParserTest#parse3Records: java.lang.AssertionError: Lists differ at element [0]: 1997 != Year expected [1997] but found [Year]",
            "com.univocity.parsers.tsv.TsvParserTest#parse3Records: java.lang.AssertionError: Lists differ at element [0]: 1997 != Year expected [1997] but found [Year]",
            "com.univocity.parsers.tsv.TsvParserTest#parse3Records: java.lang.AssertionError: Lists differ at element [0]: 1997 != Year expected [1997] but found [Year]",
            "com.univocity.parsers.tsv.TsvParserTest#parse3Records: java.lang.AssertionError: Lists differ at element [0]: 1997 != Year expected [1997] but found [Year]",
            "com.univocity.parsers.tsv.TsvParserTest#parse3Records: java.lang.AssertionError: Lists differ at element [0]: 1997 != Year expected [1997] but found [Year]",
            "com.univocity.parsers.tsv.TsvParserTest#parseColumns: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvParserTest#parseColumns: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvParserTest#parseColumns: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvParserTest#parseColumns: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvParserTest#parseColumns: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvParserTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvParserTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvParserTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvParserTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvParserTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvParserTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvParserTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvParserTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvParserTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvParserTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvParserTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [17]",
            "com.univocity.parsers.tsv.TsvParserTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [17]",
            "com.univocity.parsers.tsv.TsvParserTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [17]",
            "com.univocity.parsers.tsv.TsvParserTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [17]",
            "com.univocity.parsers.tsv.TsvParserTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [17]",
            "com.univocity.parsers.tsv.TsvParserTest#testFieldSelectionWithMismatchingNames: java.lang.AssertionError: expected [2] but found [h2]",
            "com.univocity.parsers.tsv.TsvWriterTest#columnSelectionTest: java.lang.AssertionError: expected [1] but found [2]",
            "com.univocity.parsers.tsv.TsvWriterTest#parse3Records: java.lang.AssertionError: Lists differ at element [0]: 1997 != Year expected [1997] but found [Year]",
            "com.univocity.parsers.tsv.TsvWriterTest#parse3Records: java.lang.AssertionError: Lists differ at element [0]: 1997 != Year expected [1997] but found [Year]",
            "com.univocity.parsers.tsv.TsvWriterTest#parse3Records: java.lang.AssertionError: Lists differ at element [0]: 1997 != Year expected [1997] but found [Year]",
            "com.univocity.parsers.tsv.TsvWriterTest#parse3Records: java.lang.AssertionError: Lists differ at element [0]: 1997 != Year expected [1997] but found [Year]",
            "com.univocity.parsers.tsv.TsvWriterTest#parse3Records: java.lang.AssertionError: Lists differ at element [0]: 1997 != Year expected [1997] but found [Year]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseColumns: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseColumns: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseColumns: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseColumns: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseColumns: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [17]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [17]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [17]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [17]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [17]",
            "com.univocity.parsers.tsv.TsvWriterTest#testFieldSelectionWithMismatchingNames: java.lang.AssertionError: expected [2] but found [h2]",
            "com.univocity.parsers.tsv.TsvWriterTest#writeSelectedColumnOnly: java.lang.AssertionError: expected [8] but found [9]",
            "com.univocity.parsers.tsv.TsvWriterTest#writeSelectedColumnOnly: java.lang.AssertionError: expected [8] but found [9]",
            "com.univocity.parsers.tsv.TsvWriterTest#writeSelectedColumnOnly: java.lang.AssertionError: expected [8] but found [9]",
            "com.univocity.parsers.tsv.TsvWriterTest#writeSelectedColumnOnly: java.lang.AssertionError: expected [8] but found [9]",
            "com.univocity.parsers.tsv.TsvWriterTest#writeTest: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvWriterTest#writeTest: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvWriterTest#writeTest: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.tsv.TsvWriterTest#writeTest: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.fixed.FixedWidthWriterTest#testFixedWidthParser: java.lang.AssertionError: expected [5] but found [6]",
            "com.univocity.parsers.fixed.FixedWidthWriterTest#testFixedWidthParser: java.lang.AssertionError: expected [5] but found [6]",
            "com.univocity.parsers.fixed.FixedWidthWriterTest#testFixedWidthParser: java.lang.AssertionError: expected [5] but found [6]",
            "com.univocity.parsers.fixed.FixedWidthWriterTest#testFixedWidthParser: java.lang.AssertionError: expected [5] but found [6]",
            "com.univocity.parsers.fixed.FixedWidthWriterTest#testFixedWidthParser: java.lang.AssertionError: expected [5] but found [6]",
            "com.univocity.parsers.fixed.FixedWidthWriterTest#testFixedWidthParser: java.lang.AssertionError: expected [5] but found [6]",
            "com.univocity.parsers.fixed.FixedWidthWriterTest#testParsingWithPaddingPerField: java.lang.AssertionError: Lists differ at element [0]: ziel0 != ziel expected [ziel0] but found [ziel]",
            "com.univocity.parsers.fixed.FixedWidthWriterTest#testWriter: java.lang.AssertionError: expected [5] but found [6]",
            "com.univocity.parsers.fixed.FixedWidthWriterTest#testWriter: java.lang.AssertionError: expected [5] but found [6]",
            "com.univocity.parsers.fixed.FixedWidthWriterTest#testWriterWithSpacesAndOverflow: java.lang.AssertionError: expected [3] but found [4]",
            "com.univocity.parsers.fixed.FixedWidthWriterTest#testWriterWithSpacesAndOverflow: java.lang.AssertionError: expected [3] but found [4]",
            "com.univocity.parsers.fixed.FixedWidthParserTest#testFixedWidthParser: java.lang.AssertionError: expected [5] but found [6]",
            "com.univocity.parsers.fixed.FixedWidthParserTest#testFixedWidthParser: java.lang.AssertionError: expected [5] but found [6]",
            "com.univocity.parsers.fixed.FixedWidthParserTest#testFixedWidthParser: java.lang.AssertionError: expected [5] but found [6]",
            "com.univocity.parsers.fixed.FixedWidthParserTest#testFixedWidthParser: java.lang.AssertionError: expected [5] but found [6]",
            "com.univocity.parsers.fixed.FixedWidthParserTest#testFixedWidthParser: java.lang.AssertionError: expected [5] but found [6]",
            "com.univocity.parsers.fixed.FixedWidthParserTest#testFixedWidthParser: java.lang.AssertionError: expected [5] but found [6]",
            "com.univocity.parsers.fixed.FixedWidthParserTest#testParsingWithPaddingPerField: java.lang.AssertionError: Lists differ at element [0]: ziel0 != ziel expected [ziel0] but found [ziel]",
            "com.univocity.parsers.csv.CsvWriterTest#columnSelectionTest: java.lang.AssertionError: Lists differ at element [0]: a != ha expected [a] but found [ha]",
            "com.univocity.parsers.csv.CsvWriterTest#parse3Records: java.lang.AssertionError: Lists differ at element [0]: 1997 != Year expected [1997] but found [Year]",
            "com.univocity.parsers.csv.CsvWriterTest#parse3Records: java.lang.AssertionError: Lists differ at element [0]: 1997 != Year expected [1997] but found [Year]",
            "com.univocity.parsers.csv.CsvWriterTest#parse3Records: java.lang.AssertionError: Lists differ at element [0]: 1997 != Year expected [1997] but found [Year]",
            "com.univocity.parsers.csv.CsvWriterTest#parse3Records: java.lang.AssertionError: Lists differ at element [0]: 1997 != Year expected [1997] but found [Year]",
            "com.univocity.parsers.csv.CsvWriterTest#parse3Records: java.lang.AssertionError: Lists differ at element [0]: 1997 != Year expected [1997] but found [Year]",
            "com.univocity.parsers.csv.CsvWriterTest#parse3Records: java.lang.AssertionError: Lists differ at element [0]: 1997 != Year expected [1997] but found [Year]",
            "com.univocity.parsers.csv.CsvWriterTest#parseColumns: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvWriterTest#parseColumns: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvWriterTest#parseColumns: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvWriterTest#parseColumns: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvWriterTest#parseColumns: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvWriterTest#parseColumns: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvWriterTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvWriterTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvWriterTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvWriterTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvWriterTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvWriterTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvWriterTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvWriterTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvWriterTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvWriterTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvWriterTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvWriterTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvWriterTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [17]",
            "com.univocity.parsers.csv.CsvWriterTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [17]",
            "com.univocity.parsers.csv.CsvWriterTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [17]",
            "com.univocity.parsers.csv.CsvWriterTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [17]",
            "com.univocity.parsers.csv.CsvWriterTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [17]",
            "com.univocity.parsers.csv.CsvWriterTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [17]",
            "com.univocity.parsers.csv.CsvWriterTest#writeSelectedColumnOnly: java.lang.AssertionError: expected [8] but found [9]",
            "com.univocity.parsers.csv.CsvWriterTest#writeSelectedColumnOnly: java.lang.AssertionError: expected [8] but found [9]",
            "com.univocity.parsers.csv.CsvWriterTest#writeSelectedColumnOnly: java.lang.AssertionError: expected [8] but found [9]",
            "com.univocity.parsers.csv.CsvWriterTest#writeSelectedColumnOnly: java.lang.AssertionError: expected [8] but found [9]",
            "com.univocity.parsers.csv.CsvWriterTest#writeTest: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvWriterTest#writeTest: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvWriterTest#writeTest: java.lang.AssertionError: expected [15] but found [16]",
            "com.univocity.parsers.csv.CsvWriterTest#writeTest: java.lang.AssertionError: expected [15] but found [16]"
        ],
        "validation_time": 18.356789588928223
    },
    "3": {
        "patch": "public String[] rowParsed() {\n    if (column > 0) {\n        if (!columnsToExtractInitialized) {\n            initializeHeaders();\n            if (settings.isHeaderExtractionEnabled()) {\n                Arrays.fill(parsedValues, null);\n                column = 0;\n                this.appender = appenders[0];\n                return null;\n            } else if (!columnsReordered && selectedIndexes != null) {\n                String[] out = new String[column];\n                for (int i = 0; i < selectedIndexes.length; i++) {\n                    int index = selectedIndexes[i];\n                    if (index >= 0 && index < column) {\n                        out[index] = parsedValues[index];\n                    }\n                }\n                column = 0;\n                return out;\n            }\n        }\n\n        currentRecord++;\n        if (columnsReordered) {\n            if (selectedIndexes != null && selectedIndexes.length > 0) {\n                String[] reorderedValues = new String[selectedIndexes.length];\n                for (int i = 0; i < selectedIndexes.length; i++) {\n                    int index = selectedIndexes[i];\n                    if (index >= 0 && index < column) {\n                        reorderedValues[i] = parsedValues[index];\n                    } else {\n                        reorderedValues[i] = nullValue;\n                    }\n                }\n                column = 0;\n                this.appender = appenders[0];\n                return reorderedValues;\n            } else {\n                return ArgumentUtils.EMPTY_STRING_ARRAY;\n            }\n        } else {\n            int last = columnReorderingEnabledSetting ? column : Math.min(headers.length, column);\n\n            String[] out = new String[last];\n            System.arraycopy(parsedValues, 0, out, 0, column);\n            column = 0;\n            this.appender = appenders[0];\n            return out;\n        }\n    } else if (!skipEmptyLines) {\n        if (!columnsToExtractInitialized) {\n            initializeHeaders();\n        }\n\n        currentRecord++;\n\n        if (columnsReordered) {\n            if (selectedIndexes != null && selectedIndexes.length > 0) {\n                String[] out = new String[selectedIndexes.length];\n                Arrays.fill(out, nullValue);\n                return out;\n            } else {\n                return ArgumentUtils.EMPTY_STRING_ARRAY;\n            }\n        }\n\n        return ArgumentUtils.EMPTY_STRING_ARRAY;\n    }\n\n    return null;\n}",
        "patched_method_loc": [
            154,
            225
        ],
        "status": "[FE]",
        "error_message": [
            "com.univocity.parsers.issues.github.Github_250#testParseInputNoIndexSelected: com.univocity.parsers.common.TextParsingException: java.lang.ArrayIndexOutOfBoundsException - 2"
        ],
        "validation_time": 18.39835786819458
    },
    "4": {
        "patch": "public String[] rowParsed() {\n    // some values were parsed. Let's return them\n    if (column > 0) {\n        if (!columnsToExtractInitialized) {\n            initializeHeaders();\n        }\n\n        if (settings.isHeaderExtractionEnabled()) {\n            Arrays.fill(parsedValues, null);\n            column = 0;\n            this.appender = appenders[0];\n            return null;\n        } else if (!columnsReordered && selectedIndexes != null) {\n            String[] out = new String[selectedIndexes.length];\n            for (int i = 0; i < selectedIndexes.length; i++) {\n                int index = selectedIndexes[i];\n                if (index < column) {\n                    out[i] = parsedValues[index];\n                }\n            }\n            column = 0;\n            return out;\n        }\n\n        currentRecord++;\n\n        if (columnsReordered) {\n            if (selectedIndexes.length == 0) {\n                return ArgumentUtils.EMPTY_STRING_ARRAY;\n            }\n            String[] reorderedValues = new String[selectedIndexes.length];\n            for (int i = 0; i < selectedIndexes.length; i++) {\n                int index = selectedIndexes[i];\n                if (index >= column || index == -1) {\n                    reorderedValues[i] = nullValue;\n                } else {\n                    reorderedValues[i] = parsedValues[index];\n                }\n            }\n            column = 0;\n            this.appender = appenders[0];\n            return reorderedValues;\n        } else {\n            int last = columnReorderingEnabledSetting ? column : (column < headers.length ? headers.length : column);\n\n            String[] out = new String[last];\n            System.arraycopy(parsedValues, 0, out, 0, column);\n            column = 0;\n            this.appender = appenders[0];\n            return out;\n        }\n    } else if (!skipEmptyLines) { // no values were parsed, but we are not skipping empty lines\n        if (!columnsToExtractInitialized) {\n            initializeHeaders();\n        }\n\n        currentRecord++;\n\n        if (columnsReordered) {\n            if (selectedIndexes.length == 0) {\n                return ArgumentUtils.EMPTY_STRING_ARRAY;\n            }\n            String[] out = new String[selectedIndexes.length];\n            Arrays.fill(out, nullValue);\n            return out;\n        }\n\n        return ArgumentUtils.EMPTY_STRING_ARRAY;\n    }\n\n    // no values were parsed and we do not care about empty lines.\n    return null;\n}",
        "patched_method_loc": [
            154,
            227
        ],
        "status": "[FE]",
        "error_message": [
            "com.univocity.parsers.issues.github.Github_250#testParseInputNoIndexSelected: com.univocity.parsers.common.TextParsingException: java.lang.ArrayIndexOutOfBoundsException - 2",
            "com.univocity.parsers.common.routine.AbstractRoutinesTest#testInputDimensionRoutine: java.lang.AssertionError: expected [3] but found [1]",
            "com.univocity.parsers.common.routine.AbstractRoutinesTest#testIterateJavaBeans: java.lang.AssertionError: expected [2] but found [0]",
            "com.univocity.parsers.common.routine.AbstractRoutinesTest#testParseAllJavaBeans: java.lang.AssertionError: expected [false] but found [true]",
            "com.univocity.parsers.common.routine.AbstractRoutinesTest#testParseAndWrite: java.lang.AssertionError: expected [ac, abs, moon",
            "com.univocity.parsers.common.routine.AbstractRoutinesTest#testWriteAllJavaBeans: java.lang.AssertionError: expected [1,555.999,yes,,?",
            "com.univocity.parsers.csv.CsvParserTest#columnSelectionTest: java.lang.AssertionError: Arrays not equal: [a, c, e] and null",
            "com.univocity.parsers.csv.CsvParserTest#parse3Records: java.lang.AssertionError: expected [3] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parse3Records: java.lang.AssertionError: expected [3] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parse3Records: java.lang.AssertionError: expected [3] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parse3Records: java.lang.AssertionError: expected [3] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parse3Records: java.lang.AssertionError: expected [3] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parse3Records: java.lang.AssertionError: expected [3] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parseColumns: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parseColumns: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parseColumns: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parseColumns: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parseColumns: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parseColumns: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [0]",
            "com.univocity.parsers.csv.CsvParserTest#testColumnReorderingWithUserProvidedHeaders: java.lang.AssertionError: null: lists don't have the same size expected [3] but found [2]",
            "com.univocity.parsers.annotations.meta.MetaAnnotationTest#testParseWithMetaAnnotation: java.lang.AssertionError: expected [1] but found [0]",
            "com.univocity.parsers.common.processor.MultiBeanListProcessorTest#testAnnotatedBeanProcessor: java.lang.AssertionError: expected [2] but found [0]",
            "com.univocity.parsers.common.processor.MultiBeanListProcessorTest#testAnnotatedBeanProcessorWithOneFieldOnly: java.lang.AssertionError: expected [2] but found [0]",
            "com.univocity.parsers.common.processor.MultiBeanListProcessorTest#testAnnotatedBeanWithLessColumns: java.lang.IndexOutOfBoundsException: Index: 0, Size: 0",
            "com.univocity.parsers.common.processor.MultiBeanListProcessorTest#testMultiBeanProcessor: java.lang.AssertionError: expected [2] but found [0]",
            "com.univocity.parsers.common.processor.MasterDetailProcessorTest#testMasterDetail: com.univocity.parsers.common.TextParsingException: java.lang.NullPointerException - null",
            "com.univocity.parsers.common.processor.MasterDetailProcessorTest#testMasterDetail: java.lang.AssertionError: expected [2] but found [0]",
            "com.univocity.parsers.common.processor.ObjectColumnProcessorTest#testColumnValues: java.lang.NullPointerException:: null",
            "com.univocity.parsers.common.processor.ConcurrentRowProcessorTest#concurrentRowProcessorTest: java.lang.NullPointerException:: null",
            "com.univocity.parsers.common.processor.ConcurrentRowProcessorTest#concurrentRowProcessorTest: java.lang.NullPointerException:: null",
            "com.univocity.parsers.common.processor.ConcurrentRowProcessorTest#concurrentRowProcessorTest: java.lang.NullPointerException:: null",
            "com.univocity.parsers.common.processor.ConcurrentRowProcessorTest#concurrentRowProcessorTest: java.lang.NullPointerException:: null",
            "com.univocity.parsers.common.processor.ConcurrentRowProcessorTest#concurrentRowProcessorTest: java.lang.NullPointerException:: null",
            "com.univocity.parsers.common.processor.ConcurrentRowProcessorTest#concurrentRowProcessorTest: java.lang.NullPointerException:: null",
            "com.univocity.parsers.common.processor.ConcurrentRowProcessorTest#concurrentRowProcessorTest: java.lang.NullPointerException:: null",
            "com.univocity.parsers.common.processor.ConcurrentRowProcessorTest#ensureContextIsPreserved: com.univocity.parsers.common.TextParsingException: java.lang.AssertionError - expected [A,B,C,D,E,F,G",
            "com.univocity.parsers.common.processor.ColumnProcessorTest#testColumnValues: java.lang.NullPointerException:: null",
            "com.univocity.parsers.common.processor.ObjectRowListProcessorTest#conversionTest: java.lang.AssertionError: expected [2] but found [0]",
            "com.univocity.parsers.common.processor.ObjectRowListProcessorTest#conversionTest: java.lang.AssertionError: expected [2] but found [0]",
            "com.univocity.parsers.common.processor.ObjectRowListProcessorTest#conversionTestOnSelectedColumnsWithReordering: java.lang.AssertionError: expected [2] but found [0]",
            "com.univocity.parsers.common.processor.ObjectRowListProcessorTest#conversionTestOnSelectedColumnsWithReordering: java.lang.AssertionError: expected [2] but found [0]",
            "com.univocity.parsers.common.processor.ObjectRowListProcessorTest#conversionTestOnSelectedColumnsWithoutColumnReordering: java.lang.AssertionError: expected [2] but found [0]",
            "com.univocity.parsers.common.processor.ObjectRowListProcessorTest#conversionTestOnSelectedColumnsWithoutColumnReordering: java.lang.AssertionError: expected [2] but found [0]",
            "com.univocity.parsers.common.processor.AnnotatedBeanProcessorTest#testAnnotatedBeanProcessor: java.lang.AssertionError: expected [2] but found [0]",
            "com.univocity.parsers.common.processor.AnnotatedBeanProcessorTest#testAnnotatedBeanProcessorWithOneFieldOnly: java.lang.AssertionError: expected [2] but found [0]",
            "com.univocity.parsers.common.processor.AnnotatedBeanProcessorTest#testAnnotatedBeanWithLessColumns: java.lang.IndexOutOfBoundsException: Index: 0, Size: 0",
            "com.univocity.parsers.tsv.TsvParserTest#columnSelectionTest: java.lang.AssertionError: expected [1] but found [0]",
            "com.univocity.parsers.tsv.TsvParserTest#parse3Records: java.lang.AssertionError: expected [3] but found [0]",
            "com.univocity.parsers.tsv.TsvParserTest#parse3Records: java.lang.AssertionError: expected [3] but found [0]",
            "com.univocity.parsers.tsv.TsvParserTest#parse3Records: java.lang.AssertionError: expected [3] but found [0]",
            "com.univocity.parsers.tsv.TsvParserTest#parse3Records: java.lang.AssertionError: expected [3] but found [0]",
            "com.univocity.parsers.tsv.TsvParserTest#parse3Records: java.lang.AssertionError: expected [3] but found [0]",
            "com.univocity.parsers.tsv.TsvParserTest#parseColumns: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvParserTest#parseColumns: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvParserTest#parseColumns: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvParserTest#parseColumns: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvParserTest#parseColumns: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvParserTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvParserTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvParserTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvParserTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvParserTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvParserTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvParserTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvParserTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvParserTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvParserTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvParserTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [0]",
            "com.univocity.parsers.tsv.TsvParserTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [0]",
            "com.univocity.parsers.tsv.TsvParserTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [0]",
            "com.univocity.parsers.tsv.TsvParserTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [0]",
            "com.univocity.parsers.tsv.TsvParserTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [0]",
            "com.univocity.parsers.tsv.TsvParserTest#testFieldSelectionWithMismatchingNames: java.lang.IndexOutOfBoundsException: Index: 0, Size: 0",
            "com.univocity.parsers.tsv.TsvWriterTest#columnSelectionTest: java.lang.AssertionError: expected [1] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#parse3Records: java.lang.AssertionError: expected [3] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#parse3Records: java.lang.AssertionError: expected [3] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#parse3Records: java.lang.AssertionError: expected [3] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#parse3Records: java.lang.AssertionError: expected [3] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#parse3Records: java.lang.AssertionError: expected [3] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseColumns: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseColumns: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseColumns: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseColumns: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseColumns: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#testFieldSelectionWithMismatchingNames: java.lang.IndexOutOfBoundsException: Index: 0, Size: 0",
            "com.univocity.parsers.tsv.TsvWriterTest#writeSelectedColumnOnly: java.lang.AssertionError: expected [8] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#writeSelectedColumnOnly: java.lang.AssertionError: expected [8] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#writeSelectedColumnOnly: java.lang.AssertionError: expected [8] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#writeSelectedColumnOnly: java.lang.AssertionError: expected [8] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#writeTest: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#writeTest: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#writeTest: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.tsv.TsvWriterTest#writeTest: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.fixed.FixedWidthWriterTest#testFixedWidthParser: java.lang.AssertionError: expected [5] but found [0]",
            "com.univocity.parsers.fixed.FixedWidthWriterTest#testFixedWidthParser: java.lang.AssertionError: expected [5] but found [0]",
            "com.univocity.parsers.fixed.FixedWidthWriterTest#testFixedWidthParser: java.lang.AssertionError: expected [5] but found [0]",
            "com.univocity.parsers.fixed.FixedWidthWriterTest#testFixedWidthParser: java.lang.AssertionError: expected [5] but found [0]",
            "com.univocity.parsers.fixed.FixedWidthWriterTest#testFixedWidthParser: java.lang.AssertionError: expected [5] but found [0]",
            "com.univocity.parsers.fixed.FixedWidthWriterTest#testFixedWidthParser: java.lang.AssertionError: expected [5] but found [0]",
            "com.univocity.parsers.fixed.FixedWidthWriterTest#testParsingWithPaddingPerField: java.lang.AssertionError: Arrays not equal: [ziel0, null] and null",
            "com.univocity.parsers.fixed.FixedWidthWriterTest#testWriter: java.lang.AssertionError: expected [5] but found [0]",
            "com.univocity.parsers.fixed.FixedWidthWriterTest#testWriter: java.lang.AssertionError: expected [5] but found [0]",
            "com.univocity.parsers.fixed.FixedWidthWriterTest#testWriterWithSpacesAndOverflow: java.lang.AssertionError: expected [3] but found [0]",
            "com.univocity.parsers.fixed.FixedWidthWriterTest#testWriterWithSpacesAndOverflow: java.lang.AssertionError: expected [3] but found [0]",
            "com.univocity.parsers.fixed.FixedWidthWriterTest#writeFromCsv: java.lang.IndexOutOfBoundsException: Index: 0, Size: 0",
            "com.univocity.parsers.fixed.FixedWidthParserTest#testFixedWidthParser: java.lang.AssertionError: expected [5] but found [0]",
            "com.univocity.parsers.fixed.FixedWidthParserTest#testFixedWidthParser: java.lang.AssertionError: expected [5] but found [0]",
            "com.univocity.parsers.fixed.FixedWidthParserTest#testFixedWidthParser: java.lang.AssertionError: expected [5] but found [0]",
            "com.univocity.parsers.fixed.FixedWidthParserTest#testFixedWidthParser: java.lang.AssertionError: expected [5] but found [0]",
            "com.univocity.parsers.fixed.FixedWidthParserTest#testFixedWidthParser: java.lang.AssertionError: expected [5] but found [0]",
            "com.univocity.parsers.fixed.FixedWidthParserTest#testFixedWidthParser: java.lang.AssertionError: expected [5] but found [0]",
            "com.univocity.parsers.fixed.FixedWidthParserTest#testParsingWithPaddingPerField: java.lang.AssertionError: Arrays not equal: [ziel0, null] and null",
            "com.univocity.parsers.csv.CsvWriterTest#columnSelectionTest: java.lang.AssertionError: Arrays not equal: [a, c, e] and null",
            "com.univocity.parsers.csv.CsvWriterTest#parse3Records: java.lang.AssertionError: expected [3] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parse3Records: java.lang.AssertionError: expected [3] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parse3Records: java.lang.AssertionError: expected [3] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parse3Records: java.lang.AssertionError: expected [3] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parse3Records: java.lang.AssertionError: expected [3] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parse3Records: java.lang.AssertionError: expected [3] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parseColumns: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parseColumns: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parseColumns: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parseColumns: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parseColumns: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parseColumns: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parseIgnoringWhitespaces: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parseOneByOne: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#parseUsingWhitespaces: java.lang.AssertionError: expected [16] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#testColumnReorderingWithUserProvidedHeaders: java.lang.AssertionError: null: lists don't have the same size expected [3] but found [2]",
            "com.univocity.parsers.csv.CsvWriterTest#writeSelectedColumnOnly: java.lang.AssertionError: expected [8] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#writeSelectedColumnOnly: java.lang.AssertionError: expected [8] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#writeSelectedColumnOnly: java.lang.AssertionError: expected [8] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#writeSelectedColumnOnly: java.lang.AssertionError: expected [8] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#writeTest: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#writeTest: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#writeTest: java.lang.AssertionError: expected [15] but found [0]",
            "com.univocity.parsers.csv.CsvWriterTest#writeTest: java.lang.AssertionError: expected [15] but found [0]"
        ],
        "validation_time": 18.524231910705566
    },
    "5": {
        "patch": "public String[] rowParsed() {\n    if (column > 0) {\n        if (!columnsToExtractInitialized) {\n            initializeHeaders();\n            if (settings.isHeaderExtractionEnabled()) {\n                Arrays.fill(parsedValues, null);\n                column = 0;\n                this.appender = appenders[0];\n                return null;\n            } else if (!columnsReordered && selectedIndexes != null) {\n                String[] out = new String[column];\n                Arrays.fill(out, null); // Initialize the array with null values\n                for (int i = 0; i < selectedIndexes.length; i++) {\n                    int index = selectedIndexes[i];\n                    if (index >= 0 && index < column) {\n                        out[index] = parsedValues[index];\n                    }\n                }\n                column = 0;\n                return out;\n            }\n        }\n\n        currentRecord++;\n        if (columnsReordered) {\n            if (selectedIndexes.length == 0) {\n                return ArgumentUtils.EMPTY_STRING_ARRAY;\n            }\n            String[] reorderedValues = new String[selectedIndexes.length];\n            for (int i = 0; i < selectedIndexes.length; i++) {\n                int index = selectedIndexes[i];\n                if (index >= 0 && index < column) {\n                    reorderedValues[i] = parsedValues[index];\n                } else {\n                    reorderedValues[i] = nullValue;\n                }\n            }\n            column = 0;\n            this.appender = appenders[0];\n            return reorderedValues;\n        } else {\n            int last = columnReorderingEnabledSetting ? column : Math.min(column, headers.length);\n\n            String[] out = new String[last];\n            System.arraycopy(parsedValues, 0, out, 0, last);\n            column = 0;\n            this.appender = appenders[0];\n            return out;\n        }\n    } else if (!skipEmptyLines) {\n        if (!columnsToExtractInitialized) {\n            initializeHeaders();\n        }\n\n        currentRecord++;\n\n        if (columnsReordered) {\n            if (selectedIndexes.length == 0) {\n                return ArgumentUtils.EMPTY_STRING_ARRAY;\n            }\n            String[] out = new String[selectedIndexes.length];\n            Arrays.fill(out, nullValue);\n            return out;\n        }\n\n        return ArgumentUtils.EMPTY_STRING_ARRAY;\n    }\n\n    return null;\n}",
        "patched_method_loc": [
            154,
            224
        ],
        "status": "[FE]",
        "error_message": [
            "com.univocity.parsers.issues.github.Github_250#testParseInputNoIndexSelected: com.univocity.parsers.common.TextParsingException: java.lang.ArrayIndexOutOfBoundsException - 2"
        ],
        "validation_time": 18.391953229904175
    },
    "6": {
        "patch": "public String[] rowParsed() {\n    // some values were parsed. Let's return them\n    if (column > 0) {\n        // identifies selected columns and headers (in the first non-empty row)\n        if (!columnsToExtractInitialized) {\n            initializeHeaders();\n            //skips the header row. We want to use the headers defined in the settings.\n            if (settings.isHeaderExtractionEnabled()) {\n                Arrays.fill(parsedValues, null);\n                column = 0;\n                this.appender = appenders[0];\n                return null;\n            } else if (!columnsReordered && selectedIndexes != null) {\n                String[] out = new String[column];\n                for (int i = 0; i < Math.min(selectedIndexes.length, column); i++) {\n                    int index = selectedIndexes[i];\n                    if (index >= 0 && index < column) {\n                        out[index] = parsedValues[index];\n                    }\n                }\n                column = 0;\n                return out;\n            }\n        }\n\n        currentRecord++;\n        if (columnsReordered) {\n            if (selectedIndexes == null || selectedIndexes.length == 0) {\n                return ArgumentUtils.EMPTY_STRING_ARRAY;\n            }\n            String[] reorderedValues = new String[selectedIndexes.length];\n            for (int i = 0; i < selectedIndexes.length; i++) {\n                int index = selectedIndexes[i];\n                if (index >= 0 && index < column) {\n                    reorderedValues[i] = parsedValues[index];\n                } else {\n                    reorderedValues[i] = nullValue;\n                }\n            }\n            column = 0;\n            this.appender = appenders[0];\n            return reorderedValues;\n        } else {\n            int last = columnReorderingEnabledSetting ? column : Math.min(column, headers.length);\n\n            String[] out = new String[last];\n            System.arraycopy(parsedValues, 0, out, 0, last);\n            column = 0;\n            this.appender = appenders[0];\n            return out;\n        }\n    } else if (!skipEmptyLines) { // no values were parsed, but we are not skipping empty lines\n        if (!columnsToExtractInitialized) {\n            initializeHeaders();\n        }\n\n        currentRecord++;\n\n        if (columnsReordered) {\n            if (selectedIndexes == null || selectedIndexes.length == 0) {\n                return ArgumentUtils.EMPTY_STRING_ARRAY;\n            }\n            String[] out = new String[selectedIndexes.length];\n            Arrays.fill(out, nullValue);\n            return out;\n        }\n\n        return ArgumentUtils.EMPTY_STRING_ARRAY;\n    }\n    // no values were parsed and we do not care about empty lines.\n    return null;\n}",
        "patched_method_loc": [
            154,
            226
        ],
        "status": "[FE]",
        "error_message": [
            "com.univocity.parsers.issues.github.Github_250#testParseInputNoIndexSelected: com.univocity.parsers.common.TextParsingException: java.lang.ArrayIndexOutOfBoundsException - 2"
        ],
        "validation_time": 18.125868797302246
    },
    "7": {
        "patch": "public String[] rowParsed() {\n    if (column > 0) {\n        if (!columnsToExtractInitialized) {\n            initializeHeaders();\n            if (settings.isHeaderExtractionEnabled()) {\n                Arrays.fill(parsedValues, null);\n                column = 0;\n                this.appender = appenders[0];\n                return null;\n            } else if (!columnsReordered && selectedIndexes != null) {\n                String[] out = new String[column];\n                for (int i = 0; i < selectedIndexes.length; i++) {\n                    int index = selectedIndexes[i];\n                    if (index < column) {\n                        out[index] = parsedValues[index];\n                    }\n                }\n                column = 0;\n                return out;\n            }\n        }\n\n        currentRecord++;\n        if (columnsReordered) {\n            if (selectedIndexes.length == 0) {\n                return ArgumentUtils.EMPTY_STRING_ARRAY;\n            }\n            String[] reorderedValues = new String[selectedIndexes.length];\n            for (int i = 0; i < selectedIndexes.length; i++) {\n                int index = selectedIndexes[i];\n                if (index < column && index != -1) {\n                    reorderedValues[i] = parsedValues[index];\n                } else {\n                    reorderedValues[i] = nullValue;\n                }\n            }\n            column = 0;\n            this.appender = appenders[0];\n            return reorderedValues;\n        } else {\n            int last = columnReorderingEnabledSetting ? column : Math.min(headers.length, column);\n            String[] out = new String[last];\n            System.arraycopy(parsedValues, 0, out, 0, last);\n            column = 0;\n            this.appender = appenders[0];\n            return out;\n        }\n    } else if (!skipEmptyLines) {\n        if (!columnsToExtractInitialized) {\n            initializeHeaders();\n        }\n\n        currentRecord++;\n\n        if (columnsReordered) {\n            if (selectedIndexes.length == 0) {\n                return ArgumentUtils.EMPTY_STRING_ARRAY;\n            }\n            String[] out = new String[selectedIndexes.length];\n            Arrays.fill(out, nullValue);\n            return out;\n        }\n\n        return ArgumentUtils.EMPTY_STRING_ARRAY;\n    }\n    return null;\n}",
        "patched_method_loc": [
            154,
            221
        ],
        "status": "[FE]",
        "error_message": [
            "com.univocity.parsers.issues.github.Github_250#testParseInputNoIndexSelected: com.univocity.parsers.common.TextParsingException: java.lang.ArrayIndexOutOfBoundsException - 2"
        ],
        "validation_time": 18.411754369735718
    },
    "8": {
        "patch": "public String[] rowParsed() {\n    if (column > 0) {\n        if (!columnsToExtractInitialized) {\n            initializeHeaders();\n            if (settings.isHeaderExtractionEnabled()) {\n                Arrays.fill(parsedValues, null);\n                column = 0;\n                this.appender = appenders[0];\n                return null;\n            } else if (!columnsReordered && selectedIndexes != null) {\n                String[] out = new String[column];\n                for (int i = 0; i < selectedIndexes.length; i++) {\n                    int index = selectedIndexes[i];\n                    if (index < column) {\n                        out[index] = parsedValues[index];\n                    }\n                }\n                column = 0;\n                return out;\n            }\n        }\n\n        currentRecord++;\n        if (columnsReordered) {\n            if (selectedIndexes.length == 0) {\n                column = 0;\n                return ArgumentUtils.EMPTY_STRING_ARRAY;\n            }\n            String[] reorderedValues = new String[selectedIndexes.length];\n            for (int i = 0; i < selectedIndexes.length; i++) {\n                int index = selectedIndexes[i];\n                if (index >= column || index == -1) {\n                    reorderedValues[i] = nullValue;\n                } else {\n                    reorderedValues[i] = parsedValues[index];\n                }\n            }\n            column = 0;\n            this.appender = appenders[0];\n            return reorderedValues;\n        } else {\n            int last = columnReorderingEnabledSetting ? column : Math.min(column, headers.length);\n\n            String[] out = new String[last];\n            System.arraycopy(parsedValues, 0, out, 0, last);\n            column = 0;\n            this.appender = appenders[0];\n            return out;\n        }\n    } else if (!skipEmptyLines) {\n        if (!columnsToExtractInitialized) {\n            initializeHeaders();\n        }\n\n        currentRecord++;\n\n        if (columnsReordered) {\n            if (selectedIndexes.length == 0) {\n                return ArgumentUtils.EMPTY_STRING_ARRAY;\n            }\n            String[] out = new String[selectedIndexes.length];\n            Arrays.fill(out, nullValue);\n            return out;\n        }\n\n        return ArgumentUtils.EMPTY_STRING_ARRAY;\n    }\n\n    return null;\n}",
        "patched_method_loc": [
            154,
            224
        ],
        "status": "[Plausible]",
        "error_message": null,
        "validation_time": 17.942124843597412
    }
}