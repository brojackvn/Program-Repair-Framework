[
    {
        "patch": "public String scanString(char expectNextChar) {\n    matchStat = UNKNOWN;\n\n    int offset = 0;\n    char chLocal = charAt(bp + (offset++));\n\n    if (chLocal == 'n') {\n        if (charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n            offset += 3;\n            chLocal = charAt(bp + (offset++));\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = this.charAt(bp);\n            matchStat = VALUE;\n            return null;\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n    }\n\n    final StringBuilder strBuilder = new StringBuilder();\n    for (;;) {\n        if (chLocal == '\"') {\n            int startIndex = bp + offset;\n            int endIndex = indexOf('\"', startIndex);\n            if (endIndex == -1) {\n                throw new JSONException(\"unclosed string\");\n            }\n\n            String stringVal = subString(bp + offset, endIndex - startIndex);\n            if (stringVal.indexOf('\\\\') != -1) {\n                StringBuilder unescaped = new StringBuilder();\n                for (int i = 0; i < stringVal.length(); i++) {\n                    char c = stringVal.charAt(i);\n                    if (c == '\\\\') {\n                        if (i + 1 < stringVal.length()) {\n                            char nextChar = stringVal.charAt(i + 1);\n                            if (nextChar == '\"' || nextChar == '\\\\') {\n                                unescaped.append(nextChar);\n                                i++;\n                            }\n                        }\n                    } else {\n                        unescaped.append(c);\n                    }\n                }\n                stringVal = unescaped.toString();\n            }\n\n            offset += (endIndex - startIndex + 1);\n            chLocal = charAt(bp + (offset++));\n            strBuilder.append(stringVal);\n            break;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (offset++));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return stringDefaultValue();\n        }\n    }\n\n    String strVal = strBuilder.toString();\n\n    for (;;) {\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = charAt(bp);\n            matchStat = VALUE;\n            token = JSONToken.COMMA;\n            return strVal;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (offset++));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return strVal;\n        }\n    }\n}",
        "patched_method_loc": [
            1333,
            1419
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_1: org.junit.ComparisonFailure: expected:<a\\bc[\"]> but was:<a\\bc[]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_2#test_0: org.junit.ComparisonFailure: expected:<abc[&#0;&#1;&#2;&#3;&#4;&#5;&#6;&#7;&#8; "
        ],
        "validation_time": 110.55902910232544
    },
    {
        "patch": "public String scanString(char expectNextChar) {\n    matchStat = UNKNOWN;\n\n    int offset = 0;\n    char chLocal = charAt(bp + (offset++));\n\n    if (chLocal == 'n') {\n        if (charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n            offset += 3;\n            chLocal = charAt(bp + (offset++));\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = this.charAt(bp);\n            matchStat = VALUE;\n            return null;\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n    }\n\n    final String strVal;\n    for (;;) {\n        if (chLocal == '\"') {\n            int startIndex = bp + offset;\n            int endIndex = indexOf('\"', startIndex);\n            if (endIndex == -1) {\n                throw new JSONException(\"unclosed str\");\n            }\n\n            String stringVal = subString(bp + offset, endIndex - startIndex);\n            if (stringVal.indexOf('\\\\') != -1) {\n                // Handle escape characters within the string\n                StringBuilder sb = new StringBuilder();\n                for (int i = 0; i < stringVal.length(); i++) {\n                    char c = stringVal.charAt(i);\n                    if (c == '\\\\' && i + 1 < stringVal.length()) {\n                        char nextChar = stringVal.charAt(i + 1);\n                        if (nextChar == '\"' || nextChar == '\\\\') {\n                            sb.append(nextChar);\n                            i++; // Skip the escaped character\n                        } else {\n                            sb.append(c);\n                        }\n                    } else {\n                        sb.append(c);\n                    }\n                }\n                stringVal = sb.toString();\n            }\n\n            offset += (endIndex - startIndex + 1);\n            chLocal = charAt(bp + (offset++));\n            strVal = stringVal;\n            break;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (offset++));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return stringDefaultValue();\n        }\n    }\n\n    for (;;) {\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = charAt(bp);\n            matchStat = VALUE;\n            return strVal;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (offset++));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return strVal;\n        }\n    }\n}",
        "patched_method_loc": [
            1333,
            1417
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.issue_2300.Issue2351#test_for_issue: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual [",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_1: org.junit.ComparisonFailure: expected:<a\\bc[\"]> but was:<a\\bc[\\]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_2#test_0: org.junit.ComparisonFailure: expected:<abc[&#0;&#1;&#2;&#3;&#4;&#5;&#6;&#7;&#8; "
        ],
        "validation_time": 106.91285562515259
    },
    {
        "patch": "public String scanString(char expectNextChar) {\n    matchStat = UNKNOWN;\n\n    int offset = 0;\n    char chLocal = charAt(bp + (offset++));\n\n    if (chLocal == 'n') {\n        if (charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n            offset += 3;\n            chLocal = charAt(bp + (offset++));\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = this.charAt(bp);\n            matchStat = VALUE;\n            return null;\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n    }\n\n    final String strVal;\n    for (;;) {\n        if (chLocal == '\"') {\n            int startIndex = bp + offset;\n            int endIndex = indexOf('\"', startIndex);\n            if (endIndex == -1) {\n                throw new JSONException(\"unclosed str\");\n            }\n\n            String stringVal = subString(bp + offset, endIndex - startIndex);\n            if (stringVal.indexOf('\\\\') != -1) {\n                StringBuilder sb = new StringBuilder();\n                for (int i = 0; i < stringVal.length(); i++) {\n                    char c = stringVal.charAt(i);\n                    if (c == '\\\\') {\n                        if (i + 1 < stringVal.length()) {\n                            char nextChar = stringVal.charAt(i + 1);\n                            if (nextChar == '\\\\' || nextChar == '\"') {\n                                sb.append(nextChar);\n                                i++;\n                            } else {\n                                sb.append(c);\n                            }\n                        }\n                    } else {\n                        sb.append(c);\n                    }\n                }\n                stringVal = sb.toString();\n            }\n\n            offset += (endIndex - startIndex + 1);\n            chLocal = charAt(bp + (offset++));\n            strVal = stringVal;\n            break;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (offset++));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return stringDefaultValue();\n        }\n    }\n\n    for (;;) {\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = charAt(bp);\n            matchStat = VALUE;\n            return strVal;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (offset++));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return strVal;\n        }\n    }\n}",
        "patched_method_loc": [
            1333,
            1418
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.issue_2300.Issue2351#test_for_issue: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual [",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_1: org.junit.ComparisonFailure: expected:<a\\bc[\"]> but was:<a\\bc[]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_2#test_0: org.junit.ComparisonFailure: expected:<abc[&#0;&#1;&#2;&#3;&#4;&#5;&#6;&#7;&#8; "
        ],
        "validation_time": 112.86110472679138
    },
    {
        "patch": "public String scanString(char expectNextChar) {\n    matchStat = UNKNOWN;\n\n    int offset = 0;\n    char chLocal = charAt(bp + offset);\n\n    if (chLocal == 'n') {\n        if (charAt(bp + offset + 1) == 'u' && charAt(bp + offset + 2) == 'l' && charAt(bp + offset + 3) == 'l') {\n            offset += 4;\n            chLocal = charAt(bp + offset);\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n\n        if (chLocal == expectNextChar) {\n            bp += offset + 1;\n            this.ch = charAt(bp);\n            matchStat = VALUE;\n            return null;\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n    }\n\n    if (chLocal != '\"') {\n        matchStat = NOT_MATCH;\n        return stringDefaultValue();\n    }\n\n    int startIndex = bp + offset + 1;\n    int endIndex = indexOf('\"', startIndex);\n    if (endIndex == -1) {\n        throw new JSONException(\"unclosed str\");\n    }\n\n    String stringVal = subString(bp + offset + 1, endIndex - startIndex);\n\n    offset += (endIndex - startIndex + 2);\n    chLocal = charAt(bp + offset);\n\n    // Handle escape characters\n    if (stringVal.indexOf('\\\\') != -1) {\n        stringVal = readString(stringVal.toCharArray(), stringVal.length());\n    }\n\n    if (chLocal == expectNextChar) {\n        bp += offset + 1;\n        this.ch = charAt(bp);\n        matchStat = VALUE;\n        return stringVal;\n    } else {\n        matchStat = NOT_MATCH;\n        return stringVal;\n    }\n}",
        "patched_method_loc": [
            1333,
            1390
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.issue_2300.Issue2351#test_for_issue: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual [",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_1: java.lang.AbstractMethodError: : java.lang.Throwable.getMessage()Ljava/lang/String;",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_1: java.lang.AbstractMethodError: : java.lang.Throwable.getMessage()Ljava/lang/String;",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.issue_1600.Issue1683#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : string"
        ],
        "validation_time": 81.70792555809021
    },
    {
        "patch": "public String scanString(char expectNextChar) {\n    matchStat = UNKNOWN;\n\n    int offset = 0;\n    char chLocal = charAt(bp + offset);\n\n    if (chLocal == 'n') {\n        if (charAt(bp + offset + 1) == 'u' && charAt(bp + offset + 2) == 'l' && charAt(bp + offset + 3) == 'l') {\n            offset += 4;\n            chLocal = charAt(bp + offset);\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = charAt(bp);\n            matchStat = VALUE;\n            return null;\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n    }\n\n    final String strVal;\n    for (;;) {\n        if (chLocal == '\"') {\n            int startIndex = bp + offset + 1;\n            int endIndex = indexOf('\"', startIndex);\n            if (endIndex == -1) {\n                throw new JSONException(\"unclosed str\");\n            }\n\n            String stringVal = subString(startIndex, endIndex - startIndex);\n            if (stringVal.indexOf('\\\\') != -1) {\n                StringBuilder sb = new StringBuilder();\n                int chars_len = endIndex - startIndex;\n                char[] chars = sub_chars(startIndex, chars_len);\n\n                for (int i = 0; i < chars_len; i++) {\n                    char ch = chars[i];\n                    if (ch == '\\\\') {\n                        if (i < chars_len - 1) {\n                            i++;\n                            char nextChar = chars[i];\n                            switch (nextChar) {\n                                case '\"':\n                                case '\\\\':\n                                case '/':\n                                    sb.append(nextChar);\n                                    break;\n                                case 'b':\n                                    sb.append('\\b');\n                                    break;\n                                case 'f':\n                                    sb.append('\\f');\n                                    break;\n                                case 'n':\n                                    sb.append('\\n');\n                                    break;\n                                case 'r':\n                                    sb.append('\\r');\n                                    break;\n                                case 't':\n                                    sb.append('\\t');\n                                    break;\n                                case 'u':\n                                    if (i + 4 < chars_len) {\n                                        char[] unicodeChars = new char[4];\n                                        System.arraycopy(chars, i + 1, unicodeChars, 0, 4);\n                                        char unicodeChar = (char) Integer.parseInt(new String(unicodeChars), 16);\n                                        sb.append(unicodeChar);\n                                        i += 4;\n                                    } else {\n                                        throw new JSONException(\"Invalid unicode encoding\");\n                                    }\n                                    break;\n                                default:\n                                    throw new JSONException(\"Invalid escape character: \\\\\" + nextChar);\n                            }\n                        } else {\n                            throw new JSONException(\"Invalid escape character position\");\n                        }\n                    } else {\n                        sb.append(ch);\n                    }\n                }\n\n                stringVal = sb.toString();\n            }\n\n            offset += (endIndex - startIndex + 1);\n            chLocal = charAt(bp + offset);\n            strVal = stringVal;\n            break;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (++offset));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return stringDefaultValue();\n        }\n    }\n\n    for (;;) {\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = charAt(bp);\n            matchStat = VALUE;\n            return strVal;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (++offset));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return strVal;\n        }\n    }\n}",
        "patched_method_loc": [
            1333,
            1454
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_double_private#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_0_private#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_enum_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.issue_2300.Issue2351#test_for_issue: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual [",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_list_obj_public#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect string, actual string",
            "com.alibaba.json.bvt.parser.array.BeanToArrayAutoTypeTest#test_for_issue: com.alibaba.fastjson.JSONException: : illegal identifier : 1pos 34, line 1, column 35{\"value\":[\"@type\":\"B\",\"chengchao\",1001]}",
            "com.alibaba.json.bvt.parser.array.BeanToArrayAutoTypeTest#test_for_issue_x: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_jsonType#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, pos 11, fastjson-version 1.2.63",
            "com.alibaba.json.bvt.issue_1100.Issue1138#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay_Media#test_0: com.alibaba.fastjson.JSONException: : com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.scanEnum(Lcom/alibaba/fastjson/parser/JSONLexerBase;C)Ljava/lang/Enum;",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_float#test_float: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Object#test_0: com.alibaba.fastjson.JSONException: : syntax error",
            "com.alibaba.json.bvt.parser.array.BeanToArrayTest#test_beanToArray_parse: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, pos 8, fieldName co, fastjson-version 1.2.63",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect string, actual string",
            "com.alibaba.json.bvt.bug.Bug_for_issue_465#test_for_issue: com.alibaba.fastjson.JSONException: : [B cannot be cast to [I",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping_2#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_float2_private#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Object_public#test_0: com.alibaba.fastjson.JSONException: : syntax error",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_1: com.alibaba.fastjson.JSONException: : Invalid escape character position",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_list_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.array.BeanToArrayAutoTypeTest2#test_for_issue: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, pos 22, fastjson-version 1.2.63",
            "com.alibaba.json.bvt.bug.Issue64#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.IncomingDataPointTest#test_for_IncomingDataPoint: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, fieldName tags, pos 71, line 1, column 72[[\"DataAdaptor.LbMultiGroupPersonalityDataAdaptor.stddev.aggregate_sum\",\"1501812639932\",\"95.52667633256902\",{\"appName\":\"aladdin\",\"hostIdc\":\"et2\",\"hostunit\":\"CENTER\",\"nodegroup\":\"aladdin_prehost\",\"idc\":\"ET2\",\"agg_version\":\"100\",\"group\":\"DEFAULT\"},\"\",\"\",\"\"]]",
            "com.alibaba.json.bvt.IncomingDataPointTest#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, fieldName tags, pos 16, line 1, column 17[[\"mem.usage.GB\",1501760861298,\"58.41\",{\"site\":\"et2\",\"appname\":\"histore\",\"ip\":\"1.1.1.1\"},\"\",null,\"\"]]",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_double#test_float: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Object_2_public#test_0: com.alibaba.fastjson.JSONException: : syntax error",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_stream_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_list_obj_first_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_double_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.bug.Bug_for_issue_630#test_for_issue_empty: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual ,",
            "com.alibaba.json.bvt.bug.Bug_for_issue_630#test_for_issue_null: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual ,",
            "com.alibaba.json.bvt.bug.Bug_for_issue_630#test_for_issue_one: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual ,",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_long#test_for_error: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay_Image#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_1: com.alibaba.fastjson.JSONException: : Invalid escape character position",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_bool#test_for_true: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_bool#test_for_false: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.issue_1600.Issue1683#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.array.BeanToArrayTest_private#test_beanToArray_parse: com.alibaba.fastjson.JSONException: : syntax error,except start with { or [,but actually start with string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_float2_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_2#test_0: com.alibaba.fastjson.JSONException: : Invalid escape character: \\0",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string"
        ],
        "validation_time": 81.53010439872742
    },
    {
        "patch": "public String scanString(char expectNextChar) {\n    matchStat = UNKNOWN;\n\n    int offset = 0;\n    char chLocal = charAt(bp + offset);\n\n    if (chLocal == 'n') {\n        if (charAt(bp + offset + 1) == 'u' && charAt(bp + offset + 2) == 'l' && charAt(bp + offset + 3) == 'l') {\n            offset += 4;\n            chLocal = charAt(bp + offset);\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = charAt(bp);\n            matchStat = VALUE;\n            return null;\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n    }\n\n    StringBuilder strValBuilder = new StringBuilder();\n    while (offset < text.length()) {\n        chLocal = charAt(bp + offset);\n\n        if (chLocal == '\"') {\n            int startIndex = bp + offset + 1;\n            int endIndex = text.indexOf('\"', startIndex);\n            if (endIndex == -1) {\n                throw new JSONException(\"Unclosed string\");\n            }\n\n            String stringVal = text.substring(startIndex, endIndex);\n            strValBuilder.append(stringVal);\n\n            offset += (endIndex - startIndex + 2);  // Include the closing double quote\n\n            chLocal = charAt(bp + offset);\n            break;\n        } else if (isWhitespace(chLocal)) {\n            offset++;\n        } else {\n            matchStat = NOT_MATCH;\n            return stringDefaultValue();\n        }\n    }\n\n    while (offset < text.length()) {\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = charAt(bp);\n            matchStat = VALUE;\n            return strValBuilder.toString();\n        } else if (isWhitespace(chLocal)) {\n            offset++;\n            chLocal = charAt(bp + offset);\n        } else {\n            matchStat = NOT_MATCH;\n            return strValBuilder.toString();\n        }\n    }\n\n    return strValBuilder.toString();\n}",
        "patched_method_loc": [
            1333,
            1402
        ],
        "status": "[CE]",
        "error_message": [
            "[1360,21] cannot find symbol\n  symbol:   variable text",
            "[1365,28] cannot find symbol\n  symbol:   variable text",
            "[1370,32] cannot find symbol\n  symbol:   variable text",
            "[1385,21] cannot find symbol\n  symbol:   variable text"
        ],
        "validation_time": 3.4355106353759766
    },
    {
        "patch": "public String scanString(char expectNextChar) {\n    matchStat = UNKNOWN;\n    final String strVal;\n\n    int offset = 0;\n    char chLocal = charAt(bp + offset++);\n\n    if (chLocal == '\"') {\n        int startIndex = bp + offset;\n        int endIndex = indexOf('\"', startIndex);\n        if (endIndex == -1) {\n            throw new JSONException(\"unclosed str\");\n        }\n\n        String stringVal = subString(bp + offset, endIndex - startIndex);\n        if (stringVal.indexOf('\\\\') != -1) {\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < stringVal.length(); i++) {\n                char c = stringVal.charAt(i);\n                if (c == '\\\\' && i + 1 < stringVal.length()) {\n                    char nextChar = stringVal.charAt(i + 1);\n                    if (nextChar == '\\\\' || nextChar == '\"') {\n                        sb.append(nextChar);\n                        i++; // skip next character\n                    } else {\n                        sb.append(c);\n                    }\n                } else {\n                    sb.append(c);\n                }\n            }\n            stringVal = sb.toString();\n        }\n\n        offset += (endIndex - startIndex + 1);\n        chLocal = charAt(bp + offset++);\n        strVal = stringVal;\n    } else {\n        matchStat = NOT_MATCH;\n        return null;\n    }\n\n    for (;;) {\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = charAt(bp);\n            matchStat = VALUE;\n            return strVal;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + offset++);\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n    }\n}",
        "patched_method_loc": [
            1333,
            1389
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.issue_2300.Issue2351#test_for_issue: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual [",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay_Media#test_0: com.alibaba.fastjson.JSONException: : 123",
            "com.alibaba.json.bvt.parser.array.BeanToArrayTest#test_beanToArray_parse: com.alibaba.fastjson.JSONException: : syntax error, expect null, actual null",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay#test_0: com.alibaba.fastjson.JSONException: : No enum constant data.media.Media.Player.video/mpg4",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : null",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_1: java.lang.AssertionError: expected:<a\\bc\"> but was:<null>",
            "com.alibaba.json.bvt.IncomingDataPointTest#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.bug.Bug_for_issue_630#test_for_issue_empty: com.alibaba.fastjson.JSONException: : not close json text, token : null",
            "com.alibaba.json.bvt.bug.Bug_for_issue_630#test_for_issue_null: com.alibaba.fastjson.JSONException: : not close json text, token : null",
            "com.alibaba.json.bvt.bug.Bug_for_issue_630#test_for_issue_one: com.alibaba.fastjson.JSONException: : not close json text, token : null",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay_Image#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : int",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.issue_1600.Issue1683#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.array.BeanToArrayTest_private#test_beanToArray_parse: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, pos 186, fastjson-version 1.2.63",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_2#test_0: org.junit.ComparisonFailure: expected:<abc[&#0;&#1;&#2;&#3;&#4;&#5;&#6;&#7;&#8; "
        ],
        "validation_time": 83.60159659385681
    },
    {
        "patch": "public String scanString(char expectNextChar) {\n    matchStat = UNKNOWN;\n\n    int offset = 0;\n    char chLocal = charAt(bp + (offset++));\n\n    if (chLocal == 'n') {\n        if (charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n            offset += 3;\n            chLocal = charAt(bp + (offset++));\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = this.charAt(bp);\n            matchStat = VALUE;\n            return null;\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n    }\n\n    final StringBuilder strBuilder = new StringBuilder();\n    for (;;) {\n        if (chLocal == '\"') {\n            int startIndex = bp + offset;\n            int endIndex = indexOf('\"', startIndex);\n            if (endIndex == -1) {\n                throw new JSONException(\"unclosed str\");\n            }\n\n            String stringVal = subString(bp + offset, endIndex - startIndex);\n            if (stringVal.indexOf('\\\\') != -1) {\n                StringBuilder escapedBuilder = new StringBuilder();\n                int i = 0;\n                while (i < stringVal.length()) {\n                    char c = stringVal.charAt(i);\n                    if (c == '\\\\') {\n                        if (i < stringVal.length() - 1) {\n                            char nextChar = stringVal.charAt(i + 1);\n                            if (nextChar == '\"' || nextChar == '\\\\') {\n                                escapedBuilder.append(nextChar);\n                                i++;\n                            }\n                        }\n                    } else {\n                        escapedBuilder.append(c);\n                    }\n                    i++;\n                }\n                stringVal = escapedBuilder.toString();\n            }\n\n            offset += (endIndex - startIndex + 1);\n            chLocal = charAt(bp + (offset++));\n            strBuilder.append(stringVal);\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (offset++));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return stringDefaultValue();\n        }\n\n        for (;;) {\n            if (chLocal == expectNextChar) {\n                bp += offset;\n                this.ch = charAt(bp);\n                matchStat = VALUE;\n                return strBuilder.toString();\n            } else if (isWhitespace(chLocal)) {\n                chLocal = charAt(bp + (offset++));\n                continue;\n            } else {\n                matchStat = NOT_MATCH;\n                return strBuilder.toString();\n            }\n        }\n    }\n}",
        "patched_method_loc": [
            1333,
            1417
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.issue_2300.Issue2351#test_for_issue: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual [",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_1: org.junit.ComparisonFailure: expected:<a\\bc[\"]> but was:<a\\bc[]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_2#test_0: org.junit.ComparisonFailure: expected:<abc[&#0;&#1;&#2;&#3;&#4;&#5;&#6;&#7;&#8; "
        ],
        "validation_time": 83.29966855049133
    },
    {
        "patch": "public String scanString(char expectNextChar) {\n    matchStat = UNKNOWN;\n\n    int offset = 0;\n    char chLocal = charAt(bp + offset);\n\n    if (chLocal == 'n') {\n        if (charAt(bp + offset + 1) == 'u' && charAt(bp + offset + 2) == 'l' && charAt(bp + offset + 3) == 'l') {\n            offset += 4;\n            chLocal = charAt(bp + offset);\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = charAt(bp);\n            matchStat = VALUE;\n            return null;\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n    }\n\n    final String strVal;\n    for (;;) {\n        if (chLocal == '\"') {\n            int startIndex = bp + offset + 1;\n            int endIndex = indexOf('\"', startIndex);\n            if (endIndex == -1) {\n                throw new JSONException(\"unclosed str\");\n            }\n\n            String stringVal = subString(bp + offset + 1, endIndex - startIndex);\n            if (stringVal.indexOf('\\\\') != -1) {\n                StringBuilder sb = new StringBuilder();\n                int i = 0;\n                while (i < stringVal.length()) {\n                    char c = stringVal.charAt(i);\n                    if (c == '\\\\') {\n                        if (i + 1 < stringVal.length()) {\n                            char nextChar = stringVal.charAt(i + 1);\n                            if (nextChar == '\\\\' || nextChar == '\"') {\n                                sb.append(nextChar);\n                                i++;\n                            } else {\n                                sb.append(c);\n                            }\n                        }\n                    } else {\n                        sb.append(c);\n                    }\n                    i++;\n                }\n                stringVal = sb.toString();\n            }\n\n            offset += (endIndex - startIndex + 2);\n            chLocal = charAt(bp + offset);\n            strVal = stringVal;\n            break;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (++offset));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return stringDefaultValue();\n        }\n    }\n\n    for (;;) {\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = charAt(bp);\n            matchStat = VALUE;\n            return strVal;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (++offset));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return strVal;\n        }\n    }\n}",
        "patched_method_loc": [
            1333,
            1420
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_double_private#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_0_private#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_enum_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.issue_2300.Issue2351#test_for_issue: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual [",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_list_obj_public#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual ,",
            "com.alibaba.json.bvt.parser.array.BeanToArrayAutoTypeTest#test_for_issue: com.alibaba.fastjson.JSONException: : illegal identifier : 1pos 34, line 1, column 35{\"value\":[\"@type\":\"B\",\"chengchao\",1001]}",
            "com.alibaba.json.bvt.parser.array.BeanToArrayAutoTypeTest#test_for_issue_x: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_jsonType#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual ], pos 0, fastjson-version 1.2.63",
            "com.alibaba.json.bvt.issue_1100.Issue1138#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay_Media#test_0: com.alibaba.fastjson.JSONException: : com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.scanEnum(Lcom/alibaba/fastjson/parser/JSONLexerBase;C)Ljava/lang/Enum;",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_float#test_float: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Object#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.parser.array.BeanToArrayTest#test_beanToArray_parse: com.alibaba.fastjson.JSONException: : illegal identifier : [pos 12, line 1, column 13{\"go\":[[\"0\",[true,false],9999999999999,99,\"012345678901234567890123\",\"ftp://gfw.yma.co/x160\",\"xxxx\",\"9876543210123456\",[[\"m\",\"不要开心\",\"http://gfw.meiya.co\",\"123456@gg.com\",\"麻麻\",\"add\",null,\"9876543210123456\"]],null,[\"add\",\"ww\"],999,1234567890123]],\"success\":true}",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, pos 33, fastjson-version 1.2.63",
            "com.alibaba.json.bvt.bug.Bug_for_issue_465#test_for_issue: com.alibaba.fastjson.JSONException: : expect '[', but ,, pos 7, line 1, column 8[\"abc\",\"efg\",\"sss\",[1,2]]",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping_2#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_float2_private#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Object_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_1: org.junit.ComparisonFailure: expected:<a\\bc[\"]> but was:<a\\bc[]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_list_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.parser.array.BeanToArrayAutoTypeTest2#test_for_issue: com.alibaba.fastjson.JSONException: : illegal identifier : 1pos 34, line 1, column 35{\"value\":[\"@type\":\"B\",\"chengchao\",1001]}",
            "com.alibaba.json.bvt.bug.Issue64#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.IncomingDataPointTest#test_for_IncomingDataPoint: com.alibaba.fastjson.JSONException: : syntax error, expect [, actual ,, pos 71, fieldName tags",
            "com.alibaba.json.bvt.IncomingDataPointTest#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect [, actual ,, pos 16, fieldName tags",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_double#test_float: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Object_2_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_stream_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_list_obj_first_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_double_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.bug.Bug_for_issue_630#test_for_issue_empty: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual ,",
            "com.alibaba.json.bvt.bug.Bug_for_issue_630#test_for_issue_null: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual ,",
            "com.alibaba.json.bvt.bug.Bug_for_issue_630#test_for_issue_one: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual ,",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_long#test_for_error: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay_Image#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_bool#test_for_true: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_bool#test_for_false: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.issue_1600.Issue1683#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.parser.array.BeanToArrayTest_private#test_beanToArray_parse: com.alibaba.fastjson.JSONException: : syntax error,except start with { or [,but actually start with ,",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_float2_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_2#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : ]"
        ],
        "validation_time": 81.16955828666687
    },
    {
        "patch": "public String scanString(char expectNextChar) {\n    matchStat = UNKNOWN;\n\n    int offset = 0;\n    char chLocal = charAt(bp + offset);\n\n    if (chLocal == 'n') {\n        if (charAt(bp + offset + 1) == 'u' && charAt(bp + offset + 2) == 'l' && charAt(bp + offset + 3) == 'l') {\n            offset += 4;\n            chLocal = charAt(bp + offset);\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = this.charAt(bp);\n            matchStat = VALUE;\n            return null;\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n    }\n\n    final String strVal;\n    for (;;) {\n        if (chLocal == '\"') {\n            int startIndex = bp + offset + 1;\n            int endIndex = indexOf('\"', startIndex);\n            if (endIndex == -1) {\n                throw new JSONException(\"unclosed str\");\n            }\n\n            String stringVal = subString(bp + offset + 1, endIndex - startIndex);\n            offset += (endIndex - startIndex + 2);\n            chLocal = charAt(bp + offset);\n            strVal = stringVal;\n            break;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (++offset));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return stringDefaultValue();\n        }\n    }\n\n    for (;;) {\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = charAt(bp);\n            matchStat = VALUE;\n            return strVal;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (++offset));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return strVal;\n        }\n    }\n}",
        "patched_method_loc": [
            1333,
            1397
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_double_private#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_0_private#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_enum_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.issue_2300.Issue2351#test_for_issue: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual [",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_list_obj_public#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual ,",
            "com.alibaba.json.bvt.parser.array.BeanToArrayAutoTypeTest#test_for_issue: com.alibaba.fastjson.JSONException: : illegal identifier : 1pos 34, line 1, column 35{\"value\":[\"@type\":\"B\",\"chengchao\",1001]}",
            "com.alibaba.json.bvt.parser.array.BeanToArrayAutoTypeTest#test_for_issue_x: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_jsonType#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual ], pos 0, fastjson-version 1.2.63",
            "com.alibaba.json.bvt.issue_1100.Issue1138#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay_Media#test_0: com.alibaba.fastjson.JSONException: : com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.scanEnum(Lcom/alibaba/fastjson/parser/JSONLexerBase;C)Ljava/lang/Enum;",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_float#test_float: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Object#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.parser.array.BeanToArrayTest#test_beanToArray_parse: com.alibaba.fastjson.JSONException: : illegal identifier : [pos 12, line 1, column 13{\"go\":[[\"0\",[true,false],9999999999999,99,\"012345678901234567890123\",\"ftp://gfw.yma.co/x160\",\"xxxx\",\"9876543210123456\",[[\"m\",\"不要开心\",\"http://gfw.meiya.co\",\"123456@gg.com\",\"麻麻\",\"add\",null,\"9876543210123456\"]],null,[\"add\",\"ww\"],999,1234567890123]],\"success\":true}",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, pos 33, fastjson-version 1.2.63",
            "com.alibaba.json.bvt.bug.Bug_for_issue_465#test_for_issue: com.alibaba.fastjson.JSONException: : expect '[', but ,, pos 7, line 1, column 8[\"abc\",\"efg\",\"sss\",[1,2]]",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping_2#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_float2_private#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Object_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_0: org.junit.ComparisonFailure: expected:<a\\[]bc> but was:<a\\[\\]bc>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_1: org.junit.ComparisonFailure: expected:<a\\[bc\"]> but was:<a\\[\\bc\\]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_list_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.parser.array.BeanToArrayAutoTypeTest2#test_for_issue: com.alibaba.fastjson.JSONException: : illegal identifier : 1pos 34, line 1, column 35{\"value\":[\"@type\":\"B\",\"chengchao\",1001]}",
            "com.alibaba.json.bvt.bug.Issue64#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.IncomingDataPointTest#test_for_IncomingDataPoint: com.alibaba.fastjson.JSONException: : syntax error, expect [, actual ,, pos 71, fieldName tags",
            "com.alibaba.json.bvt.IncomingDataPointTest#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect [, actual ,, pos 16, fieldName tags",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_double#test_float: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Object_2_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_stream_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_list_obj_first_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_double_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.bug.Bug_for_issue_630#test_for_issue_empty: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual ,",
            "com.alibaba.json.bvt.bug.Bug_for_issue_630#test_for_issue_null: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual ,",
            "com.alibaba.json.bvt.bug.Bug_for_issue_630#test_for_issue_one: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual ,",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_long#test_for_error: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay_Image#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_bool#test_for_true: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_bool#test_for_false: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.issue_1600.Issue1683#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.parser.array.BeanToArrayTest_private#test_beanToArray_parse: com.alibaba.fastjson.JSONException: : syntax error,except start with { or [,but actually start with ,",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_float2_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_2#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : ]"
        ],
        "validation_time": 81.69227433204651
    },
    {
        "patch": "public String scanString(char expectNextChar) {\n    matchStat = UNKNOWN;\n\n    int offset = 0;\n    char chLocal = charAt(bp + (offset++));\n\n    if (chLocal == 'n') {\n        if (charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n            offset += 3;\n            chLocal = charAt(bp + (offset++));\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = this.charAt(bp);\n            matchStat = VALUE;\n            return null;\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n    }\n\n    StringBuilder strBuilder = new StringBuilder();\n    for (;;) {\n        if (chLocal == '\"') {\n            int startIndex = bp + offset;\n            int endIndex = indexOf('\"', startIndex);\n            if (endIndex == -1) {\n                throw new JSONException(\"unclosed str\");\n            }\n\n            String stringVal = subString(bp + offset, endIndex - startIndex);\n            if (stringVal.indexOf('\\\\') != -1) {\n                StringBuilder escapedBuilder = new StringBuilder();\n                for (int i = 0; i < stringVal.length(); i++) {\n                    char c = stringVal.charAt(i);\n                    if (c == '\\\\' && i + 1 < stringVal.length()) {\n                        char nextChar = stringVal.charAt(i + 1);\n                        if (nextChar == '\"') {\n                            escapedBuilder.append('\"');\n                            i++; // skip next character\n                        } else {\n                            escapedBuilder.append(c);\n                        }\n                    } else {\n                        escapedBuilder.append(c);\n                    }\n                }\n                stringVal = escapedBuilder.toString();\n            }\n\n            strBuilder.append(stringVal);\n            offset += (endIndex - startIndex + 1);\n            chLocal = charAt(bp + (offset++));\n\n            if (chLocal == expectNextChar) {\n                bp += offset;\n                this.ch = charAt(bp);\n                matchStat = VALUE;\n                return strBuilder.toString();\n            }\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (offset++));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return stringDefaultValue();\n        }\n    }\n}",
        "patched_method_loc": [
            1333,
            1407
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.issue_2300.Issue2351#test_for_issue: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual [",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_0: org.junit.ComparisonFailure: expected:<a\\[]bc> but was:<a\\[\\]bc>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_1: com.alibaba.fastjson.JSONException: : unclosed str",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_0: org.junit.ComparisonFailure: expected:<a\\[]bc> but was:<a\\[\\]bc>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_1: com.alibaba.fastjson.JSONException: : unclosed str",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_2#test_0: org.junit.ComparisonFailure: expected:<abc[&#0;&#1;&#2;&#3;&#4;&#5;&#6;&#7;&#8; "
        ],
        "validation_time": 82.86371660232544
    },
    {
        "patch": "public String scanString(char expectNextChar) {\n    matchStat = UNKNOWN;\n    \n    int offset = 0;\n    char chLocal = charAt(bp + offset);\n\n    if (chLocal == 'n') {\n        if (charAt(bp + offset + 1) == 'u' && charAt(bp + offset + 2) == 'l' && charAt(bp + offset + 3) == 'l') {\n            offset += 4;\n            chLocal = charAt(bp + offset);\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = charAt(bp);\n            matchStat = VALUE;\n            return null;\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n    }\n\n    if (chLocal != '\"') {\n        matchStat = NOT_MATCH;\n        return stringDefaultValue();\n    }\n\n    int startIndex = bp + offset + 1;\n    int endIndex = indexOf('\"', startIndex);\n    if (endIndex == -1) {\n        throw new JSONException(\"unclosed str\");\n    }\n\n    String stringVal = subString(startIndex, endIndex - startIndex);\n    offset += endIndex - startIndex + 2;\n    \n    chLocal = charAt(bp + offset);\n\n    if (chLocal == expectNextChar) {\n        bp += offset;\n        this.ch = charAt(bp);\n        matchStat = VALUE;\n        return stringVal;\n    } else {\n        matchStat = NOT_MATCH;\n        return stringVal;\n    }\n}",
        "patched_method_loc": [
            1333,
            1385
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_double_private#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_0_private#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_enum_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.issue_2300.Issue2351#test_for_issue: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual [",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_list_obj_public#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual ,",
            "com.alibaba.json.bvt.parser.array.BeanToArrayAutoTypeTest#test_for_issue: com.alibaba.fastjson.JSONException: : illegal identifier : 1pos 34, line 1, column 35{\"value\":[\"@type\":\"B\",\"chengchao\",1001]}",
            "com.alibaba.json.bvt.parser.array.BeanToArrayAutoTypeTest#test_for_issue_x: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_jsonType#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual ], pos 0, fastjson-version 1.2.63",
            "com.alibaba.json.bvt.issue_1100.Issue1138#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay_Media#test_0: com.alibaba.fastjson.JSONException: : com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.scanEnum(Lcom/alibaba/fastjson/parser/JSONLexerBase;C)Ljava/lang/Enum;",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_float#test_float: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Object#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.parser.array.BeanToArrayTest#test_beanToArray_parse: com.alibaba.fastjson.JSONException: : illegal identifier : [pos 12, line 1, column 13{\"go\":[[\"0\",[true,false],9999999999999,99,\"012345678901234567890123\",\"ftp://gfw.yma.co/x160\",\"xxxx\",\"9876543210123456\",[[\"m\",\"不要开心\",\"http://gfw.meiya.co\",\"123456@gg.com\",\"麻麻\",\"add\",null,\"9876543210123456\"]],null,[\"add\",\"ww\"],999,1234567890123]],\"success\":true}",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, pos 33, fastjson-version 1.2.63",
            "com.alibaba.json.bvt.bug.Bug_for_issue_465#test_for_issue: com.alibaba.fastjson.JSONException: : expect '[', but ,, pos 7, line 1, column 8[\"abc\",\"efg\",\"sss\",[1,2]]",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping_2#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_float2_private#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Object_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_0: org.junit.ComparisonFailure: expected:<a\\[]bc> but was:<a\\[\\]bc>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_1: org.junit.ComparisonFailure: expected:<a\\[bc\"]> but was:<a\\[\\bc\\]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_list_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.parser.array.BeanToArrayAutoTypeTest2#test_for_issue: com.alibaba.fastjson.JSONException: : illegal identifier : 1pos 34, line 1, column 35{\"value\":[\"@type\":\"B\",\"chengchao\",1001]}",
            "com.alibaba.json.bvt.bug.Issue64#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.IncomingDataPointTest#test_for_IncomingDataPoint: com.alibaba.fastjson.JSONException: : syntax error, expect [, actual ,, pos 71, fieldName tags",
            "com.alibaba.json.bvt.IncomingDataPointTest#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect [, actual ,, pos 16, fieldName tags",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_double#test_float: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Object_2_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_stream_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_list_obj_first_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_double_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.bug.Bug_for_issue_630#test_for_issue_empty: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual ,",
            "com.alibaba.json.bvt.bug.Bug_for_issue_630#test_for_issue_null: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual ,",
            "com.alibaba.json.bvt.bug.Bug_for_issue_630#test_for_issue_one: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual ,",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_long#test_for_error: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay_Image#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_bool#test_for_true: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_bool#test_for_false: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.issue_1600.Issue1683#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.array.BeanToArrayTest_private#test_beanToArray_parse: com.alibaba.fastjson.JSONException: : syntax error,except start with { or [,but actually start with ,",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_float2_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_2#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : ]"
        ],
        "validation_time": 82.1884355545044
    },
    {
        "patch": "public String scanString(char expectNextChar) {\n    matchStat = UNKNOWN;\n\n    int offset = 0;\n    char chLocal = charAt(bp + offset);\n\n    if (chLocal == 'n') {\n        if (charAt(bp + offset + 1) == 'u' && charAt(bp + offset + 2) == 'l' && charAt(bp + offset + 3) == 'l') {\n            offset += 4;\n            chLocal = charAt(bp + offset);\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = charAt(bp);\n            matchStat = VALUE;\n            return null;\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n    }\n\n    final String strVal;\n    for (;;) {\n        if (chLocal == '\"') {\n            int startIndex = bp + offset + 1;\n            int endIndex = indexOf('\"', startIndex);\n            if (endIndex == -1) {\n                throw new JSONException(\"unclosed string\");\n            }\n\n            String stringVal = subString(bp + offset + 1, endIndex - startIndex);\n            if (stringVal.indexOf('\\\\') != -1) {\n                for (; ; ) {\n                    int slashCount = 0;\n                    for (int i = endIndex - 1; i >= 0; --i) {\n                        if (charAt(i) == '\\\\') {\n                            slashCount++;\n                        } else {\n                            break;\n                        }\n                    }\n                    if (slashCount % 2 == 0) {\n                        break;\n                    }\n                    endIndex = indexOf('\"', endIndex + 1);\n                }\n\n                int chars_len = endIndex - startIndex;\n                char[] chars = sub_chars(bp + offset + 1, chars_len);\n\n                stringVal = readString(chars, chars_len);\n            }\n\n            offset += (endIndex - startIndex + 2);\n            chLocal = charAt(bp + offset);\n            strVal = stringVal;\n            break;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (++offset));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return stringDefaultValue();\n        }\n    }\n\n    for (;;) {\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = charAt(bp);\n            matchStat = VALUE;\n            return strVal;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (++offset));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return strVal;\n        }\n    }\n}",
        "patched_method_loc": [
            1333,
            1419
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_double_private#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_0_private#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_enum_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.issue_2300.Issue2351#test_for_issue: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual [",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_list_obj_public#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual ,",
            "com.alibaba.json.bvt.parser.array.BeanToArrayAutoTypeTest#test_for_issue: com.alibaba.fastjson.JSONException: : illegal identifier : 1pos 34, line 1, column 35{\"value\":[\"@type\":\"B\",\"chengchao\",1001]}",
            "com.alibaba.json.bvt.parser.array.BeanToArrayAutoTypeTest#test_for_issue_x: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_jsonType#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual ], pos 0, fastjson-version 1.2.63",
            "com.alibaba.json.bvt.issue_1100.Issue1138#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay_Media#test_0: com.alibaba.fastjson.JSONException: : com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.scanEnum(Lcom/alibaba/fastjson/parser/JSONLexerBase;C)Ljava/lang/Enum;",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_float#test_float: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Object#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.parser.array.BeanToArrayTest#test_beanToArray_parse: com.alibaba.fastjson.JSONException: : illegal identifier : [pos 12, line 1, column 13{\"go\":[[\"0\",[true,false],9999999999999,99,\"012345678901234567890123\",\"ftp://gfw.yma.co/x160\",\"xxxx\",\"9876543210123456\",[[\"m\",\"不要开心\",\"http://gfw.meiya.co\",\"123456@gg.com\",\"麻麻\",\"add\",null,\"9876543210123456\"]],null,[\"add\",\"ww\"],999,1234567890123]],\"success\":true}",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, pos 33, fastjson-version 1.2.63",
            "com.alibaba.json.bvt.bug.Bug_for_issue_465#test_for_issue: com.alibaba.fastjson.JSONException: : expect '[', but ,, pos 7, line 1, column 8[\"abc\",\"efg\",\"sss\",[1,2]]",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping_2#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_float2_private#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Object_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_list_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.parser.array.BeanToArrayAutoTypeTest2#test_for_issue: com.alibaba.fastjson.JSONException: : illegal identifier : 1pos 34, line 1, column 35{\"value\":[\"@type\":\"B\",\"chengchao\",1001]}",
            "com.alibaba.json.bvt.bug.Issue64#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.IncomingDataPointTest#test_for_IncomingDataPoint: com.alibaba.fastjson.JSONException: : syntax error, expect [, actual ,, pos 71, fieldName tags",
            "com.alibaba.json.bvt.IncomingDataPointTest#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect [, actual ,, pos 16, fieldName tags",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_double#test_float: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Object_2_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_stream_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_list_obj_first_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_double_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.bug.Bug_for_issue_630#test_for_issue_empty: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual ,",
            "com.alibaba.json.bvt.bug.Bug_for_issue_630#test_for_issue_null: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual ,",
            "com.alibaba.json.bvt.bug.Bug_for_issue_630#test_for_issue_one: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual ,",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_long#test_for_error: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay_Image#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_bool#test_for_true: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_bool#test_for_false: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.issue_1600.Issue1683#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : ,",
            "com.alibaba.json.bvt.parser.array.BeanToArrayTest_private#test_beanToArray_parse: com.alibaba.fastjson.JSONException: : syntax error,except start with { or [,but actually start with ,",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_float2_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_2#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : ]"
        ],
        "validation_time": 81.62245893478394
    },
    {
        "patch": "public String scanString(char expectNextChar) {\n    matchStat = UNKNOWN;\n\n    int offset = 0;\n    char chLocal = charAt(bp + (offset++));\n\n    if (chLocal == 'n') {\n        if (charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n            offset += 3;\n            chLocal = charAt(bp + (offset++));\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = this.charAt(bp);\n            matchStat = VALUE;\n            return null;\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n    }\n\n    final String strVal;\n    for (;;) {\n        if (chLocal == '\"') {\n            int startIndex = bp + offset;\n            int endIndex = indexOf('\"', startIndex);\n            if (endIndex == -1) {\n                throw new JSONException(\"unclosed str\");\n            }\n\n            String stringVal = subString(bp + offset, endIndex - startIndex);\n            // Check for escaped characters\n            if (stringVal.indexOf('\\\\') != -1) {\n                StringBuilder sb = new StringBuilder();\n                int startIndexEscape = 0;\n                while (startIndexEscape < stringVal.length()) {\n                    int escapeIndex = stringVal.indexOf('\\\\', startIndexEscape);\n                    if (escapeIndex == -1) {\n                        sb.append(stringVal.substring(startIndexEscape));\n                        break;\n                    } else {\n                        sb.append(stringVal, startIndexEscape, escapeIndex);\n                        char escapeChar = stringVal.charAt(escapeIndex + 1);\n                        if (escapeChar == 't') {\n                            sb.append('\\t');\n                        } else if (escapeChar == 'n') {\n                            sb.append('\\n');\n                        } else if (escapeChar == 'r') {\n                            sb.append('\\r');\n                        } else {\n                            sb.append(escapeChar);\n                        }\n                        startIndexEscape = escapeIndex + 2;\n                    }\n                }\n                stringVal = sb.toString();\n            }\n\n            offset += (endIndex - startIndex + 1);\n            chLocal = charAt(bp + (offset++));\n            strVal = stringVal;\n            break;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (offset++));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return stringDefaultValue();\n        }\n    }\n\n    for (;;) {\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = charAt(bp);\n            matchStat = VALUE;\n            return strVal;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (offset++));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return strVal;\n        }\n    }\n}",
        "patched_method_loc": [
            1333,
            1424
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.issue_2300.Issue2351#test_for_issue: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual [",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_1: com.alibaba.fastjson.JSONException: : String index out of range: 6",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_1: com.alibaba.fastjson.JSONException: : String index out of range: 6",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_2#test_0: org.junit.ComparisonFailure: expected:<abc[&#0;&#1;&#2;&#3;&#4;&#5;&#6;&#7;&#8; "
        ],
        "validation_time": 83.12169432640076
    },
    {
        "patch": "public String scanString(char expectNextChar) {\n    matchStat = UNKNOWN;\n\n    int offset = 0;\n    char chLocal = charAt(bp + (offset++));\n\n    final String strVal;\n    for (;;) {\n        if (chLocal == '\"') {\n            int startIndex = bp + offset;\n            int endIndex = indexOf('\"', startIndex);\n            if (endIndex == -1) {\n                throw new JSONException(\"unclosed str\");\n            }\n\n            String stringVal = subString(bp + offset, endIndex - startIndex);\n            // Skip escaped characters\n            if (stringVal.indexOf('\\\\') != -1) {\n                StringBuilder sb = new StringBuilder();\n                int i = 0;\n                while (i < stringVal.length()) {\n                    char c = stringVal.charAt(i);\n                    if (c == '\\\\') {\n                        if (i + 1 < stringVal.length()) {\n                            char nextChar = stringVal.charAt(i + 1);\n                            if (nextChar == '\"' || nextChar == '\\\\') {\n                                sb.append(nextChar);\n                                i++;\n                            }\n                        }\n                    } else {\n                        sb.append(c);\n                    }\n                    i++;\n                }\n                stringVal = sb.toString();\n            }\n\n            offset += (endIndex - startIndex + 1);\n            chLocal = charAt(bp + (offset++));\n            strVal = stringVal;\n            break;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (offset++));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return stringDefaultValue();\n        }\n    }\n\n    for (;;) {\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = charAt(bp);\n            matchStat = VALUE;\n            return strVal;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (offset++));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return strVal;\n        }\n    }\n}",
        "patched_method_loc": [
            1333,
            1399
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.issue_2300.Issue2351#test_for_issue: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual [",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay_Media#test_0: com.alibaba.fastjson.JSONException: : 123",
            "com.alibaba.json.bvt.parser.array.BeanToArrayTest#test_beanToArray_parse: com.alibaba.fastjson.JSONException: : syntax error, expect null, actual null",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay#test_0: com.alibaba.fastjson.JSONException: : No enum constant data.media.Media.Player.video/mpg4",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : null",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_1: org.junit.ComparisonFailure: expected:<a\\bc[\"]> but was:<a\\bc[]>",
            "com.alibaba.json.bvt.IncomingDataPointTest#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : ]",
            "com.alibaba.json.bvt.bug.Bug_for_issue_630#test_for_issue_empty: com.alibaba.fastjson.JSONException: : not close json text, token : null",
            "com.alibaba.json.bvt.bug.Bug_for_issue_630#test_for_issue_null: com.alibaba.fastjson.JSONException: : not close json text, token : null",
            "com.alibaba.json.bvt.bug.Bug_for_issue_630#test_for_issue_one: com.alibaba.fastjson.JSONException: : not close json text, token : null",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay_Image#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : int",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.array.BeanToArrayTest_private#test_beanToArray_parse: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, pos 186, fastjson-version 1.2.63",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_2#test_0: org.junit.ComparisonFailure: expected:<abc[&#0;&#1;&#2;&#3;&#4;&#5;&#6;&#7;&#8; "
        ],
        "validation_time": 80.97671675682068
    },
    {
        "patch": "public String scanString(char expectNextChar) {\n    matchStat = UNKNOWN;\n\n    int offset = 0;\n    char chLocal = charAt(bp + (offset++));\n\n    if (chLocal == 'n') {\n        if (charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n            offset += 3;\n            chLocal = charAt(bp + (offset++));\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = this.charAt(bp);\n            matchStat = VALUE;\n            return null;\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n    }\n\n    StringBuilder strValBuilder = new StringBuilder();\n    boolean escaped = false;\n    for (;;) {\n        if (chLocal == '\"') {\n            int startIndex = bp + offset;\n            int endIndex = indexOf('\"', startIndex);\n            if (endIndex == -1) {\n                throw new JSONException(\"unclosed str\");\n            }\n\n            String stringVal = subString(bp + offset, endIndex - startIndex);\n            strValBuilder.append(stringVal);\n\n            for (int i = startIndex; i < endIndex; i++) {\n                if (charAt(i) == '\\\\' && !escaped) {\n                    escaped = true;\n                } else {\n                    strValBuilder.append(charAt(i));\n                    escaped = false;\n                }\n            }\n\n            offset += (endIndex - startIndex + 1);\n            chLocal = charAt(bp + (offset++));\n            break;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (offset++));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return stringDefaultValue();\n        }\n    }\n\n    String strVal = strValBuilder.toString();\n\n    for (;;) {\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = charAt(bp);\n            matchStat = VALUE;\n            return strVal;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (offset++));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return strVal;\n        }\n    }\n}",
        "patched_method_loc": [
            1333,
            1410
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_double_private#test_0: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_0_private#test_0: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_enum_public#test_0: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.issue_2300.Issue2351#test_for_issue: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual [",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_list_obj_public#test_0: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.parser.array.BeanToArrayAutoTypeTest#test_for_issue: junit.framework.ComparisonFailure: expected:<...type\":\"B\",\"chengchao[]\",1001]}> but was:<...type\":\"B\",\"chengchao[chengchao]\",1001]}>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_jsonType#test_0: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay_Media#test_0: org.junit.ComparisonFailure: expected:<xx[]> but was:<xx[xx]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_0: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_1: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_2: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_1_stream: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_2_stream: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_long_stream#test_for_error: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_float#test_float: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Object#test_0: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.parser.array.BeanToArrayTest#test_beanToArray_parse: org.junit.ComparisonFailure: expected:<0[]> but was:<0[0]>",
            "com.alibaba.json.bvt.bug.Bug_for_issue_465#test_for_issue: org.junit.ComparisonFailure: expected:<abc[]> but was:<abc[abc]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_float2_private#test_0: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string#test_1: org.junit.ComparisonFailure: expected:<abc[]> but was:<abc[abc]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Object_public#test_0: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_0: org.junit.ComparisonFailure: expected:<a\\[]bc> but was:<a\\[\\bca\\]bc>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_1: org.junit.ComparisonFailure: expected:<a\\[bc\"]> but was:<a\\[\\bc\\a\\bc]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_list_public#test_0: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.parser.array.BeanToArrayAutoTypeTest2#test_for_issue: junit.framework.ComparisonFailure: expected:<...type\":\"B\",\"chengchao[]\",1001]}> but was:<...type\":\"B\",\"chengchao[chengchao]\",1001]}>",
            "com.alibaba.json.bvt.bug.Issue64#test_for_issue: org.junit.ComparisonFailure: expected:<xxxxxx[xxxxxx]> but was:<xxxxxx[]>",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_double#test_float: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Object_2_public#test_0: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_stream_public#test_0: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_list_obj_first_public#test_0: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_double_public#test_0: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_long#test_for_error: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay_Image#test_0: org.junit.ComparisonFailure: expected:<xx[]> but was:<xx[xx]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_0: org.junit.ComparisonFailure: expected:<a\\[]bc> but was:<a\\[\\bca\\]bc>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_bool#test_for_true: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_bool#test_for_false: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.issue_1600.Issue1683#test_for_issue: junit.framework.ComparisonFailure: expected:<浪漫奇侠[]> but was:<浪漫奇侠[浪漫奇侠]>",
            "com.alibaba.json.bvt.parser.array.BeanToArrayTest_private#test_beanToArray_parse: org.junit.ComparisonFailure: expected:<0[]> but was:<0[0]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_float2_public#test_0: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_2#test_0: org.junit.ComparisonFailure: expected:<abc[&#0;&#1;&#2;&#3;&#4;&#5;&#6;&#7;&#8; ",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_0: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_1: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_2: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_1_stream: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_2_stream: org.junit.ComparisonFailure: expected:<wenshao[]> but was:<wenshao[wenshao]>"
        ],
        "validation_time": 81.71570873260498
    },
    {
        "patch": "public String scanString(char expectNextChar) {\n    matchStat = UNKNOWN;\n\n    int offset = 0;\n    char chLocal = charAt(bp + (offset++));\n\n    if (chLocal == 'n') {\n        if (charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n            offset += 3;\n            chLocal = charAt(bp + (offset++));\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = this.charAt(bp);\n            matchStat = VALUE;\n            return null;\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n    }\n\n    StringBuilder strBuilder = new StringBuilder();\n    for (;;) {\n        if (chLocal == '\"') {\n            int startIndex = bp + offset + 1;\n            int endIndex = indexOf('\"', startIndex);\n            if (endIndex == -1) {\n                throw new JSONException(\"unclosed str\");\n            }\n\n            String stringVal = subString(startIndex, endIndex - startIndex);\n            offset += (endIndex - startIndex + 1);\n            chLocal = charAt(bp + offset);\n\n            if (chLocal == expectNextChar) {\n                bp += offset + 1;\n                this.ch = charAt(bp);\n                matchStat = VALUE;\n                return stringVal;\n            } else if (isWhitespace(chLocal)) {\n                chLocal = charAt(bp + (offset++));\n                continue;\n            } else {\n                matchStat = NOT_MATCH;\n                return stringDefaultValue();\n            }\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (offset++));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return stringDefaultValue();\n        }\n    }\n}",
        "patched_method_loc": [
            1333,
            1393
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_double_private#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_0_private#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_enum_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.issue_2300.Issue2351#test_for_issue: com.alibaba.fastjson.JSONException: : unclosed str",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_list_obj_public#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect string, actual string",
            "com.alibaba.json.bvt.parser.array.BeanToArrayAutoTypeTest#test_for_issue: com.alibaba.fastjson.JSONException: : illegal identifier : 1pos 34, line 1, column 35{\"value\":[\"@type\":\"B\",\"chengchao\",1001]}",
            "com.alibaba.json.bvt.parser.array.BeanToArrayAutoTypeTest#test_for_issue_x: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_jsonType#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, pos 11, fastjson-version 1.2.63",
            "com.alibaba.json.bvt.issue_1100.Issue1138#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay_Media#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_1_stream: java.lang.AssertionError: expected:<wenshao> but was:<null>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_2_stream: java.lang.AssertionError: expected:<wenshao> but was:<null>",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_long_stream#test_for_error: java.lang.AssertionError: expected:<wenshao> but was:<null>",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_float#test_float: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Object#test_0: com.alibaba.fastjson.JSONException: : syntax error",
            "com.alibaba.json.bvt.parser.array.BeanToArrayTest#test_beanToArray_parse: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, pos 8, fieldName co, fastjson-version 1.2.63",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect string, actual string",
            "com.alibaba.json.bvt.bug.Bug_for_issue_465#test_for_issue: com.alibaba.fastjson.JSONException: : [B cannot be cast to [I",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping_2#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_float2_private#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Object_public#test_0: com.alibaba.fastjson.JSONException: : syntax error",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_0: java.lang.AssertionError: expected:<a\\bc> but was:<null>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_1: java.lang.AssertionError: expected:<a\\bc\"> but was:<null>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_list_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.array.BeanToArrayAutoTypeTest2#test_for_issue: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, pos 22, fastjson-version 1.2.63",
            "com.alibaba.json.bvt.bug.Issue64#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.IncomingDataPointTest#test_for_IncomingDataPoint: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, fieldName tags, pos 71, line 1, column 72[[\"DataAdaptor.LbMultiGroupPersonalityDataAdaptor.stddev.aggregate_sum\",\"1501812639932\",\"95.52667633256902\",{\"appName\":\"aladdin\",\"hostIdc\":\"et2\",\"hostunit\":\"CENTER\",\"nodegroup\":\"aladdin_prehost\",\"idc\":\"ET2\",\"agg_version\":\"100\",\"group\":\"DEFAULT\"},\"\",\"\",\"\"]]",
            "com.alibaba.json.bvt.IncomingDataPointTest#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, fieldName tags, pos 16, line 1, column 17[[\"mem.usage.GB\",1501760861298,\"58.41\",{\"site\":\"et2\",\"appname\":\"histore\",\"ip\":\"1.1.1.1\"},\"\",null,\"\"]]",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_double#test_float: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Object_2_public#test_0: com.alibaba.fastjson.JSONException: : syntax error",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_stream_public#test_0: java.lang.AssertionError: expected:<wenshao> but was:<null>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_list_obj_first_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_double_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_long#test_for_error: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay_Image#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_bool#test_for_true: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_bool#test_for_false: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.issue_1600.Issue1683#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.array.BeanToArrayTest_private#test_beanToArray_parse: com.alibaba.fastjson.JSONException: : syntax error,except start with { or [,but actually start with string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_float2_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_2#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_1_stream: java.lang.AssertionError: expected:<wenshao> but was:<null>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_2_stream: java.lang.AssertionError: expected:<wenshao> but was:<null>"
        ],
        "validation_time": 83.837477684021
    },
    {
        "patch": "public String scanString(char expectNextChar) {\n    matchStat = UNKNOWN;\n\n    int offset = 0;\n    char chLocal = charAt(bp + (offset++));\n\n    if (chLocal == 'n') {\n        if (charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n            offset += 3;\n            chLocal = charAt(bp + (offset++));\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = charAt(bp);\n            matchStat = VALUE;\n            return null;\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n    }\n\n    final String strVal;\n    for (;;) {\n        if (chLocal == '\"') {\n            int startIndex = bp + offset;\n            int endIndex = indexOf('\"', startIndex);\n            if (endIndex == -1) {\n                throw new JSONException(\"unclosed str\");\n            }\n\n            String stringVal = subString(bp + offset, endIndex - startIndex);\n            if (stringVal.indexOf('\\\\') != -1) {\n                // Handle escape characters in the string\n                stringVal = readString(stringVal);\n            }\n\n            offset += (endIndex - startIndex + 1);\n            chLocal = charAt(bp + (offset++));\n            strVal = stringVal;\n            break;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (offset++));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return stringDefaultValue();\n        }\n    }\n\n    if (chLocal != expectNextChar) {\n        throw new JSONException(\"Expected character '\" + expectNextChar + \"' not found\");\n    }\n\n    bp += offset;\n    this.ch = charAt(bp);\n    matchStat = VALUE;\n    return strVal;\n}",
        "patched_method_loc": [
            1333,
            1396
        ],
        "status": "[CE]",
        "error_message": [
            "[1371,29] method readString in class com.alibaba.fastjson.parser.JSONLexerBase cannot be applied to given types;\n  required: char[],int\n  found: java.lang.String\n  reason: actual and formal argument lists differ in length"
        ],
        "validation_time": 3.2239623069763184
    },
    {
        "patch": "public String scanString(char expectNextChar) {\n    matchStat = UNKNOWN;\n\n    int offset = 0;\n    char chLocal = charAt(bp + (offset++));\n\n    if (chLocal == 'n') {\n        if (charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n            offset += 3;\n            chLocal = charAt(bp + (offset++));\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = this.charAt(bp);\n            matchStat = VALUE;\n            return null;\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n    }\n\n    final String strVal;\n    for (;;) {\n        if (chLocal == '\"') {\n            int startIndex = bp + offset;\n            int endIndex = indexOf('\"', startIndex);\n            if (endIndex == -1) {\n                throw new JSONException(\"unclosed str\");\n            }\n\n            String stringVal = subString(bp + offset, endIndex - startIndex);\n            if (stringVal.indexOf('\\\\') != -1) {\n                StringBuilder sb = new StringBuilder();\n                for (int i = 0; i < stringVal.length(); i++) {\n                    char c = stringVal.charAt(i);\n                    if (c == '\\\\') {\n                        if (i + 1 < stringVal.length()) {\n                            char nextChar = stringVal.charAt(i + 1);\n                            if (nextChar == '\\\\') {\n                                sb.append('\\\\');\n                                i++; // skip the next character\n                            } else if (nextChar == '\"') {\n                                sb.append('\"');\n                                i++; // skip the next character\n                            } // Add more escape sequences as needed\n                        }\n                    } else {\n                        sb.append(c);\n                    }\n                }\n                stringVal = sb.toString();\n            }\n\n            offset += (endIndex - startIndex + 1);\n            chLocal = charAt(bp + (offset++));\n            strVal = stringVal;\n            break;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (offset++));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return stringDefaultValue();\n        }\n    }\n\n    for (;;) {\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = charAt(bp);\n            matchStat = VALUE;\n            return strVal;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (offset++));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return strVal;\n        }\n    }\n}",
        "patched_method_loc": [
            1333,
            1419
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.issue_2300.Issue2351#test_for_issue: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual [",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_1: org.junit.ComparisonFailure: expected:<a\\bc[\"]> but was:<a\\bc[]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_2#test_0: org.junit.ComparisonFailure: expected:<abc[&#0;&#1;&#2;&#3;&#4;&#5;&#6;&#7;&#8; "
        ],
        "validation_time": 81.54137516021729
    },
    {
        "patch": "public String scanString(char expectNextChar) {\n    matchStat = UNKNOWN;\n\n    int offset = 0;\n    char chLocal = charAt(bp + (offset++));\n\n    if (chLocal == 'n') {\n        if (charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n            offset += 3;\n            chLocal = charAt(bp + (offset++));\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = this.charAt(bp);\n            matchStat = VALUE;\n            return null;\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n    }\n\n    String strVal = \"\";\n    for (;;) {\n        if (chLocal == '\"') {\n            int startIndex = bp + offset;\n            int endIndex = indexOf('\"', startIndex);\n            if (endIndex == -1) {\n                throw new JSONException(\"unclosed str\");\n            }\n\n            String stringVal = subString(startIndex, endIndex - startIndex);\n            if (stringVal.indexOf('\\\\') != -1) {\n                int chars_len = endIndex - startIndex;\n                char[] chars = sub_chars(startIndex, chars_len);\n\n                stringVal = readString(chars, chars_len);\n            }\n\n            offset += (endIndex - startIndex + 1);\n            chLocal = charAt(bp + (offset++));\n            strVal = stringVal;\n            break;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (offset++));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return stringDefaultValue();\n        }\n    }\n\n    for (;;) {\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = charAt(bp);\n            matchStat = VALUE;\n            return strVal;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (offset++));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return strVal;\n        }\n    }\n}",
        "patched_method_loc": [
            1333,
            1404
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.issue_2300.Issue2351#test_for_issue: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual [",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_1: java.lang.AbstractMethodError: : java.lang.Throwable.getMessage()Ljava/lang/String;",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_1: java.lang.AbstractMethodError: : java.lang.Throwable.getMessage()Ljava/lang/String;",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string"
        ],
        "validation_time": 81.65826463699341
    },
    {
        "patch": "public String scanString(char expectNextChar) {\n    matchStat = UNKNOWN;\n\n    int offset = 0;\n    char chLocal = charAt(bp + (offset++));\n\n    if (chLocal == 'n') {\n        if (charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n            offset += 3;\n            chLocal = charAt(bp + (offset++));\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = this.charAt(bp);\n            matchStat = VALUE;\n            return null;\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n    }\n\n    StringBuilder strBuilder = new StringBuilder();\n    for (;;) {\n        if (chLocal == '\"') {\n            int startIndex = bp + offset;\n            int endIndex = indexOf('\"', startIndex);\n            if (endIndex == -1) {\n                throw new JSONException(\"unclosed str\");\n            }\n\n            String stringVal = subString(bp + offset, endIndex - startIndex);\n            offset += (endIndex - startIndex + 1);\n\n            // Handle escape characters in the string\n            stringVal = stringVal.replace(\"\\\\\\\"\", \"\\\"\")\n                                 .replace(\"\\\\\\\\\", \"\\\\\");\n\n            strBuilder.append(stringVal);\n            chLocal = charAt(bp + (offset++));\n\n            break;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (offset++));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return stringDefaultValue();\n        }\n    }\n\n    String strVal = strBuilder.toString();\n\n    for (;;) {\n        if (chLocal == expectNextChar) {\n            bp += offset;\n            this.ch = charAt(bp);\n            matchStat = VALUE;\n            return strVal;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (offset++));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return strVal;\n        }\n    }\n}",
        "patched_method_loc": [
            1333,
            1405
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.issue_2300.Issue2351#test_for_issue: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual [",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_1: org.junit.ComparisonFailure: expected:<a\\bc[\"]> but was:<a\\bc[\\]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_2#test_0: org.junit.ComparisonFailure: expected:<abc[&#0;&#1;&#2;&#3;&#4;&#5;&#6;&#7;&#8; "
        ],
        "validation_time": 82.37120509147644
    },
    {
        "patch": "public String scanString(char expectNextChar) {\n    matchStat = UNKNOWN;\n\n    int offset = 0;\n    char chLocal = charAt(bp + offset);\n\n    if (chLocal == 'n') {\n        if (charAt(bp + offset + 1) == 'u' && charAt(bp + offset + 2) == 'l' && charAt(bp + offset + 3) == 'l') {\n            offset += 4;\n            chLocal = charAt(bp + offset);\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n\n        if (chLocal == expectNextChar) {\n            bp += offset + 1;\n            this.ch = charAt(bp);\n            matchStat = VALUE;\n            return null;\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n    }\n\n    final String strVal;\n    for (;;) {\n        if (chLocal == '\"') {\n            int startIndex = bp + offset + 1;\n            int endIndex = indexOf('\"', startIndex);\n            if (endIndex == -1) {\n                throw new JSONException(\"unclosed str\");\n            }\n\n            String stringVal = subString(startIndex, endIndex - startIndex);\n            if (stringVal.indexOf('\\\\') != -1) {\n                StringBuilder sb = new StringBuilder();\n                for (int i = 0; i < stringVal.length(); i++) {\n                    char c = stringVal.charAt(i);\n                    if (c == '\\\\') {\n                        if (i + 1 < stringVal.length()) {\n                            i++;\n                            char escaped = stringVal.charAt(i);\n                            if (escaped == 't') {\n                                sb.append('\\t');\n                            } else if (escaped == 'n') {\n                                sb.append('\\n');\n                            } else if (escaped == 'r') {\n                                sb.append('\\r');\n                            } else {\n                                sb.append(escaped);\n                            }\n                        }\n                    } else {\n                        sb.append(c);\n                    }\n                }\n                stringVal = sb.toString();\n            }\n\n            offset += (endIndex - startIndex + 1);\n            chLocal = charAt(bp + offset);\n            strVal = stringVal;\n            break;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + ++offset);\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return stringDefaultValue();\n        }\n    }\n\n    for (;;) {\n        if (chLocal == expectNextChar) {\n            bp += offset + 1;\n            this.ch = charAt(bp);\n            matchStat = VALUE;\n            return strVal;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + ++offset);\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return strVal;\n        }\n    }\n}",
        "patched_method_loc": [
            1333,
            1422
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_double_private#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_0_private#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_enum_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.issue_2300.Issue2351#test_for_issue: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual [",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_list_obj_public#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect string, actual string",
            "com.alibaba.json.bvt.parser.array.BeanToArrayAutoTypeTest#test_for_issue: com.alibaba.fastjson.JSONException: : illegal identifier : 1pos 34, line 1, column 35{\"value\":[\"@type\":\"B\",\"chengchao\",1001]}",
            "com.alibaba.json.bvt.parser.array.BeanToArrayAutoTypeTest#test_for_issue_x: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_jsonType#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, pos 11, fastjson-version 1.2.63",
            "com.alibaba.json.bvt.issue_1100.Issue1138#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay_Media#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_float#test_float: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Object#test_0: com.alibaba.fastjson.JSONException: : syntax error",
            "com.alibaba.json.bvt.parser.array.BeanToArrayTest#test_beanToArray_parse: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, pos 8, fieldName co, fastjson-version 1.2.63",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect string, actual string",
            "com.alibaba.json.bvt.bug.Bug_for_issue_465#test_for_issue: com.alibaba.fastjson.JSONException: : [B cannot be cast to [I",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping_2#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_float2_private#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Object_public#test_0: com.alibaba.fastjson.JSONException: : syntax error",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_1: org.junit.ComparisonFailure: expected:<a\\bc[\"]> but was:<a\\bc[]>",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_list_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.array.BeanToArrayAutoTypeTest2#test_for_issue: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, pos 22, fastjson-version 1.2.63",
            "com.alibaba.json.bvt.bug.Issue64#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.IncomingDataPointTest#test_for_IncomingDataPoint: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, fieldName tags, pos 71, line 1, column 72[[\"DataAdaptor.LbMultiGroupPersonalityDataAdaptor.stddev.aggregate_sum\",\"1501812639932\",\"95.52667633256902\",{\"appName\":\"aladdin\",\"hostIdc\":\"et2\",\"hostunit\":\"CENTER\",\"nodegroup\":\"aladdin_prehost\",\"idc\":\"ET2\",\"agg_version\":\"100\",\"group\":\"DEFAULT\"},\"\",\"\",\"\"]]",
            "com.alibaba.json.bvt.IncomingDataPointTest#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, fieldName tags, pos 16, line 1, column 17[[\"mem.usage.GB\",1501760861298,\"58.41\",{\"site\":\"et2\",\"appname\":\"histore\",\"ip\":\"1.1.1.1\"},\"\",null,\"\"]]",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_double#test_float: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Object_2_public#test_0: com.alibaba.fastjson.JSONException: : syntax error",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_stream_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_list_obj_first_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_double_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_long#test_for_error: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay_Image#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_bool#test_for_true: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_bool#test_for_false: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.issue_1600.Issue1683#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.array.BeanToArrayTest_private#test_beanToArray_parse: com.alibaba.fastjson.JSONException: : syntax error,except start with { or [,but actually start with string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_float2_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_2#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string"
        ],
        "validation_time": 81.20142078399658
    },
    {
        "patch": "public String scanString(char expectNextChar) {\n    matchStat = UNKNOWN;\n\n    int offset = 0;\n    char chLocal = charAt(bp + offset);\n\n    if (chLocal == 'n') {\n        if (charAt(bp + offset + 1) == 'u' && charAt(bp + offset + 2) == 'l' && charAt(bp + offset + 3) == 'l') {\n            offset += 4;\n            chLocal = charAt(bp + offset);\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n\n        if (chLocal == expectNextChar) {\n            bp += offset + 1;\n            this.ch = charAt(bp);\n            matchStat = VALUE;\n            return null;\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n    }\n\n    final String strVal;\n    for (;;) {\n        if (chLocal == '\"') {\n            int startIndex = bp + offset + 1;\n            int endIndex = indexOf('\"', startIndex);\n            if (endIndex == -1) {\n                throw new JSONException(\"unclosed str\");\n            }\n\n            String stringVal = subString(bp + offset + 1, endIndex - startIndex);\n            if (stringVal.indexOf('\\\\') != -1) {\n                for (;;) {\n                    int slashCount = 0;\n                    for (int i = endIndex - 1; i >= 0; --i) {\n                        if (charAt(i) == '\\\\') {\n                            slashCount++;\n                        } else {\n                            break;\n                        }\n                    }\n                    if (slashCount % 2 == 0) {\n                        break;\n                    }\n                    endIndex = indexOf('\"', endIndex + 1);\n                }\n\n                int chars_len = endIndex - startIndex;\n                char[] chars = sub_chars(bp + offset + 1, chars_len);\n\n                stringVal = readString(chars, chars_len);\n            }\n\n            offset += (endIndex - startIndex + 2);\n            chLocal = charAt(bp + offset);\n            strVal = stringVal;\n            break;\n        } else if (isWhitespace(chLocal)) {\n            offset++;\n            chLocal = charAt(bp + offset);\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return stringDefaultValue();\n        }\n    }\n\n    for (;;) {\n        if (chLocal == expectNextChar) {\n            bp += offset + 1;\n            this.ch = charAt(bp);\n            matchStat = VALUE;\n            return strVal;\n        } else if (isWhitespace(chLocal)) {\n            offset++;\n            chLocal = charAt(bp + offset);\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return strVal;\n        }\n    }\n}",
        "patched_method_loc": [
            1333,
            1421
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.issue_2300.Issue2351#test_for_issue: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual [",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string"
        ],
        "validation_time": 82.20049548149109
    },
    {
        "patch": "public String scanString(char expectNextChar) {\n    matchStat = UNKNOWN;\n\n    int offset = 0;\n    char chLocal = charAt(bp + offset);\n\n    if (chLocal == 'n') {\n        if (charAt(bp + offset + 1) == 'u' && charAt(bp + offset + 2) == 'l' && charAt(bp + offset + 3) == 'l') {\n            offset += 4;\n            chLocal = charAt(bp + offset);\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n\n        if (chLocal == expectNextChar) {\n            bp += offset + 1;\n            this.ch = charAt(bp);\n            matchStat = VALUE;\n            return null;\n        } else {\n            matchStat = NOT_MATCH;\n            return null;\n        }\n    }\n\n    StringBuilder strBuilder = new StringBuilder();\n    for (;;) {\n        if (chLocal == '\"') {\n            int startIndex = bp + offset + 1;\n            int endIndex = indexOf('\"', startIndex);\n            if (endIndex == -1) {\n                throw new JSONException(\"unclosed str\");\n            }\n\n            String stringVal = subString(bp + offset + 1, endIndex - startIndex);\n            if (stringVal.contains(\"\\\\\")) {\n                stringVal = readString(stringVal.toCharArray(), stringVal.length());\n            }\n\n            offset += (endIndex - startIndex + 2);\n            chLocal = charAt(bp + offset);\n            return stringVal;\n        } else if (isWhitespace(chLocal)) {\n            chLocal = charAt(bp + (++offset));\n            continue;\n        } else {\n            matchStat = NOT_MATCH;\n            return stringDefaultValue();\n        }\n    }\n}",
        "patched_method_loc": [
            1333,
            1385
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_double_private#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_0_private#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_enum_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.issue_2300.Issue2351#test_for_issue: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual [",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_list_obj_public#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect string, actual string",
            "com.alibaba.json.bvt.parser.array.BeanToArrayAutoTypeTest#test_for_issue: com.alibaba.fastjson.JSONException: : illegal identifier : 1pos 34, line 1, column 35{\"value\":[\"@type\":\"B\",\"chengchao\",1001]}",
            "com.alibaba.json.bvt.parser.array.BeanToArrayAutoTypeTest#test_for_issue_x: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_jsonType#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, pos 11, fastjson-version 1.2.63",
            "com.alibaba.json.bvt.issue_1100.Issue1138#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay_Media#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_int_public#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_float#test_float: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Object#test_0: com.alibaba.fastjson.JSONException: : syntax error",
            "com.alibaba.json.bvt.parser.array.BeanToArrayTest#test_beanToArray_parse: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, pos 8, fieldName co, fastjson-version 1.2.63",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect string, actual string",
            "com.alibaba.json.bvt.bug.Bug_for_issue_465#test_for_issue: com.alibaba.fastjson.JSONException: : [B cannot be cast to [I",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping_2#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_float2_private#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Object_public#test_0: com.alibaba.fastjson.JSONException: : syntax error",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_1: java.lang.AbstractMethodError: : java.lang.Throwable.getMessage()Ljava/lang/String;",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_list_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.array.BeanToArrayAutoTypeTest2#test_for_issue: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, pos 22, fastjson-version 1.2.63",
            "com.alibaba.json.bvt.bug.Issue64#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.IncomingDataPointTest#test_for_IncomingDataPoint: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, fieldName tags, pos 71, line 1, column 72[[\"DataAdaptor.LbMultiGroupPersonalityDataAdaptor.stddev.aggregate_sum\",\"1501812639932\",\"95.52667633256902\",{\"appName\":\"aladdin\",\"hostIdc\":\"et2\",\"hostunit\":\"CENTER\",\"nodegroup\":\"aladdin_prehost\",\"idc\":\"ET2\",\"agg_version\":\"100\",\"group\":\"DEFAULT\"},\"\",\"\",\"\"]]",
            "com.alibaba.json.bvt.IncomingDataPointTest#test_0: com.alibaba.fastjson.JSONException: : syntax error, expect {, actual string, fieldName tags, pos 16, line 1, column 17[[\"mem.usage.GB\",1501760861298,\"58.41\",{\"site\":\"et2\",\"appname\":\"histore\",\"ip\":\"1.1.1.1\"},\"\",null,\"\"]]",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_double#test_float: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Object_2_public#test_0: com.alibaba.fastjson.JSONException: : syntax error",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_stream_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_list_obj_first_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_double_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_long#test_for_error: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_Eishay_Image#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_1: java.lang.AbstractMethodError: : java.lang.Throwable.getMessage()Ljava/lang/String;",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_bool#test_for_true: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.deser.arraymapping.ArrayMapping_bool#test_for_false: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.issue_1600.Issue1683#test_for_issue: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.parser.array.BeanToArrayTest_private#test_beanToArray_parse: com.alibaba.fastjson.JSONException: : syntax error,except start with { or [,but actually start with string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_float2_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_2#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_0: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_1: com.alibaba.fastjson.JSONException: : not close json text, token : string",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_long_public#test_2: com.alibaba.fastjson.JSONException: : not close json text, token : string"
        ],
        "validation_time": 81.12117218971252
    },
    {
        "patch": "public String scanString(char expectNextChar) {\n    int offset = 0;\n    char chLocal = charAt(bp + offset);\n\n    if (chLocal == 'n') {\n        if (charAt(bp + offset + 1) == 'u' && charAt(bp + offset + 2) == 'l' && charAt(bp + offset + 3) == 'l') {\n            offset += 4;\n            chLocal = charAt(bp + offset);\n        } else {\n            throw new JSONException(\"Unexpected character sequence\");\n        }\n\n        if (chLocal == expectNextChar) {\n            bp += offset + 1;\n            this.ch = this.charAt(bp);\n            return null;\n        } else {\n            throw new JSONException(\"Unexpected character\");\n        }\n    }\n\n    if (chLocal != '\"') {\n        throw new JSONException(\"String value expected\");\n    }\n\n    int startIndex = bp + offset + 1;\n    int endIndex = indexOf('\"', startIndex);\n    if (endIndex == -1) {\n        throw new JSONException(\"Unclosed string\");\n    }\n\n    String stringVal = subString(startIndex, endIndex - startIndex);\n    if (stringVal.indexOf('\\\\') != -1) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < stringVal.length(); i++) {\n            char c = stringVal.charAt(i);\n            if (c == '\\\\') {\n                if (i + 1 < stringVal.length()) {\n                    char nextChar = stringVal.charAt(i + 1);\n                    if (nextChar == '\\\\' || nextChar == '\"') {\n                        sb.append(nextChar);\n                        i++;\n                    }\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        stringVal = sb.toString();\n    }\n\n    offset = endIndex - bp - offset + 1;\n    chLocal = charAt(bp + offset);\n\n    if (chLocal != expectNextChar) {\n        throw new JSONException(\"Unexpected character\");\n    }\n\n    bp += offset + 1;\n    this.ch = charAt(bp);\n    return stringVal;\n}",
        "patched_method_loc": [
            1333,
            1395
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.issue_2300.Issue2351#test_for_issue: com.alibaba.fastjson.JSONException: : syntax error, expect ,, actual [",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_Reader#test_1: com.alibaba.fastjson.JSONException: : Unexpected character",
            "com.alibaba.json.bvt.IncomingDataPointTest#test_0: com.alibaba.fastjson.JSONException: : String value expected",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special#test_1: com.alibaba.fastjson.JSONException: : Unexpected character",
            "com.alibaba.json.bvt.JSONTypeTest_orders_arrayMapping#test_2: com.alibaba.fastjson.JSONException: : Unexpected character",
            "com.alibaba.json.bvt.issue_1600.Issue1683#test_for_issue: com.alibaba.fastjson.JSONException: : String value expected",
            "com.alibaba.json.bvt.writeAsArray.WriteAsArray_string_special_2#test_0: org.junit.ComparisonFailure: expected:<abc[&#0;&#1;&#2;&#3;&#4;&#5;&#6;&#7;&#8; "
        ],
        "validation_time": 82.63094091415405
    }
]