[
    {
        "patch": "public static Type getFieldType(final Class<?> clazz, final Type type, Type fieldType) {\n    if (clazz == null || type == null) {\n        return fieldType;\n    }\n\n    if (fieldType instanceof GenericArrayType) {\n        GenericArrayType genericArrayType = (GenericArrayType) fieldType;\n        Type componentType = genericArrayType.getGenericComponentType();\n        Type componentTypeX = getFieldType(clazz, type, componentType);\n        if (!componentType.equals(componentTypeX)) {\n            Type fieldTypeX = Array.newInstance((Class<?>) componentTypeX, 0).getClass();\n            return fieldTypeX;\n        }\n\n        return fieldType;\n    }\n\n    if (!TypeUtils.isGenericParamType(type)) {\n        return fieldType;\n    }\n\n    if (fieldType instanceof TypeVariable) {\n        ParameterizedType paramType = (ParameterizedType) TypeUtils.getGenericParamType(type);\n        Class<?> parameterizedClass = TypeUtils.getClass(paramType);\n        final TypeVariable<?> typeVar = (TypeVariable<?>) fieldType;\n\n        TypeVariable<?>[] typeVariables = parameterizedClass.getTypeParameters();\n        for (int i = 0; i < typeVariables.length; ++i) {\n            if (typeVariables[i].getName().equals(typeVar.getName())) {\n                fieldType = paramType.getActualTypeArguments()[i];\n                return fieldType;\n            }\n        }\n    }\n\n    if (fieldType instanceof ParameterizedType) {\n        ParameterizedType parameterizedFieldType = (ParameterizedType) fieldType;\n\n        Type[] arguments = parameterizedFieldType.getActualTypeArguments();\n        TypeVariable<?>[] typeVariables = null;\n        ParameterizedType paramType = null;\n        if (type instanceof ParameterizedType) {\n            paramType = (ParameterizedType) type;\n            typeVariables = clazz.getTypeParameters();\n        } else if (clazz.getGenericSuperclass() instanceof ParameterizedType) {\n            paramType = (ParameterizedType) clazz.getGenericSuperclass();\n            typeVariables = clazz.getSuperclass().getTypeParameters();\n        }\n\n        boolean changed = getArgument(arguments, typeVariables, paramType.getActualTypeArguments());\n        if (changed) {\n            fieldType = new ParameterizedTypeImpl(arguments, parameterizedFieldType.getOwnerType(),\n                    parameterizedFieldType.getRawType());\n            return fieldType;\n        }\n    }\n\n    return fieldType;\n}",
        "patched_method_loc": [
            260,
            319
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.parser.deser.generic.GenericArrayTest3#test_generic: java.lang.ClassCastException: : com.alibaba.fastjson.util.ParameterizedTypeImpl cannot be cast to java.lang.Class",
            "com.alibaba.json.bvt.parser.deser.generic.GenericArrayTest5#test_generic: java.lang.ClassCastException: : sun.reflect.generics.reflectiveObjects.TypeVariableImpl cannot be cast to java.lang.Class",
            "com.alibaba.json.bvt.parser.deser.DefaultObjectDeserializerTest8#test_1: java.lang.ClassCastException: : sun.reflect.generics.reflectiveObjects.TypeVariableImpl cannot be cast to java.lang.Class"
        ],
        "validation_time": 37.52271056175232
    },
    {
        "patch": null,
        "patched_method_loc": null,
        "status": null,
        "error_message": null,
        "validation_time": null
    },
    {
        "patch": null,
        "patched_method_loc": null,
        "status": null,
        "error_message": null,
        "validation_time": null
    },
    {
        "patch": "public static Type getFieldType(final Class<?> clazz, final Type type, Type fieldType) {\n    if (clazz == null || type == null) {\n        return fieldType;\n    }\n\n    if (fieldType instanceof GenericArrayType) {\n        GenericArrayType genericArrayType = (GenericArrayType) fieldType;\n        Type componentType = genericArrayType.getGenericComponentType();\n        Type componentTypeX = getFieldType(clazz, type, componentType);\n        if (!componentType.equals(componentTypeX)) {\n            Type fieldTypeX = Array.newInstance(TypeUtils.getClass(componentTypeX), 0).getClass();\n            return fieldTypeX;\n        }\n\n        return fieldType;\n    }\n\n    if (!TypeUtils.isGenericParamType(type)) {\n        return fieldType;\n    }\n\n    if (fieldType instanceof TypeVariable) {\n        ParameterizedType paramType = (ParameterizedType) TypeUtils.getGenericParamType(type);\n        Class<?> parameterizedClass = TypeUtils.getClass(paramType);\n        final TypeVariable<?> typeVar = (TypeVariable<?>) fieldType;\n\n        TypeVariable<?>[] typeVariables = parameterizedClass.getTypeParameters();\n        for (int i = 0; i < typeVariables.length; ++i) {\n            if (typeVariables[i].getName().equals(typeVar.getName())) {\n                fieldType = paramType.getActualTypeArguments()[i];\n                return fieldType;\n            }\n        }\n    }\n\n    if (fieldType instanceof ParameterizedType) {\n        ParameterizedType parameterizedFieldType = (ParameterizedType) fieldType;\n\n        Type[] arguments = parameterizedFieldType.getActualTypeArguments();\n        TypeVariable<?>[] typeVariables = null;\n        ParameterizedType paramType = null;\n        if (type instanceof ParameterizedType) {\n            paramType = (ParameterizedType) type;\n            typeVariables = clazz.getTypeParameters();\n        } else if (clazz.getGenericSuperclass() instanceof ParameterizedType) {\n            paramType = (ParameterizedType) clazz.getGenericSuperclass();\n            typeVariables = clazz.getSuperclass().getTypeParameters();\n        }\n\n        boolean changed = false; // Initialize to false\n        if (paramType != null && typeVariables != null && arguments.length == typeVariables.length) {\n            for (int i = 0; i < arguments.length; i++) {\n                if (!arguments[i].equals(paramType.getActualTypeArguments()[i])) {\n                    changed = true;\n                    break;\n                }\n            }\n        }\n\n        if (changed) {\n            fieldType = new ParameterizedTypeImpl(arguments, parameterizedFieldType.getOwnerType(),\n                    parameterizedFieldType.getRawType());\n            return fieldType;\n        }\n    }\n\n    return fieldType;\n}",
        "patched_method_loc": [
            259,
            327
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.bug.Bug_for_issue_569#test_for_issue: java.lang.ClassCastException: : com.alibaba.fastjson.JSONObject cannot be cast to com.alibaba.json.bvt.bug.Bug_for_issue_569$LoginResponse$Body",
            "com.alibaba.json.bvt.util.FieldInfoTest#test_null: java.lang.AssertionError: expected:<T> but was:<class com.alibaba.json.bvt.util.FieldInfoTest$ValueObject>",
            "com.alibaba.json.bvt.parser.deser.generic.GenericTest3#test_generic: java.lang.ClassCastException: : com.alibaba.fastjson.JSONObject cannot be cast to com.alibaba.json.bvt.parser.deser.generic.GenericTest3$ValueObject",
            "com.alibaba.json.bvt.parser.deser.generic.GenericMap#test_generic: java.lang.ClassCastException: : com.alibaba.fastjson.JSONObject cannot be cast to com.alibaba.json.bvt.parser.deser.generic.GenericMap$User"
        ],
        "validation_time": 35.12718367576599
    },
    {
        "patch": null,
        "patched_method_loc": null,
        "status": null,
        "error_message": null,
        "validation_time": null
    },
    {
        "patch": null,
        "patched_method_loc": null,
        "status": null,
        "error_message": null,
        "validation_time": null
    },
    {
        "patch": null,
        "patched_method_loc": null,
        "status": null,
        "error_message": null,
        "validation_time": null
    },
    {
        "patch": "public static Type getFieldType(final Class<?> clazz, final Type type, Type fieldType) {\n    if (clazz == null || type == null) {\n        return fieldType;\n    }\n\n    if (fieldType instanceof GenericArrayType) {\n        GenericArrayType genericArrayType = (GenericArrayType) fieldType;\n        Type componentType = genericArrayType.getGenericComponentType();\n        Type componentTypeX = getFieldType(clazz, type, componentType);\n        if (!componentType.equals(componentTypeX)) {\n            Type fieldTypeX = Array.newInstance((Class<?>) componentTypeX, 0).getClass();\n            return fieldTypeX;\n        }\n\n        return fieldType;\n    }\n\n    if (fieldType instanceof TypeVariable) {\n        TypeVariable<?> typeVar = (TypeVariable<?>) fieldType;\n        if (TypeUtils.isGenericParamType(type)) {\n            ParameterizedType paramType = (ParameterizedType) TypeUtils.getGenericParamType(type);\n            Class<?> parameterizedClass = TypeUtils.getClass(paramType);\n            \n            TypeVariable<?>[] typeVariables = parameterizedClass.getTypeParameters();\n            for (int i = 0; i < typeVariables.length; ++i) {\n                if (typeVariables[i].getName().equals(typeVar.getName())) {\n                    fieldType = paramType.getActualTypeArguments()[i];\n                    return fieldType;\n                }\n            }\n        }\n    }\n\n    if (fieldType instanceof ParameterizedType) {\n        ParameterizedType parameterizedFieldType = (ParameterizedType) fieldType;\n\n        Type[] arguments = parameterizedFieldType.getActualTypeArguments();\n        TypeVariable<?>[] typeVariables = null;\n        ParameterizedType paramType = null;\n        if (type instanceof ParameterizedType) {\n            paramType = (ParameterizedType) type;\n            typeVariables = paramType.getRawType().getTypeParameters();\n        } else if (clazz.getGenericSuperclass() instanceof ParameterizedType) {\n            paramType = (ParameterizedType) clazz.getGenericSuperclass();\n            typeVariables = clazz.getSuperclass().getTypeParameters();\n        }\n\n        boolean changed = getArgument(arguments, typeVariables, paramType.getActualTypeArguments());\n        if (changed) {\n            fieldType = new ParameterizedTypeImpl(arguments, parameterizedFieldType.getOwnerType(),\n                                                  parameterizedFieldType.getRawType());\n            return fieldType;\n        }\n    }\n\n    return fieldType;\n}",
        "patched_method_loc": [
            260,
            317
        ],
        "status": "[CE]",
        "error_message": [
            "[301,51] cannot find symbol\n  symbol:   method getTypeParameters()"
        ],
        "validation_time": 2.999211549758911
    },
    {
        "patch": null,
        "patched_method_loc": null,
        "status": null,
        "error_message": null,
        "validation_time": null
    },
    {
        "patch": null,
        "patched_method_loc": null,
        "status": null,
        "error_message": null,
        "validation_time": null
    },
    {
        "patch": null,
        "patched_method_loc": null,
        "status": null,
        "error_message": null,
        "validation_time": null
    },
    {
        "patch": "public static Type getFieldType(final Class<?> clazz, final Type type, Type fieldType) {\n    if (clazz == null || type == null) {\n        return fieldType;\n    }\n\n    if (fieldType instanceof GenericArrayType) {\n        GenericArrayType genericArrayType = (GenericArrayType) fieldType;\n        Type componentType = genericArrayType.getGenericComponentType();\n        Type componentTypeX = getFieldType(clazz, type, componentType);\n        if (!componentType.equals(componentTypeX)) {\n            Type fieldTypeX = Array.newInstance((Class<?>) componentTypeX, 0).getClass();\n            return fieldTypeX;\n        }\n\n        return fieldType;\n    }\n\n    if (!TypeUtils.isGenericParamType(type)) {\n        return fieldType;\n    }\n\n    if (fieldType instanceof TypeVariable) {\n        ParameterizedType paramType = (ParameterizedType) TypeUtils.getGenericParamType(type);\n        Class<?> parameterizedClass = TypeUtils.getClass(paramType);\n        final TypeVariable<?> typeVar = (TypeVariable<?>) fieldType;\n\n        TypeVariable<?>[] typeVariables = parameterizedClass.getTypeParameters();\n        for (int i = 0; i < typeVariables.length; ++i) {\n            if (typeVariables[i].getName().equals(typeVar.getName())) {\n                fieldType = paramType.getActualTypeArguments()[i];\n                return fieldType;\n            }\n        }\n    }\n\n    if (fieldType instanceof ParameterizedType) {\n        ParameterizedType parameterizedFieldType = (ParameterizedType) fieldType;\n\n        Type[] arguments = parameterizedFieldType.getActualTypeArguments();\n        TypeVariable<?>[] typeVariables = null;\n        ParameterizedType paramType = null;\n        if (type instanceof ParameterizedType) {\n            paramType = (ParameterizedType) type;\n            typeVariables = clazz.getTypeParameters();\n        } else if (clazz.getGenericSuperclass() instanceof ParameterizedType) {\n            paramType = (ParameterizedType) clazz.getGenericSuperclass();\n            typeVariables = clazz.getSuperclass().getTypeParameters();\n        }\n\n        boolean changed = getArgument(arguments, typeVariables, paramType.getActualTypeArguments());\n        if (changed) {\n            fieldType = new ParameterizedTypeImpl(arguments, parameterizedFieldType.getOwnerType(),\n                    parameterizedFieldType.getRawType());\n            return fieldType;\n        }\n    }\n\n    return fieldType;\n}",
        "patched_method_loc": [
            259,
            318
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.parser.deser.generic.GenericArrayTest3#test_generic: java.lang.ClassCastException: : com.alibaba.fastjson.util.ParameterizedTypeImpl cannot be cast to java.lang.Class",
            "com.alibaba.json.bvt.parser.deser.generic.GenericArrayTest5#test_generic: java.lang.ClassCastException: : sun.reflect.generics.reflectiveObjects.TypeVariableImpl cannot be cast to java.lang.Class",
            "com.alibaba.json.bvt.parser.deser.DefaultObjectDeserializerTest8#test_1: java.lang.ClassCastException: : sun.reflect.generics.reflectiveObjects.TypeVariableImpl cannot be cast to java.lang.Class"
        ],
        "validation_time": 35.093108892440796
    },
    {
        "patch": null,
        "patched_method_loc": null,
        "status": null,
        "error_message": null,
        "validation_time": null
    },
    {
        "patch": "public static Type getFieldType(final Class<?> clazz, final Type type, Type fieldType) {\n    if (fieldType instanceof GenericArrayType) {\n        GenericArrayType genericArrayType = (GenericArrayType) fieldType;\n        Type componentType = genericArrayType.getGenericComponentType();\n        Type componentTypeX = getFieldType(clazz, type, componentType);\n        if (componentType != componentTypeX) {\n            return Array.newInstance((Class<?>) componentTypeX, 0).getClass();\n        }\n        return fieldType;\n    }\n\n    if (TypeUtils.isGenericParamType(type) && fieldType instanceof TypeVariable) {\n        ParameterizedType paramType = (ParameterizedType) type;\n        TypeVariable<?> typeVar = (TypeVariable<?>) fieldType;\n\n        Type[] actualTypeArguments = paramType.getActualTypeArguments();\n        TypeVariable<?>[] typeVariables = TypeUtils.getClass(paramType).getTypeParameters();\n\n        for (int i = 0; i < typeVariables.length; i++) {\n            if (typeVariables[i].getName().equals(typeVar.getName())) {\n                return actualTypeArguments[i];\n            }\n        }\n    }\n\n    if (fieldType instanceof ParameterizedType) {\n        ParameterizedType parameterizedFieldType = (ParameterizedType) fieldType;\n        Type[] arguments = parameterizedFieldType.getActualTypeArguments();\n\n        if (type instanceof ParameterizedType) {\n            ParameterizedType paramType = (ParameterizedType) type;\n            TypeVariable<?>[] typeVariables = clazz.getTypeParameters();\n\n            if (getArgument(arguments, typeVariables, paramType.getActualTypeArguments())) {\n                return new ParameterizedTypeImpl(arguments, parameterizedFieldType.getOwnerType(),\n                        parameterizedFieldType.getRawType());\n            }\n        } else if (clazz.getGenericSuperclass() instanceof ParameterizedType) {\n            ParameterizedType paramType = (ParameterizedType) clazz.getGenericSuperclass();\n            TypeVariable<?>[] typeVariables = clazz.getSuperclass().getTypeParameters();\n\n            if (getArgument(arguments, typeVariables, paramType.getActualTypeArguments())) {\n                return new ParameterizedTypeImpl(arguments, parameterizedFieldType.getOwnerType(),\n                        parameterizedFieldType.getRawType());\n            }\n        }\n    }\n\n    return fieldType;\n}",
        "patched_method_loc": [
            260,
            310
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.parser.deser.generic.GenericArrayTest3#test_generic: java.lang.ClassCastException: : com.alibaba.fastjson.util.ParameterizedTypeImpl cannot be cast to java.lang.Class",
            "com.alibaba.json.bvt.parser.deser.generic.GenericArrayTest5#test_generic: java.lang.ClassCastException: : java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType",
            "com.alibaba.json.bvt.parser.deser.DefaultObjectDeserializerTest8#test_1: java.lang.ClassCastException: : sun.reflect.generics.reflectiveObjects.TypeVariableImpl cannot be cast to java.lang.Class",
            "com.alibaba.json.bvt.parser.deser.generic.GenericTest#test_0: java.lang.ClassCastException: : java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType"
        ],
        "validation_time": 35.137038469314575
    },
    {
        "patch": null,
        "patched_method_loc": null,
        "status": null,
        "error_message": null,
        "validation_time": null
    },
    {
        "patch": null,
        "patched_method_loc": null,
        "status": null,
        "error_message": null,
        "validation_time": null
    },
    {
        "patch": null,
        "patched_method_loc": null,
        "status": null,
        "error_message": null,
        "validation_time": null
    },
    {
        "patch": "public static Type getFieldType(final Class<?> clazz, final Type type, Type fieldType) {\n    if (clazz == null || type == null) {\n        return fieldType;\n    }\n\n    if (fieldType instanceof GenericArrayType) {\n        GenericArrayType genericArrayType = (GenericArrayType) fieldType;\n        Type componentType = genericArrayType.getGenericComponentType();\n        Type componentTypeX = getFieldType(clazz, type, componentType);\n        if (componentType != componentTypeX) {\n            Type fieldTypeX = Array.newInstance(TypeUtils.getRawType(componentTypeX, null), 0).getClass();\n            return fieldTypeX;\n        }\n\n        return fieldType;\n    }\n\n    if (!TypeUtils.isGenericParamType(type)) {\n        return fieldType;\n    }\n\n    if (fieldType instanceof TypeVariable) {\n        ParameterizedType paramType = (ParameterizedType) TypeUtils.getGenericParamType(type);\n        Class<?> parameterizedClass = TypeUtils.getRawType(paramType, null);\n        final TypeVariable<?> typeVar = (TypeVariable<?>) fieldType;\n\n        TypeVariable<?>[] typeVariables = parameterizedClass.getTypeParameters();\n        for (int i = 0; i < typeVariables.length; ++i) {\n            if (typeVariables[i].getName().equals(typeVar.getName())) {\n                fieldType = paramType.getActualTypeArguments()[i];\n                return fieldType;\n            }\n        }\n    }\n\n    if (fieldType instanceof ParameterizedType) {\n        ParameterizedType parameterizedFieldType = (ParameterizedType) fieldType;\n\n        Type[] arguments = parameterizedFieldType.getActualTypeArguments();\n        TypeVariable<?>[] typeVariables = null;\n        ParameterizedType paramType = null;\n        if (type instanceof ParameterizedType) {\n            paramType = (ParameterizedType) type;\n            typeVariables = TypeUtils.getRawType(clazz, null).getTypeParameters();\n        } else if (clazz.getGenericSuperclass() instanceof ParameterizedType) {\n            paramType = (ParameterizedType) clazz.getGenericSuperclass();\n            typeVariables = TypeUtils.getRawType(clazz.getSuperclass(), null).getTypeParameters();\n        }\n\n        boolean changed = getArgument(arguments, typeVariables, paramType.getActualTypeArguments());\n        if (changed) {\n            fieldType = new ParameterizedTypeImpl(arguments, parameterizedFieldType.getOwnerType(),\n                    parameterizedFieldType.getRawType());\n            return fieldType;\n        }\n    }\n\n    return fieldType;\n}",
        "patched_method_loc": [
            260,
            319
        ],
        "status": "[CE]",
        "error_message": [
            "[18,40] package org.apache.commons.lang3.reflect does not exist"
        ],
        "validation_time": 2.180720090866089
    },
    {
        "patch": "public static Type getFieldType(final Class<?> clazz, final Type type, Type fieldType) {\n    if (clazz == null || type == null) {\n        return fieldType;\n    }\n\n    if (fieldType instanceof GenericArrayType) {\n        GenericArrayType genericArrayType = (GenericArrayType) fieldType;\n        Type componentType = genericArrayType.getGenericComponentType();\n        Type componentTypeX = getFieldType(clazz, type, componentType);\n        if (componentType != componentTypeX) {\n            Type fieldTypeX = Array.newInstance((Class<?>) componentTypeX, 0).getClass();\n            return fieldTypeX;\n        }\n        return fieldType;\n    }\n\n    if (!TypeUtils.isGenericParamType(type)) {\n        return fieldType;\n    }\n\n    if (fieldType instanceof TypeVariable) {\n        ParameterizedType paramType = (ParameterizedType) TypeUtils.getGenericParamType(type);\n        Class<?> parameterizedClass = TypeUtils.getClass(paramType);\n        final TypeVariable<?> typeVar = (TypeVariable<?>) fieldType;\n\n        TypeVariable<?>[] typeVariables = parameterizedClass.getTypeParameters();\n        for (int i = 0; i < typeVariables.length; ++i) {\n            if (typeVariables[i].getName().equals(typeVar.getName())) {\n                fieldType = paramType.getActualTypeArguments()[i];\n                return fieldType;\n            }\n        }\n    }\n\n    if (fieldType instanceof ParameterizedType) {\n        ParameterizedType parameterizedFieldType = (ParameterizedType) fieldType;\n        Type[] arguments = parameterizedFieldType.getActualTypeArguments();\n        Type[] newArguments = Arrays.copyOf(arguments, arguments.length);\n        boolean changed = getArgument(newArguments, clazz.getTypeParameters(), type);\n        if (changed) {\n            fieldType = new ParameterizedTypeImpl(newArguments, parameterizedFieldType.getOwnerType(),\n                    parameterizedFieldType.getRawType());\n            return fieldType;\n        }\n    }\n\n    return fieldType;\n}",
        "patched_method_loc": [
            260,
            308
        ],
        "status": "[CE]",
        "error_message": [
            "[298,80] incompatible types: java.lang.reflect.Type cannot be converted to java.lang.reflect.Type[]"
        ],
        "validation_time": 2.863847017288208
    },
    {
        "patch": null,
        "patched_method_loc": null,
        "status": null,
        "error_message": null,
        "validation_time": null
    },
    {
        "patch": null,
        "patched_method_loc": null,
        "status": null,
        "error_message": null,
        "validation_time": null
    },
    {
        "patch": "public static Type getFieldType(final Class<?> clazz, final Type type, Type fieldType) {\n    if (clazz == null || type == null) {\n        return fieldType;\n    }\n\n    if (fieldType instanceof GenericArrayType) {\n        GenericArrayType genericArrayType = (GenericArrayType) fieldType;\n        Type componentType = genericArrayType.getGenericComponentType();\n        Type componentTypeX = getFieldType(clazz, type, componentType);\n        if (!componentType.equals(componentTypeX)) {\n            Type fieldTypeX = Array.newInstance(TypeUtils.getClass(componentTypeX), 0).getClass();\n            return fieldTypeX;\n        }\n\n        return fieldType;\n    }\n\n    if (!TypeUtils.isGenericParamType(type)) {\n        return fieldType;\n    }\n\n    if (fieldType instanceof TypeVariable) {\n        ParameterizedType paramType = (ParameterizedType) TypeUtils.getGenericParamType(type);\n        Class<?> parameterizedClass = TypeUtils.getClass(paramType);\n        final TypeVariable<?> typeVar = (TypeVariable<?>) fieldType;\n\n        TypeVariable<?>[] typeVariables = parameterizedClass.getTypeParameters();\n        for (int i = 0; i < typeVariables.length; ++i) {\n            if (typeVariables[i].getName().equals(typeVar.getName())) {\n                fieldType = paramType.getActualTypeArguments()[i];\n                return fieldType;\n            }\n        }\n    }\n\n    if (fieldType instanceof ParameterizedType) {\n        ParameterizedType parameterizedFieldType = (ParameterizedType) fieldType;\n\n        Type[] arguments = parameterizedFieldType.getActualTypeArguments();\n        TypeVariable<?>[] typeVariables = null;\n        ParameterizedType paramType = null;\n        if (type instanceof ParameterizedType) {\n            paramType = (ParameterizedType) type;\n            typeVariables = clazz.getTypeParameters();\n        } else if (clazz.getGenericSuperclass() instanceof ParameterizedType) {\n            paramType = (ParameterizedType) clazz.getGenericSuperclass();\n            typeVariables = clazz.getSuperclass().getTypeParameters();\n        }\n\n        boolean changed = false;\n        if (paramType != null && typeVariables != null) {\n            changed = getArgument(arguments, typeVariables, paramType.getActualTypeArguments());\n        }\n        if (changed) {\n            fieldType = new ParameterizedTypeImpl(arguments, parameterizedFieldType.getOwnerType(),\n                    parameterizedFieldType.getRawType());\n            return fieldType;\n        }\n    }\n\n    return fieldType;\n}",
        "patched_method_loc": [
            260,
            322
        ],
        "status": "[CE]",
        "error_message": [
            "[23,40] package org.apache.commons.lang3.reflect does not exist"
        ],
        "validation_time": 2.2348222732543945
    },
    {
        "patch": null,
        "patched_method_loc": null,
        "status": null,
        "error_message": null,
        "validation_time": null
    },
    {
        "patch": "public static Type getFieldType(final Class<?> clazz, final Type type, Type fieldType) {\n    if (clazz == null) {\n        return fieldType;\n    }\n\n    if (type == null || fieldType == null) {\n        return fieldType;\n    }\n\n    if (fieldType instanceof GenericArrayType) {\n        GenericArrayType genericArrayType = (GenericArrayType) fieldType;\n        Type componentType = genericArrayType.getGenericComponentType();\n        Type componentTypeX = getFieldType(clazz, type, componentType);\n        if (!componentType.equals(componentTypeX)) {\n            Type fieldTypeX = Array.newInstance(TypeUtils.getClass(componentTypeX), 0).getClass();\n            return fieldTypeX;\n        }\n\n        return fieldType;\n    }\n\n    if (!TypeUtils.isGenericParamType(type)) {\n        return fieldType;\n    }\n\n    if (fieldType instanceof TypeVariable) {\n        ParameterizedType paramType = (ParameterizedType) TypeUtils.getGenericParamType(type);\n        Class<?> parameterizedClass = TypeUtils.getClass(paramType);\n        final TypeVariable<?> typeVar = (TypeVariable<?>) fieldType;\n\n        TypeVariable<?>[] typeVariables = parameterizedClass.getTypeParameters();\n        for (int i = 0; i < typeVariables.length; ++i) {\n            if (typeVariables[i].getName().equals(typeVar.getName())) {\n                fieldType = paramType.getActualTypeArguments()[i];\n                return fieldType;\n            }\n        }\n    }\n\n    if (fieldType instanceof ParameterizedType) {\n        ParameterizedType parameterizedFieldType = (ParameterizedType) fieldType;\n\n        Type[] arguments = parameterizedFieldType.getActualTypeArguments();\n        TypeVariable<?>[] typeVariables = null;\n        ParameterizedType paramType = null;\n        if (type instanceof ParameterizedType) {\n            paramType = (ParameterizedType) type;\n            typeVariables = clazz.getTypeParameters();\n        } else if (clazz.getGenericSuperclass() instanceof ParameterizedType) {\n            paramType = (ParameterizedType) clazz.getGenericSuperclass();\n            typeVariables = clazz.getSuperclass().getTypeParameters();\n        }\n\n        boolean changed = false;\n        if (paramType != null && typeVariables != null) {\n            for (int i = 0; i < arguments.length; i++) {\n                if (!arguments[i].equals(paramType.getActualTypeArguments()[i])) {\n                    changed = true;\n                    break;\n                }\n            }\n        }\n\n        if (changed) {\n            fieldType = new ParameterizedTypeImpl(arguments, parameterizedFieldType.getOwnerType(),\n                                                  parameterizedFieldType.getRawType());\n            return fieldType;\n        }\n    }\n\n    return fieldType;\n}",
        "patched_method_loc": [
            253,
            325
        ],
        "status": "[FE]",
        "error_message": [
            "com.alibaba.json.bvt.bug.Bug_for_issue_569#test_for_issue: java.lang.ClassCastException: : com.alibaba.fastjson.JSONObject cannot be cast to com.alibaba.json.bvt.bug.Bug_for_issue_569$LoginResponse$Body",
            "com.alibaba.json.bvt.util.FieldInfoTest#test_null: java.lang.AssertionError: expected:<T> but was:<class com.alibaba.json.bvt.util.FieldInfoTest$ValueObject>",
            "com.alibaba.json.bvt.parser.deser.generic.GenericTest3#test_generic: java.lang.ClassCastException: : com.alibaba.fastjson.JSONObject cannot be cast to com.alibaba.json.bvt.parser.deser.generic.GenericTest3$ValueObject",
            "com.alibaba.json.bvt.parser.deser.generic.GenericMap#test_generic: java.lang.ClassCastException: : com.alibaba.fastjson.JSONObject cannot be cast to com.alibaba.json.bvt.parser.deser.generic.GenericMap$User"
        ],
        "validation_time": 36.44755411148071
    },
    {
        "patch": null,
        "patched_method_loc": null,
        "status": null,
        "error_message": null,
        "validation_time": null
    }
]